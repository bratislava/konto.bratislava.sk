/* tslint:disable */
/* eslint-disable */
/**
 * slovensko.sk API
 * slovensko.sk API je proxy REST API komponent k službám www.slovensko.sk (Ústredný portál verejnej správy – ÚPVS), pomocou ktorých je možné:  **Komunitná verzia** (EUPL 1.2 licencia) - uskutočniť prihlásenie pomocou ÚPVS (pomocou elektronického občianskeho preukazu) a získať údaje o prihlásenom subjekte, - manipulovať s obsahom el. schránky a preberať poštu do vlastných rúk, - podávať podania v mene subjektu, ktorý sa prihlásil cez ÚPVS alebo pomocou technického účtu, - vyhľadávať subjekty (právnické a fyzické osoby) za účelom zasielania správ (dostupné len pre OVM), - skontrolovať či je daná správa vo formáte SKTalk validná voči aktuálnej definícii formuláru (podporná funkcia).  **Prémium verzia** (komerčná licencia) - ukladať záznamy do dlhodobého úložiska registratúrnych záznamov, - zverejnovať dokumenty na centrálnej úradnej tabuli (dostupné len pre OVM), - podpisovať správy pomocou kvalifikovanej pečate uloženej v úložisku na slovensko.sk, - pridávať kvalifikované časové pečiatky elektronicky podpísaným dokumentom, - informatívne overovať podpisy na elektronicky podpísaných dokumentoch, - získať informácie o type a forme podpisov elektronicky podpísaných dokumentov.
 *
 * The version of the OpenAPI document: 3.7.3 (Komunitná verzia) 8.8.2 (Prémium verzia)
 * Contact: ekosystem@slovensko.digital
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'

export const BASE_PATH = 'https://fix.slovensko-sk-api.staging.slovensko.digital'.replace(
  /\/+$/,
  '',
)

export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
}

export interface RequestArgs {
  url: string
  options: RawAxiosRequestConfig
}

export class BaseAPI {
  protected configuration: Configuration | undefined

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios,
  ) {
    if (configuration) {
      this.configuration = configuration
      this.basePath = configuration.basePath ?? basePath
    }
  }
}

export class RequiredError extends Error {
  constructor(
    public field: string,
    msg?: string,
  ) {
    super(msg)
    this.name = 'RequiredError'
  }
}

interface ServerMap {
  [key: string]: {
    url: string
    description: string
  }[]
}

export const operationServerMap: ServerMap = {}
