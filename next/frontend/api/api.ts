// TODO waiting on #305 to get merged, afterwards might move elsewhere
// frontend code for calling api endpoints grouped
import { ErrorObject } from 'ajv'
import { getAccessTokenOrLogout } from 'frontend/utils/amplify'

import { environment } from '../../environment'
import {
  ApiError,
  Gdpr,
  Identity,
  LegalIdentity,
  TaxApiError,
  UrlResult,
  User,
} from '../dtos/generalApiDto'
import logger, { developmentLog } from '../utils/logger'

export const API_ERROR_TEXT = 'API_ERROR'
export const UNAUTHORIZED_ERROR_TEXT = 'UNAUTHORIZED_ERROR'
export const MISSING_TOKEN = 'MISSING TOKEN'

// TODO about to get replaced with client generated by openAPI

const fetchJsonApi = async <T = any>(path: string, options?: RequestInit): Promise<T> => {
  try {
    const response = await fetch(path, options)
    if (response.ok) {
      try {
        return (await response.json()) as T
      } catch (error) {
        developmentLog('FETCH JSON API RAW ERROR 1', error as Record<string, unknown>, true)
        throw new Error(API_ERROR_TEXT)
      }
    }
    if (response.status === 401) {
      throw new Error(UNAUTHORIZED_ERROR_TEXT)
    }
    // try parsing errors - if they may apper in different format extend here
    const responseText = await response.text()
    let responseJson: Record<string, any> = {}
    try {
      responseJson = JSON.parse(responseText)
    } catch (error) {
      developmentLog('FETCH JSON API RAW ERROR 2', error as Record<string, unknown>, true)
      logger.error(API_ERROR_TEXT, response.status, response.statusText, responseText, response)
      throw new Error(response.statusText || API_ERROR_TEXT)
    }
    if (responseJson?.errors) {
      const responseMessage = String(responseJson?.message || API_ERROR_TEXT)
      const responseErrors: ErrorObject[] = Array.isArray(responseJson.errors)
        ? responseJson.errors
        : []
      throw new ApiError(responseMessage, responseErrors)
    } else if (responseJson?.errorName) {
      throw new TaxApiError(String(responseJson.errorName), responseJson)
    } else {
      throw new TaxApiError(API_ERROR_TEXT, responseJson)
    }
  } catch (error) {
    // TODO originally caught & rethrown to ensure logging, might no longer be necessary
    developmentLog('FETCH JSON API RAW ERROR 2', error as Record<string, unknown>, true)
    logger.error(error)
    throw error
  }
}

export const verifyIdentityApi = async (data: Identity) => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi(`${environment.cityAccountUrl}/user-verification/identity-card`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify(data),
  })
}

export const verifyLegalEntityIdentityApi = async (data: LegalIdentity) => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi(`${environment.cityAccountUrl}/user-verification/ico-rpo`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify(data),
  })
}

export const subscribeApi = async (data: { gdprData?: Gdpr[] }): Promise<User> => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi<User>(`${environment.cityAccountUrl}/user/subscribe`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify(data),
  })
}

export const unsubscribeApi = async (data: { gdprData?: Gdpr[] }): Promise<User> => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi<User>(`${environment.cityAccountUrl}/user/unsubscribe`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify(data),
  })
}

export const getUserApi = async (): Promise<User> => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi<User>(`${environment.cityAccountUrl}/user/get-or-create`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  })
}

export const resetRcApi = async () => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi(`${environment.cityAccountUrl}/user/remove-birthnumber`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  })
}

export const getTaxApi = async () => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi(`${environment.taxesUrl}/tax/get-tax-by-year?year=2023`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  })
}

export const getTaxPdfApi = async () => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi(`${environment.taxesUrl}/tax/get-tax-pdf-by-year?year=2023`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  })
}

export const getPaymentGatewayUrlApi = async (): Promise<UrlResult> => {
  const token = await getAccessTokenOrLogout()

  return fetchJsonApi<UrlResult>(`${environment.taxesUrl}/payment/cardpay/by-year/2023`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  })
}

export const getEnum = async (id?: string) => {
  if (!id) {
    return []
  }

  try {
    const response = await fetch(`https://www.slovensko.sk/static/util/filler/lookup.aspx?id=${id}`)
    const responseText = await response.text()

    if (response.ok) {
      // remove rounded brackets and parse
      const data: { aaData: string[][] } = JSON.parse(responseText.slice(1, -2))
      return data.aaData?.map((x: string[]) => ({
        const: x[0],
        title: x[1],
      }))
    }

    throw new Error(responseText)
  } catch (error) {
    // TODO originally caught & rethrown to ensure logging, might no longer be necessary
    logger.error(error)
    throw error
  }
}
