apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${BUILD_REPOSITORY_NAME}-app
  namespace: ${NAMESPACE}
  labels:
    service: app
  annotations:
    repositoryUrl: ${BUILD_REPOSITORY_URI}
    commit: ${COMMIT}
    tag: ${TAG}
    image: ${IMAGE}
spec:
  selector:
    matchLabels:
      service: app
  template:
    metadata:
      labels:
        service: app
    spec:
      initContainers:
      - name: wait-for-rabbit-ready
        image: alpine/curl:3.14
        command: ['sh', '-c', 'until curl -u "$${esc}username:$${esc}password" http://$${esc}host:15672/api/aliveness-test/%2F; do echo waiting for rabbitmq; sleep 2; done;']
        envFrom:
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-rabbitmq-default-user
      containers:
      - image: ${IMAGE_TAG}
        name: app
        imagePullPolicy: Always
        resources:
          limits:
            cpu: ${NEST_CPU_LIMITS}
            memory: ${NEST_MEMORY_LIMITS}
          requests:
            cpu: ${NEST_CPU_REQUESTS}
            memory: ${NEST_MEMORY_REQUESTS}
        ports:
        - name: api
          containerPort: ${INTERNAL_APP_PORT}
          protocol: TCP
        env:
        - name: RABBIT_MQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${BUILD_REPOSITORY_NAME}-rabbitmq-default-user
              key: password
        - name: RABBIT_MQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: ${BUILD_REPOSITORY_NAME}-rabbitmq-default-user
              key: username
        - name: RABBIT_MQ_PORT
          valueFrom:
            secretKeyRef:
              name: ${BUILD_REPOSITORY_NAME}-rabbitmq-default-user
              key: port
        - name: RABBIT_MQ_HOST
          valueFrom:
            secretKeyRef:
              name: ${BUILD_REPOSITORY_NAME}-rabbitmq-default-user
              key: host
        - name: RABBIT_MQ_URI
          value: amqp://$(RABBIT_MQ_USERNAME):$(RABBIT_MQ_PASSWORD)@$(RABBIT_MQ_HOST):$(RABBIT_MQ_PORT)
        - name: DATABASE_URL
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@${BUILD_REPOSITORY_NAME}-database:5432/$(POSTGRES_DB)?schema=public&connection_limit=500
        envFrom:
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-database-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-cognito-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-azure-magproxy-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-turnstile-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-mailgun-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-apikey-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-nases-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-bloomreach-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-cipher-key-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-tax-backend-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-oauth2-dpb-secret
        - secretRef:
            name: ${BUILD_REPOSITORY_NAME}-oauth2-mpa-secret
        - configMapRef:
            name: ${BUILD_REPOSITORY_NAME}-env
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: ${INTERNAL_APP_PORT}
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRET}
