/* tslint:disable */
/* eslint-disable */
/**
 * Bratislava magproxy
 * Bratislava
 *
 * The version of the OpenAPI document: 1.0
 * Contact: inovacie@bratislava.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 *
 * @export
 * @interface Activity
 */
export interface Activity {
  /**
   *
   * @type {boolean}
   * @memberof Activity
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  platnostDo: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  pozastavenieOd: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  pozastavenieDo: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  kod: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  popis: string
  /**
   *
   * @type {CodelistDto}
   * @memberof Activity
   */
  klasifikacia: CodelistDto
}
/**
 *
 * @export
 * @interface BadRequestErrorDto
 */
export interface BadRequestErrorDto {
  /**
   * Status code
   * @type {number}
   * @memberof BadRequestErrorDto
   */
  statusCode: number
  /**
   * State
   * @type {string}
   * @memberof BadRequestErrorDto
   */
  state: string
  /**
   * Error type
   * @type {string}
   * @memberof BadRequestErrorDto
   */
  type: string
  /**
   * Error name
   * @type {string}
   * @memberof BadRequestErrorDto
   */
  errorName: BadRequestErrorDtoErrorNameEnum
  /**
   * Additional info about error
   * @type {object}
   * @memberof BadRequestErrorDto
   */
  messsage?: object
}

export const BadRequestErrorDtoErrorNameEnum = {
  DcomRequestError: 'DCOM_REQUEST_ERROR',
  ParserError: 'PARSER_ERROR',
  DcomNotfound: 'DCOM_NOTFOUND',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  MarkPersonError: 'MARK_PERSON_ERROR',
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const

export type BadRequestErrorDtoErrorNameEnum =
  (typeof BadRequestErrorDtoErrorNameEnum)[keyof typeof BadRequestErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface BankConnectionDto
 */
export interface BankConnectionDto {
  /**
   *
   * @type {string}
   * @memberof BankConnectionDto
   */
  menoBanky: string
  /**
   *
   * @type {PhysicalPersonNameDto}
   * @memberof BankConnectionDto
   */
  menoFyzickejOsoby: PhysicalPersonNameDto
  /**
   *
   * @type {string}
   * @memberof BankConnectionDto
   */
  plnyNazovPo: string
  /**
   *
   * @type {DomesticBankDto}
   * @memberof BankConnectionDto
   */
  domaceBankoveSpojenie: DomesticBankDto
  /**
   *
   * @type {ForeignBankDto}
   * @memberof BankConnectionDto
   */
  zahranicneBankoveSpojenie: ForeignBankDto
}
/**
 *
 * @export
 * @interface BirthDto
 */
export interface BirthDto {
  /**
   *
   * @type {string}
   * @memberof BirthDto
   */
  datumNarodenia: string
  /**
   *
   * @type {string}
   * @memberof BirthDto
   */
  miestoNarodenia: string
}
/**
 *
 * @export
 * @interface CodelistDto
 */
export interface CodelistDto {
  /**
   *
   * @type {string}
   * @memberof CodelistDto
   */
  kodCiselnika: string
  /**
   *
   * @type {string}
   * @memberof CodelistDto
   */
  kod: string
  /**
   *
   * @type {string}
   * @memberof CodelistDto
   */
  nazov: string
}
/**
 *
 * @export
 * @interface CodelistWithHistory
 */
export interface CodelistWithHistory {
  /**
   *
   * @type {boolean}
   * @memberof CodelistWithHistory
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof CodelistWithHistory
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof CodelistWithHistory
   */
  platnostDo: string
  /**
   *
   * @type {CodelistDto}
   * @memberof CodelistWithHistory
   */
  hodnota: CodelistDto
}
/**
 *
 * @export
 * @interface DcomKNSAddressDto
 */
export interface DcomKNSAddressDto {
  /**
   *
   * @type {number}
   * @memberof DcomKNSAddressDto
   */
  Id: number
  /**
   *
   * @type {string}
   * @memberof DcomKNSAddressDto
   */
  Street: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSAddressDto
   */
  HouseNo: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSAddressDto
   */
  Municipality: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSAddressDto
   */
  Zip: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSAddressDto
   */
  State: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSAddressDto
   */
  ValidTo: string
}
/**
 *
 * @export
 * @interface DcomKNSubjectDto
 */
export interface DcomKNSubjectDto {
  /**
   *
   * @type {number}
   * @memberof DcomKNSubjectDto
   */
  Id: number
  /**
   *
   * @type {number}
   * @memberof DcomKNSubjectDto
   */
  AddressId: number
  /**
   *
   * @type {number}
   * @memberof DcomKNSubjectDto
   */
  No: number | null
  /**
   *
   * @type {number}
   * @memberof DcomKNSubjectDto
   */
  BirthYear: number
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  Surname: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  FirstName: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  BirthSurname: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  Title: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  ValidTo: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  BirthDate: string
  /**
   *
   * @type {number}
   * @memberof DcomKNSubjectDto
   */
  BirthNo: number | null
  /**
   *
   * @type {number}
   * @memberof DcomKNSubjectDto
   */
  IdNo: number | null
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  FirstNameSearch: string
  /**
   *
   * @type {string}
   * @memberof DcomKNSubjectDto
   */
  SurnameSearch: string
  /**
   *
   * @type {DcomKNSAddressDto}
   * @memberof DcomKNSubjectDto
   */
  BirthSurnameSearch: DcomKNSAddressDto
}
/**
 *
 * @export
 * @interface DeathDto
 */
export interface DeathDto {
  /**
   *
   * @type {string}
   * @memberof DeathDto
   */
  datum: string
  /**
   *
   * @type {string}
   * @memberof DeathDto
   */
  miesto: string
}
/**
 *
 * @export
 * @interface DeliveryAddressDto
 */
export interface DeliveryAddressDto {
  /**
   *
   * @type {string}
   * @memberof DeliveryAddressDto
   */
  psc: string
  /**
   *
   * @type {string}
   * @memberof DeliveryAddressDto
   */
  pobox: string
  /**
   *
   * @type {RecieverDto}
   * @memberof DeliveryAddressDto
   */
  prijemca: RecieverDto
}
/**
 *
 * @export
 * @interface DepositDto
 */
export interface DepositDto {
  /**
   *
   * @type {string}
   * @memberof DepositDto
   */
  typ: string
  /**
   *
   * @type {string}
   * @memberof DepositDto
   */
  vyska: string
  /**
   *
   * @type {string}
   * @memberof DepositDto
   */
  datumSplatnosti: string
  /**
   *
   * @type {CodelistDto}
   * @memberof DepositDto
   */
  mena: CodelistDto
}
/**
 *
 * @export
 * @interface DomesticBankDto
 */
export interface DomesticBankDto {
  /**
   *
   * @type {string}
   * @memberof DomesticBankDto
   */
  formatovane: string
  /**
   *
   * @type {string}
   * @memberof DomesticBankDto
   */
  predcislie: string
  /**
   *
   * @type {string}
   * @memberof DomesticBankDto
   */
  cisloUctu: string
  /**
   *
   * @type {string}
   * @memberof DomesticBankDto
   */
  kodBanky: string
}
/**
 *
 * @export
 * @interface Equity
 */
export interface Equity {
  /**
   *
   * @type {boolean}
   * @memberof Equity
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof Equity
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof Equity
   */
  platnostDo: string
  /**
   *
   * @type {string}
   * @memberof Equity
   */
  hodnota: string
  /**
   *
   * @type {string}
   * @memberof Equity
   */
  splatene: string
  /**
   *
   * @type {string}
   * @memberof Equity
   */
  schvalene: string
  /**
   *
   * @type {CodelistDto}
   * @memberof Equity
   */
  mena: CodelistDto
}
/**
 *
 * @export
 * @interface ForeignBankDto
 */
export interface ForeignBankDto {
  /**
   *
   * @type {string}
   * @memberof ForeignBankDto
   */
  iban: string
  /**
   *
   * @type {string}
   * @memberof ForeignBankDto
   */
  bic: string
}
/**
 *
 * @export
 * @interface HealthCheckResponseDto
 */
export interface HealthCheckResponseDto {
  /**
   *
   * @type {string}
   * @memberof HealthCheckResponseDto
   */
  response: string
}
/**
 *
 * @export
 * @interface IdDto
 */
export interface IdDto {
  /**
   *
   * @type {string}
   * @memberof IdDto
   */
  identifikator: string
  /**
   *
   * @type {CodelistDto}
   * @memberof IdDto
   */
  typIdentifikatora: CodelistDto
}
/**
 *
 * @export
 * @interface IdWithHistory
 */
export interface IdWithHistory {
  /**
   *
   * @type {boolean}
   * @memberof IdWithHistory
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof IdWithHistory
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof IdWithHistory
   */
  platnostDo: string
  /**
   *
   * @type {IdDto}
   * @memberof IdWithHistory
   */
  externeId: IdDto
}
/**
 *
 * @export
 * @interface LegalPersonDto
 */
export interface LegalPersonDto {
  /**
   *
   * @type {string}
   * @memberof LegalPersonDto
   */
  addMissingProps: string
}
/**
 *
 * @export
 * @interface NamesPropsDto
 */
export interface NamesPropsDto {
  /**
   *
   * @type {string}
   * @memberof NamesPropsDto
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof NamesPropsDto
   */
  platnostDo: string
  /**
   *
   * @type {string}
   * @memberof NamesPropsDto
   */
  priznakAktualnehoZaznamu: string
  /**
   *
   * @type {string}
   * @memberof NamesPropsDto
   */
  plnyNazov: string
}
/**
 *
 * @export
 * @interface NotFoundErrorDto
 */
export interface NotFoundErrorDto {
  /**
   * Status code
   * @type {number}
   * @memberof NotFoundErrorDto
   */
  statusCode: number
  /**
   * State
   * @type {string}
   * @memberof NotFoundErrorDto
   */
  state: string
  /**
   * Error type
   * @type {string}
   * @memberof NotFoundErrorDto
   */
  type: string
  /**
   * Error name
   * @type {string}
   * @memberof NotFoundErrorDto
   */
  errorName: NotFoundErrorDtoErrorNameEnum
  /**
   * Requested object to be found
   * @type {string}
   * @memberof NotFoundErrorDto
   */
  detail: string
}

export const NotFoundErrorDtoErrorNameEnum = {
  DcomRequestError: 'DCOM_REQUEST_ERROR',
  ParserError: 'PARSER_ERROR',
  DcomNotfound: 'DCOM_NOTFOUND',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  MarkPersonError: 'MARK_PERSON_ERROR',
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const

export type NotFoundErrorDtoErrorNameEnum =
  (typeof NotFoundErrorDtoErrorNameEnum)[keyof typeof NotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface OrganizationUnitDto
 */
export interface OrganizationUnitDto {
  /**
   *
   * @type {IdDto}
   * @memberof OrganizationUnitDto
   */
  externeId: IdDto
  /**
   *
   * @type {string}
   * @memberof OrganizationUnitDto
   */
  datumVzniku: string
  /**
   *
   * @type {string}
   * @memberof OrganizationUnitDto
   */
  datumZaniku: string
  /**
   *
   * @type {CodelistDto}
   * @memberof OrganizationUnitDto
   */
  typ: CodelistDto
  /**
   *
   * @type {Array<PhysicalAddress>}
   * @memberof OrganizationUnitDto
   */
  adresy: Array<PhysicalAddress>
  /**
   *
   * @type {Array<Activity>}
   * @memberof OrganizationUnitDto
   */
  predmetyCinnosti: Array<Activity>
  /**
   *
   * @type {Array<StakeholderDto>}
   * @memberof OrganizationUnitDto
   */
  zainteresovaneOsoby: Array<StakeholderDto>
}
/**
 *
 * @export
 * @interface PersonDto
 */
export interface PersonDto {
  /**
   *
   * @type {PhysicalPersonDto}
   * @memberof PersonDto
   */
  fyzickaOsoba: PhysicalPersonDto
  /**
   *
   * @type {LegalPersonDto}
   * @memberof PersonDto
   */
  pravnickaOsoba: LegalPersonDto
}
/**
 *
 * @export
 * @interface PhoneAddressDto
 */
export interface PhoneAddressDto {
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  typ: string
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  formatovanieCislo: string
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  medzinarodnyKodKrajiny: string
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  narodneCislo: string
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  miestnaPredvolba: string
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  cisloUcastnika: string
  /**
   *
   * @type {string}
   * @memberof PhoneAddressDto
   */
  klapka: string
}
/**
 *
 * @export
 * @interface PhysicalAddress
 */
export interface PhysicalAddress {
  /**
   *
   * @type {boolean}
   * @memberof PhysicalAddress
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  platnostDo: string
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  formatovanaAdresa: string
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalAddress
   */
  stat: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalAddress
   */
  obec: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalAddress
   */
  okres: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalAddress
   */
  castObce: CodelistDto
  /**
   *
   * @type {Array<CodelistDto>}
   * @memberof PhysicalAddress
   */
  regiony: Array<CodelistDto>
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalAddress
   */
  typAdresy: CodelistDto
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  nazovUlice: string
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  cisloDomu: string
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  supisneCislo: string
  /**
   *
   * @type {Array<DeliveryAddressDto>}
   * @memberof PhysicalAddress
   */
  dodacieAdresy: Array<DeliveryAddressDto>
  /**
   *
   * @type {string}
   * @memberof PhysicalAddress
   */
  referenciaDoRegistraAdries: string
}
/**
 *
 * @export
 * @interface PhysicalPersonDto
 */
export interface PhysicalPersonDto {
  /**
   *
   * @type {PhysicalAddress}
   * @memberof PhysicalPersonDto
   */
  adresa: PhysicalAddress
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalPersonDto
   */
  rodinnyStav: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalPersonDto
   */
  pohlavie: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof PhysicalPersonDto
   */
  statnaPrislusnost: CodelistDto
  /**
   *
   * @type {BirthDto}
   * @memberof PhysicalPersonDto
   */
  narodenie: BirthDto
  /**
   *
   * @type {DeathDto}
   * @memberof PhysicalPersonDto
   */
  umrtie: DeathDto
  /**
   *
   * @type {Array<ValueWithHistory>}
   * @memberof PhysicalPersonDto
   */
  alternativneMena: Array<ValueWithHistory>
  /**
   *
   * @type {Array<DeliveryAddressDto>}
   * @memberof PhysicalPersonDto
   */
  dodacieAdresy: Array<DeliveryAddressDto>
  /**
   *
   * @type {PhysicalPersonNameDto}
   * @memberof PhysicalPersonDto
   */
  menoFyzickejOsoby: PhysicalPersonNameDto
  /**
   *
   * @type {Array<IdDto>}
   * @memberof PhysicalPersonDto
   */
  externeIds: Array<IdDto>
}
/**
 *
 * @export
 * @interface PhysicalPersonNameDto
 */
export interface PhysicalPersonNameDto {
  /**
   *
   * @type {string}
   * @memberof PhysicalPersonNameDto
   */
  formatovaneMeno: string
  /**
   *
   * @type {string}
   * @memberof PhysicalPersonNameDto
   */
  ineMeno: string
  /**
   *
   * @type {string}
   * @memberof PhysicalPersonNameDto
   */
  legalneMeno: string
  /**
   *
   * @type {Array<string>}
   * @memberof PhysicalPersonNameDto
   */
  rodneMena: Array<string>
  /**
   *
   * @type {SurnamePropsDto}
   * @memberof PhysicalPersonNameDto
   */
  priezviska: SurnamePropsDto
  /**
   *
   * @type {SurnamePropsDto}
   * @memberof PhysicalPersonNameDto
   */
  rodnePriezviska: SurnamePropsDto
  /**
   *
   * @type {TitlesPropsDto}
   * @memberof PhysicalPersonNameDto
   */
  tituly: TitlesPropsDto
}
/**
 *
 * @export
 * @interface PredecessorSuccessor
 */
export interface PredecessorSuccessor {
  /**
   *
   * @type {boolean}
   * @memberof PredecessorSuccessor
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof PredecessorSuccessor
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof PredecessorSuccessor
   */
  platnostDo: string
  /**
   *
   * @type {string}
   * @memberof PredecessorSuccessor
   */
  plnyNazov: string
  /**
   *
   * @type {IdDto}
   * @memberof PredecessorSuccessor
   */
  externeId: IdDto
  /**
   *
   * @type {PhysicalAddress}
   * @memberof PredecessorSuccessor
   */
  adresa: PhysicalAddress
}
/**
 *
 * @export
 * @interface RecieverDto
 */
export interface RecieverDto {
  /**
   *
   * @type {string}
   * @memberof RecieverDto
   */
  dodatocneTexty: string
  /**
   *
   * @type {string}
   * @memberof RecieverDto
   */
  menoOrganizacjnejJednotky: string
  /**
   *
   * @type {string}
   * @memberof RecieverDto
   */
  nazovPo: string
  /**
   *
   * @type {string}
   * @memberof RecieverDto
   */
  menoFyzickejOsoby: string
}
/**
 *
 * @export
 * @interface ResponseKNGetOwnersDto
 */
export interface ResponseKNGetOwnersDto {
  /**
   *
   * @type {Array<DcomKNSubjectDto>}
   * @memberof ResponseKNGetOwnersDto
   */
  data: Array<DcomKNSubjectDto>
}
/**
 *
 * @export
 * @interface ResponseKNGetPropertiesDto
 */
export interface ResponseKNGetPropertiesDto {
  /**
   * Name of owner (from input data)
   * @type {string}
   * @memberof ResponseKNGetPropertiesDto
   */
  firstName: string
  /**
   * Surname of owner (from input data)
   * @type {string}
   * @memberof ResponseKNGetPropertiesDto
   */
  surname: string
  /**
   * Dtail about user - name, surname, birth surname, addres of permanent residence
   * @type {string}
   * @memberof ResponseKNGetPropertiesDto
   */
  userDetail: string
  /**
   * ID of municipality
   * @type {number}
   * @memberof ResponseKNGetPropertiesDto
   */
  municipalityId: number
  /**
   * Cadastral unit of participant permanent residence
   * @type {number}
   * @memberof ResponseKNGetPropertiesDto
   */
  participantCadastralUnitId: number
  /**
   * Date of record
   * @type {string}
   * @memberof ResponseKNGetPropertiesDto
   */
  validTo: string
  /**
   * Flats and other spaces - it is need to be added to non living parcels and hosues
   * @type {Array<ResponseKNGetPropertiesSpaceRecordsDto>}
   * @memberof ResponseKNGetPropertiesDto
   */
  spaceRecords: Array<ResponseKNGetPropertiesSpaceRecordsDto>
}
/**
 *
 * @export
 * @interface ResponseKNGetPropertiesSpaceRecordsDto
 */
export interface ResponseKNGetPropertiesSpaceRecordsDto {
  /**
   * Id of ownership of property, unique identifier for flat and person
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsDto
   */
  ownershipId: number
  /**
   * Dtail about user - name, surname, birth surname, addres of permanent residence
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsDto
   */
  userDetail: string
  /**
   * ID of municipality
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsDto
   */
  municipalityId: number
  /**
   * Cadastral unit of participant permanent residence
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsDto
   */
  participantCadastralUnitId: number
  /**
   * Date of record
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsDto
   */
  validTo: string
  /**
   * Flats and other spaces detail - it is need to be added to non living parcels and hosues
   * @type {Array<ResponseKNGetPropertiesSpaceRecordsSpacesDto>}
   * @memberof ResponseKNGetPropertiesSpaceRecordsDto
   */
  spaces: Array<ResponseKNGetPropertiesSpaceRecordsSpacesDto>
}
/**
 *
 * @export
 * @interface ResponseKNGetPropertiesSpaceRecordsSpacesDto
 */
export interface ResponseKNGetPropertiesSpaceRecordsSpacesDto {
  /**
   * Id of the parcel / property / house / flat
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  id: number
  /**
   * Id of Entrance (vchod)
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  entranceId: number
  /**
   * Id of type of the parcel / property / house / flat
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  typeId: number
  /**
   * Register number of the house
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  houseNo: number
  /**
   * Address with address number
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  address: string
  /**
   * Number of floor, it can be also negative or zero
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  floorNo: number | null
  /**
   * Flat number, if it is constructuin of flats (residential) (bytovy priestor)
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  flatNo: number | null
  /**
   * If it is nonresidentail space
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  nonresidentialNo: number | null
  /**
   * If it is nonresidentail space
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  nonresidentialTypeId: number | null
  /**
   * If it is nonresidentail space
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  area: number | null
  /**
   * Id of construction
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  constructionId: number
  /**
   * Id of cadastral unit
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  cadastralUnitId: number
  /**
   * Name of cadastral unit
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  cadastralUnitName: string
  /**
   * Code of cadastral unit
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  cadastralUnitCode: number
  /**
   * Search of cadastral unit (without spaces and diacritics and capitals)
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  cadastralUnitSearch: string
  /**
   * Id of municipality
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  municipalityId: number
  /**
   * Name of municipality
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  municipalityName: string
  /**
   * Code of municipality
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  municipalityCode: number
  /**
   * Search of municipality (without spaces and diacritics and capitals)
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  municipalitySearch: string
  /**
   * Id of district
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  districtId: number
  /**
   * Name of district
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  districtName: string
  /**
   * Code of district
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  districtCode: number
  /**
   * Search of district (without spaces and diacritics and capitals)
   * @type {string}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  districtSearch: string
  /**
   * Id of region
   * @type {number}
   * @memberof ResponseKNGetPropertiesSpaceRecordsSpacesDto
   */
  regionId: number
}
/**
 *
 * @export
 * @interface ResponseNEVBasicInfoPropsDto
 */
export interface ResponseNEVBasicInfoPropsDto {
  /**
   * Id of vehicle (VI)
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  id: number
  /**
   * Id of vehicle (VI)
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  vozidloId: number
  /**
   * Date of first registration
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  datumPrvejEvidenie: string
  /**
   * Date of first registration Sr
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  datumPrvejEvidenieSr: string
  /**
   * Workplace of registration
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  pracoviskoPriradenia: string
  /**
   * Licence plate of vehicle
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  evidencneCislo: string
  /**
   * Vehicle identification number
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  vin: string
  /**
   * State of vehicle
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  stavVozidla: string
  /**
   * Type of change
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  druhZmeny: string
  /**
   * Timestamp of change
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  druhZmenyDatum: string
  /**
   * Year of production
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  rokVyroby: number
  /**
   * Individual import
   * @type {boolean}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  individualnyDozvoz: boolean
  /**
   * Is vehicle blocked?
   * @type {boolean}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  blokacia: boolean
  /**
   * Workplace Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  pracoviskoPriradeniaId: number
  /**
   * Vehicle status Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  stavVozidlaId: number
  /**
   * Is vehicle new?
   * @type {boolean}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  noveVozidlo: boolean
  /**
   * Is vehicle in leasing?
   * @type {boolean}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  leasing: boolean
  /**
   * Type if change Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  druhZmenyId: number
  /**
   * oev
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oev: string
  /**
   * tp
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tp: string
  /**
   * Validity to oe
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oePlatnostDokladu: string
  /**
   * oe
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oe: string
  /**
   * Previous ECV
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  predchadajucaEc: string
  /**
   * Tech code
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tecKod: string
  /**
   * Tech id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tecId: number
  /**
   * Workplace of unregistration
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  pracoviskoOdhlasenia: string
  /**
   * Workplace of unregistration Id
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  pracoviskoOdhlaseniaId: string
  /**
   * Release date
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oeDatumVydania: string
  /**
   * oev Release date
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oevDatumVydania: string
  /**
   * tp release date
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tpDatumVydania: string
  /**
   * tp Place of release
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tpMiestoVydania: string
  /**
   * oe Place of release
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oeMiestoVydania: string
  /**
   * ECV Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  evidencneCisloId: number
  /**
   * tp State Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tpStavId: number
  /**
   * oev State Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oevStavId: number
  /**
   * oe state Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oeStavId: number
  /**
   * State of tp
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tpStavNazov: string
  /**
   * State of oev
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oevStavNazov: string
  /**
   * State of oe
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  oeStavNazov: string
  /**
   * some Id
   * @type {number}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tecPrednaId: number
  /**
   * some state
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tecZadnaStav: string
  /**
   * another state
   * @type {string}
   * @memberof ResponseNEVBasicInfoPropsDto
   */
  tecPrednaStav: string
}
/**
 *
 * @export
 * @interface ResponseNEVInsuranceContractPropsDto
 */
export interface ResponseNEVInsuranceContractPropsDto {
  /**
   * Id
   * @type {number}
   * @memberof ResponseNEVInsuranceContractPropsDto
   */
  id: number
  /**
   * Vehicle id
   * @type {number}
   * @memberof ResponseNEVInsuranceContractPropsDto
   */
  vozidloId: number
  /**
   * Contract number
   * @type {string}
   * @memberof ResponseNEVInsuranceContractPropsDto
   */
  cisloZmluvy: string
  /**
   * Insurer
   * @type {string}
   * @memberof ResponseNEVInsuranceContractPropsDto
   */
  poistovatel: string
  /**
   * Onset date
   * @type {string}
   * @memberof ResponseNEVInsuranceContractPropsDto
   */
  datumZaciatku: string
  /**
   * Termination date
   * @type {string}
   * @memberof ResponseNEVInsuranceContractPropsDto
   */
  datumUkoncenia: string
}
/**
 *
 * @export
 * @interface ResponseNEVMainDto
 */
export interface ResponseNEVMainDto {
  /**
   * Basic information
   * @type {ResponseNEVBasicInfoPropsDto}
   * @memberof ResponseNEVMainDto
   */
  zakladneInformacie: ResponseNEVBasicInfoPropsDto
  /**
   * Owner and holder
   * @type {ResponseNEVOwnerAndHolderPropsDto}
   * @memberof ResponseNEVMainDto
   */
  drzitelAVlastnik: ResponseNEVOwnerAndHolderPropsDto
  /**
   * Technical details
   * @type {ResponseNEVTecDetailPropsDto}
   * @memberof ResponseNEVMainDto
   */
  technickeUdaje: ResponseNEVTecDetailPropsDto
  /**
   * Insurance contract
   * @type {ResponseNEVInsuranceContractPropsDto}
   * @memberof ResponseNEVMainDto
   */
  poistnaZmluva: ResponseNEVInsuranceContractPropsDto
  /**
   * Document of processing
   * @type {ResponseNEVProcessDocPropsDto}
   * @memberof ResponseNEVMainDto
   */
  dokladOSpracovani: ResponseNEVProcessDocPropsDto
  /**
   * Origin check protocol
   * @type {ResponseNEVOriginProtocolPropsDto}
   * @memberof ResponseNEVMainDto
   */
  protokolKontrolyOriginality: ResponseNEVOriginProtocolPropsDto
  /**
   * Sport and historic vehicle license
   * @type {ResponseNEVSportHistLicensePropsDto}
   * @memberof ResponseNEVMainDto
   */
  preukazSportovehoAHistorickehoVozidla: ResponseNEVSportHistLicensePropsDto
  /**
   * Error message
   * @type {ResponseNEVMessagePropsDto}
   * @memberof ResponseNEVMainDto
   */
  sprava: ResponseNEVMessagePropsDto
}
/**
 *
 * @export
 * @interface ResponseNEVMessagePropsDto
 */
export interface ResponseNEVMessagePropsDto {
  /**
   * Error number
   * @type {string}
   * @memberof ResponseNEVMessagePropsDto
   */
  cisloChyby: string
  /**
   * Error message
   * @type {string}
   * @memberof ResponseNEVMessagePropsDto
   */
  textChyby: string
}
/**
 *
 * @export
 * @interface ResponseNEVOriginProtocolPropsDto
 */
export interface ResponseNEVOriginProtocolPropsDto {
  /**
   * Id
   * @type {number}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  id: number
  /**
   * Vehicle id
   * @type {number}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  vozidloId: number
  /**
   * Appraisal form number
   * @type {string}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  cisloPosudku: string
  /**
   * Protocol code
   * @type {string}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  kodProtokolu: string
  /**
   * Origin check - result
   * @type {number}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  vysledokKontrolyOriginality: number
  /**
   * Number of check label
   * @type {string}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  cisloKontrolnejNalepky: string
  /**
   * Date of check
   * @type {string}
   * @memberof ResponseNEVOriginProtocolPropsDto
   */
  kontrolaDatum: string
}
/**
 *
 * @export
 * @interface ResponseNEVOwnerAndHolderPropsDto
 */
export interface ResponseNEVOwnerAndHolderPropsDto {
  /**
   * Vehicle id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vozidloId: number
  /**
   * Owner - type
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikTyp: string
  /**
   * Owner - Name
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikMeno: string
  /**
   * Owner - Surname
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikPriezvisko: string
  /**
   * Owner - Full name
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikNazov: string
  /**
   * Owner - Date of birth
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikDatumNarodenia: string
  /**
   * Owner - Business Id
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikIco: string
  /**
   * Owner - Birth number
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikRodneCislo: string
  /**
   * Owner - District
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikOkres: string
  /**
   * Owner - Municipality
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikObec: string
  /**
   * Owner - Street
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikUlica: string
  /**
   * Owner - Street number
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikOrientacneCislo: number
  /**
   * Owner - Register number
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikSupisneCislo: number
  /**
   * Owner - residence out of SR
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikPobytMimoSr: string
  /**
   * Owner - what is this?
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikMimoSrStat: string
  /**
   * Holder - type
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelTyp: string
  /**
   * Holder - name
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelMeno: string
  /**
   * Holder - surname
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelPriezvisko: string
  /**
   * Holder - full name
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelNazov: string
  /**
   * Holder - date of birth
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelDatumNarodenia: string
  /**
   * Holder - business id
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelIco: string
  /**
   * Holder - Birth number
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelRodneCislo: string
  /**
   * Holder - district
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelOkres: string
  /**
   * Holder - municipality
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelObec: string
  /**
   * Holder - street
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelUlica: string
  /**
   * Holder - street number
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelOrientacneCislo: number
  /**
   * Holder - register number
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelSupisneCislo: number
  /**
   * Owner - type id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikTypId: number
  /**
   * Owner - regob id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikRegobId: number
  /**
   * Owner - stay out of SR
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikPobytMimoSrId: string
  /**
   * Holder - type id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelTypId: number
  /**
   * Holder - regob id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelRegobId: number
  /**
   * Holder - type of stay id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelTypPobytuId: number
  /**
   * Holder - stay out of SR status
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelMimoSrStat: string
  /**
   * Holder - stay out of SR
   * @type {string}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelPobytMimoSr: string
  /**
   * Owner - type of stay id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikTypPobytuId: number
  /**
   * Holder - nationality id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelStatnaPrislusnostId: number
  /**
   * Owner - nationality id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikStatnaPrislusnostId: number
  /**
   * Holder - door number id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelVchodDomuId: number
  /**
   * Owner - door number id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikVchodDomuId: number
  /**
   * Holder - disclosure level id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  drzitelStupenZverejneniaId: number
  /**
   * Owner - disclosure level id
   * @type {number}
   * @memberof ResponseNEVOwnerAndHolderPropsDto
   */
  vlastnikStupenZverejneniaId: number
}
/**
 *
 * @export
 * @interface ResponseNEVProcessDocPropsDto
 */
export interface ResponseNEVProcessDocPropsDto {
  /**
   * Id
   * @type {number}
   * @memberof ResponseNEVProcessDocPropsDto
   */
  id: number
  /**
   * Vehicle id
   * @type {number}
   * @memberof ResponseNEVProcessDocPropsDto
   */
  vozidloId: number
  /**
   * Certificate of processing - date
   * @type {string}
   * @memberof ResponseNEVProcessDocPropsDto
   */
  dokladSpracovania: string
  /**
   * Certificate of processing - number
   * @type {number}
   * @memberof ResponseNEVProcessDocPropsDto
   */
  dokladSpracovaniaCislo: number
  /**
   * Certificate of processing - executor
   * @type {string}
   * @memberof ResponseNEVProcessDocPropsDto
   */
  dokladSpracovaniaVydal: string
}
/**
 *
 * @export
 * @interface ResponseNEVSportHistLicensePropsDto
 */
export interface ResponseNEVSportHistLicensePropsDto {
  /**
   * Id
   * @type {number}
   * @memberof ResponseNEVSportHistLicensePropsDto
   */
  id: number
  /**
   * VehicleId
   * @type {number}
   * @memberof ResponseNEVSportHistLicensePropsDto
   */
  vozidloId: number
  /**
   * License date
   * @type {string}
   * @memberof ResponseNEVSportHistLicensePropsDto
   */
  preukazSportHistVozidlaDatum: string
  /**
   * License number
   * @type {string}
   * @memberof ResponseNEVSportHistLicensePropsDto
   */
  preukazSportHistVozidlaDatumCislo: string
  /**
   * License issued by
   * @type {string}
   * @memberof ResponseNEVSportHistLicensePropsDto
   */
  preukazSportHistVozidlaDatumVydal: string
}
/**
 *
 * @export
 * @interface ResponseNEVTecDetailPropsDto
 */
export interface ResponseNEVTecDetailPropsDto {
  /**
   * Vehicle id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vozidloId: number
  /**
   * Vehicle type
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druh: string
  /**
   * Vehicle category
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  kategoria: string
  /**
   * Factory brand
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tovarenskaZnacka: string
  /**
   * Brand
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  znacka: string
  /**
   * Trade name
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  obchodnyNazov: string
  /**
   * Version
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  typVariantVerzia: string
  /**
   * Manufacturer
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vyrobcaVozidla: string
  /**
   * Ts number
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  cisloTs: string
  /**
   * Ts date
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  datumTs: string
  /**
   * Engine manufacturer
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vyrobcaMotora: string
  /**
   * Engine type
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  typMotora: string
  /**
   * Stroke
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zdvih: number
  /**
   * Catalyst
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  katalyzator: string
  /**
   * Max power
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  maximalnyVykon: number
  /**
   * Operating speed
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  otacky: number
  /**
   * Fuel
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhPaliva: string
  /**
   * Power / weight
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vykonHmotnost: string
  /**
   * Gearbox
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  prevodovka: string
  /**
   * Number of gears
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  prevodovkaStupne: number
  /**
   * Bodywork type
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  karoseriaDruh: string
  /**
   * Colour
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  farba: string
  /**
   * Additional colour
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  doplnkovaFarba: string
  /**
   * Additional colour type
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  doplnkovaFarbaDruh: string
  /**
   * Bodywork manufacturer
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  karoseriaVyrobca: string
  /**
   * Bodywork number
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  karoseriaVyrobneCislo: string
  /**
   * Number of seats
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pocetSedenie: number
  /**
   * Number of emergency seats
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pocetNudzove: number
  /**
   * Number of standing places?
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pocetStatie: number
  /**
   * Number of sleeping seats
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pocetLozka: number
  /**
   * Roof load
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zatazenieStrechy: number
  /**
   * Cistern capacity
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  objemCisterny: number
  /**
   * Tank capacity
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  objemNadrze: number
  /**
   * Length
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  dlzka: number
  /**
   * Width
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  sirka: number
  /**
   * Height
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vyska: number
  /**
   * Loading area length
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  loznaPlochaDlzka: number
  /**
   * Loading area width
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  loznaPlochaSirka: number
  /**
   * Weight
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostPrevadzkova: number
  /**
   * Max weight
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostPripustna: number
  /**
   * Max weight per axle 1
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostMaxNaprava1: number
  /**
   * Max weight per axle 2
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostMaxNaprava2: number
  /**
   * Max weight per axle 3
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostMaxNaprava3: number
  /**
   * Max weight per axle 4
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostMaxNaprava4: number
  /**
   * Weight of set
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostSupravy: number
  /**
   * Weight of towed vehicle with breaks
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostPvozidlaBrzd: number
  /**
   * Weight of towed vehicle without breaks
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hmotnostPvozidlaNebrzd: string
  /**
   * ABS
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdaAbs: boolean
  /**
   * Break - something
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdyEsEhk: string
  /**
   * Service break
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdaPrevadzkova: boolean
  /**
   * Parking break
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdaParkovacia: boolean
  /**
   * Lightening break
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdaOdlahcovacia: boolean
  /**
   * Emergency break
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdaNudzova: boolean
  /**
   * Number of axles
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pocetNaprav: number
  /**
   * Axle 1 propulsion
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pohonNaprava1: boolean
  /**
   * Axle 2 propulsion
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pohonNaprava2: boolean
  /**
   * Axle 3 propulsion
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pohonNaprava3: boolean
  /**
   * Axle 4 propulsion
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  pohonNaprava4: boolean
  /**
   * Wheelbase
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  razvor: number
  /**
   * Connecting device type
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spajacieZariadenieTyp: string
  /**
   * Connecting device class
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spajacieZariadenieTrieda: string
  /**
   * Connecting device H max weight
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  hzavesMaxHmotnost: number
  /**
   * Connecting device S max weight
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  szavesMaxHmotnost: number
  /**
   * Connecting device T max weight
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tocnicaMaxHmostnost: number
  /**
   * Noise - standing
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieZvukuStojace: number
  /**
   * Noise - driving
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieZvukuJazda: number
  /**
   * Emission of CO2
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaCo2: number
  /**
   * Emission of CO
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaCo: number
  /**
   * Emission of HC
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaHc: number
  /**
   * Emission of NOx
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaNox: number
  /**
   * Emission of HC + NOx
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaHcnox: number
  /**
   * Emission - particles
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaCastice: number
  /**
   * Absorption of emissions
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaAbsorbcia: number
  /**
   * Fuel consumption
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spotrebaPaliva: number
  /**
   * Max speed
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  maxRychlost: number
  /**
   * Type of vehicle id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhId: number
  /**
   * Category id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  kategoriaId: number
  /**
   * Brand id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  znackaId: number
  /**
   * Manufacturer id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vyrobcaVozidlaId: number
  /**
   * Engine manufacturer id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vyrobcaMotoraId: number
  /**
   * Catalyst id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  katalyzatorId: number
  /**
   * Fuel id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhPalivaId: number
  /**
   * Gearbox id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  prevodovkaId: number
  /**
   * Bodywork id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  karoseriaDruhId: number
  /**
   * Bodywork manufacturer id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  karoseriaVyrobcaId: number
  /**
   * Colour id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  farbaId: number
  /**
   * Additional colour id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  doplnkovaFarbaId: number
  /**
   * Additional colour type id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  doplnkovaFarbaDruhId: number
  /**
   * Engine number
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  cisloMotora: string
  /**
   * Wheel type
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhKolies: string
  /**
   * Wheel type id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhKoliesId: number
  /**
   * Tires type - axle 1
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhPneuNaprava1: string
  /**
   * Tires type - axle 2
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhPneuNaprava2: string
  /**
   * Tires type - axle 3
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhPneuNaprava3: string
  /**
   * Tires type - axle 4
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhPneuNaprava4: string
  /**
   * Doubled axle 1
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zdvojenaNaprava1: boolean
  /**
   * Doubled axle 2
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zdvojenaNaprava2: boolean
  /**
   * Doubled axle 3
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zdvojenaNaprava3: boolean
  /**
   * Doubled axle 4
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zdvojenaNaprava4: boolean
  /**
   * Wheel rim - axle 1
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  rafikNaprava1: string
  /**
   * Wheel rim - axle 2
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  rafikNaprava2: string
  /**
   * Wheel rim - axle 3
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  rafikNaprava3: string
  /**
   * Wheel rim - axle 4
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  rafikNaprava4: string
  /**
   * Connecting device brand
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spajacieZariadenieZnacka: string
  /**
   * Docking device certified brand
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spajacieZariadenieSchvalZnacka: string
  /**
   * Noise
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieZvuku: string
  /**
   * Noise - operating speed
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieZvukuOtacky: number
  /**
   * Consumption
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotreba: string
  /**
   * Smoke emission
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaDymivost: string
  /**
   * Type certification number
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsCisloKonania: string
  /**
   * Type certification ZTO
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsCisloZto: string
  /**
   * Type certification date
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsDatumKonania: string
  /**
   * Type certification - place of issue
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsMiestoVydania: string
  /**
   * Type certification - date of issue
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsDatumVydania: string
  /**
   * Type certification - validity date
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsPlatnost: string
  /**
   * Type certification - proceeding number
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsCisloJednania: string
  /**
   * Type certification - number of extension certificate
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsNadstavbaCisloOsvedcenia: string
  /**
   * Type certification - extension proceeding number
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsNadstavbaCisloKonania: string
  /**
   * Type certification - extension proceeding date
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsNadstavbaDatumKonania: string
  /**
   * Type certification - extension place of issue
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsNadstavbaMiestoVydania: string
  /**
   * Type certification - extension date of issue
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsNadstavbaDatumVydania: string
  /**
   * Type certification - number of certificate
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  tsCisloOsvedcenia: string
  /**
   * Extra equipment
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  zvlastnaVybava: string
  /**
   * Additional information
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  duzText: string
  /**
   * VIN
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  vin: string
  /**
   * Date of change
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhZmenyDatum: string
  /**
   * Type of change
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  druhZmeny: string
  /**
   * Limiter
   * @type {boolean}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  obmedzovac: boolean
  /**
   * Fuel consumption - city
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spotrebaPalivaMesto: number
  /**
   * Fuel consumption - out of city
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  spotrebaPalivaMimoMesto: number
  /**
   * Wheel base 2
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  razvor2: number
  /**
   * Wheel base 3
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  razvor3: number
  /**
   * Smoke emission id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaDymivostId: number
  /**
   * Consumption id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieSpotrebaId: number
  /**
   * Noise id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  emisieZvukuId: number
  /**
   * CO unit measure id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaCoId: number
  /**
   * HC unit measure id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaHcId: number
  /**
   * NOx unit measure id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaNoxId: number
  /**
   * Particles unit measure id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaCasticeId: number
  /**
   * Breaks - noise id
   * @type {number}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  brzdyEsEhkId: number
  /**
   * CO unit measure
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaCo: string
  /**
   * HC unit measure
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaHc: string
  /**
   * NOx unit measure
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaNox: string
  /**
   * Particles unit measure
   * @type {string}
   * @memberof ResponseNEVTecDetailPropsDto
   */
  mernaJednotkaCastice: string
}
/**
 *
 * @export
 * @interface ResponseNEVTkEkDto
 */
export interface ResponseNEVTkEkDto {
  /**
   * Technical control
   * @type {ResponseNEVTkEkPropsDto}
   * @memberof ResponseNEVTkEkDto
   */
  technickaKontrola: ResponseNEVTkEkPropsDto
  /**
   * Emision control
   * @type {ResponseNEVTkEkPropsDto}
   * @memberof ResponseNEVTkEkDto
   */
  emisnaKontrola: ResponseNEVTkEkPropsDto
}
/**
 *
 * @export
 * @interface ResponseNEVTkEkPropsDto
 */
export interface ResponseNEVTkEkPropsDto {
  /**
   * Is control valid or not?
   * @type {boolean}
   * @memberof ResponseNEVTkEkPropsDto
   */
  platna: boolean
  /**
   * Date of control
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  datumVykonania: string
  /**
   * Date of validity to
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  datumPlatnosti: string
  /**
   * Number of control certificate
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  cisloOsvedcenia: string
  /**
   * Number of sticker
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  cisloNalepky: string
  /**
   * Number of protocol
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  cisloProtokolu: string
  /**
   * Result of control in text
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  vysledok: string
  /**
   * Type of control
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  druhKontroly: string
  /**
   * Result of control, is shown when you send not valid ID or there is another error
   * @type {string}
   * @memberof ResponseNEVTkEkPropsDto
   */
  resultTEKontrola?: string
}
/**
 *
 * @export
 * @interface ResponseRfoDocPropsDto
 */
export interface ResponseRfoDocPropsDto {
  /**
   * Document code
   * @type {number}
   * @memberof ResponseRfoDocPropsDto
   */
  druhDokladuKod: number
  /**
   * Document type
   * @type {string}
   * @memberof ResponseRfoDocPropsDto
   */
  druhDokladu: string
  /**
   * Document id
   * @type {string}
   * @memberof ResponseRfoDocPropsDto
   */
  jednoznacnyIdentifikator: string
  /**
   * In possesion
   * @type {boolean}
   * @memberof ResponseRfoDocPropsDto
   */
  udrzitela: boolean
}
/**
 *
 * @export
 * @interface ResponseRfoFamilyMemberPropsDto
 */
export interface ResponseRfoFamilyMemberPropsDto {
  /**
   * Related person id
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  identifikatorVztahovejOsoby: string
  /**
   * Type of relationship - code
   * @type {number}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  typRodinnehoVztahuKod: number
  /**
   * Type of relationship
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  typRodinnehoVztahu: string
  /**
   * Date of origin
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  datumVznikuVztahu: string
  /**
   * Marriage certificate - place of issue code
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  miestoVydaniaSobasnehoListuKod: string
  /**
   * Marriage certificate - place of issue
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  miestoVydaniaSobasnehoListu: string
  /**
   * Marriage certificate - place of issue out of country
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  miestoVydaniaSobasnehoListuMimoC: string
  /**
   * Related person relationship code
   * @type {number}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  vztahRolaVztahovejOsobyKod: number
  /**
   * Related person relationship
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  vztahRolaVztahovejOsoby: string
  /**
   * Primary person relationship code
   * @type {number}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  vztahRolaPrimarnejOsobyKod: number
  /**
   * Primary person relationship
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  vztahRolaPrimarnejOsoby: string
  /**
   * Marriage register code
   * @type {number}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  sobasnaMatrikaKod: number
  /**
   * Marriage register
   * @type {string}
   * @memberof ResponseRfoFamilyMemberPropsDto
   */
  sobasnaMatrika: string
}
/**
 *
 * @export
 * @interface ResponseRfoFamilyNamePropsDto
 */
export interface ResponseRfoFamilyNamePropsDto {
  /**
   * Family name
   * @type {string}
   * @memberof ResponseRfoFamilyNamePropsDto
   */
  rodnePriezvisko: string
  /**
   * Order - family name
   * @type {number}
   * @memberof ResponseRfoFamilyNamePropsDto
   */
  poradieRodnehoPriezviska: number
}
/**
 *
 * @export
 * @interface ResponseRfoForeignRegionsPropsDto
 */
export interface ResponseRfoForeignRegionsPropsDto {
  /**
   * Region order number
   * @type {number}
   * @memberof ResponseRfoForeignRegionsPropsDto
   */
  poradoveCisloRegionu: number
  /**
   * Name of the region
   * @type {string}
   * @memberof ResponseRfoForeignRegionsPropsDto
   */
  nazovRegionu: string
}
/**
 *
 * @export
 * @interface ResponseRfoGivenNamePropsDto
 */
export interface ResponseRfoGivenNamePropsDto {
  /**
   * Given name
   * @type {string}
   * @memberof ResponseRfoGivenNamePropsDto
   */
  meno: string
  /**
   * Order - name
   * @type {number}
   * @memberof ResponseRfoGivenNamePropsDto
   */
  poradieMena: number
}
/**
 *
 * @export
 * @interface ResponseRfoPersonDto
 */
export interface ResponseRfoPersonDto {
  /**
   * Id
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  ifo: string
  /**
   *
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  identifikatorPravejOsoby: string
  /**
   * Birth number
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  rodneCislo: string
  /**
   * Date of birth
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  datumNarodenia: string
  /**
   * Place of birth - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  miestoNarodeniaKod: number
  /**
   * Place of birth
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  miestoNarodenia: string
  /**
   * Place of birth out of dial
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  miestoNarodeniaMimoCiselnika: string
  /**
   * Country of birth - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  statNarodeniaKod: number
  /**
   * Country of birth
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  statNarodenia: string
  /**
   * Sex - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  pohlavieOsobyKod: number
  /**
   * Sex
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  pohlavieOsoby: string
  /**
   * Marital status - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  rodinnyStavKod: number
  /**
   * Marital status
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  rodinnyStav: string
  /**
   * Birth register code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  rodnaMatrikaKod: number
  /**
   * Birth register
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  rodnaMatrika: string
  /**
   * Nationality - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  narodnostKod?: number
  /**
   * Nationality
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  narodnost: string
  /**
   * Date of death
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  datumUmrtia: string
  /**
   * Place of death - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  miestoUmrtiaKod: number
  /**
   * Place of death
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  miestoUmrtia: string
  /**
   * Place of death out of dial
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  miestoUmrtiaMimoCiselnika: string
  /**
   * Death register code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  umrtnaMatrikaKod: number
  /**
   * Death register
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  umrtnaMatrika: string
  /**
   * Country of death - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  statUmrtiaKod: number
  /**
   * Country of death
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  statUmrtia: string
  /**
   *
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  bifo: string
  /**
   * Status of person - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  typOsobyKod: number
  /**
   * Status of person
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  typOsoby: string
  /**
   * Region of birth - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  okresNarodeniaKod: number
  /**
   * Region of birth
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  okresNarodenia: string
  /**
   * Region of death - code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  okresUmrtiaKod: number
  /**
   * Region of death
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  okresUmrtia: string
  /**
   * Foreigner id
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  identifikatorCudzinca: string
  /**
   * Disclosure level code
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  stupenZverejneniaUdajovKod: number
  /**
   * Disclosure level
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  stupenZverejneniaUdajov: string
  /**
   * Year of birth
   * @type {number}
   * @memberof ResponseRfoPersonDto
   */
  rokNarodenia: number
  /**
   * Relationship termination date
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  datumUkonceniaVztahu: string
  /**
   * Cause of invalidity
   * @type {string}
   * @memberof ResponseRfoPersonDto
   */
  dovodNeplatnosti: string
  /**
   * Person of interest
   * @type {boolean}
   * @memberof ResponseRfoPersonDto
   */
  zaujmovaOsoba: boolean
  /**
   * Given names
   * @type {Array<ResponseRfoGivenNamePropsDto>}
   * @memberof ResponseRfoPersonDto
   */
  menaOsoby: Array<ResponseRfoGivenNamePropsDto>
  /**
   * Surnames
   * @type {Array<ResponseRfoSurnamePropsDto>}
   * @memberof ResponseRfoPersonDto
   */
  priezviskaOsoby: Array<ResponseRfoSurnamePropsDto>
  /**
   * Family names
   * @type {Array<ResponseRfoFamilyNamePropsDto>}
   * @memberof ResponseRfoPersonDto
   */
  rodnePriezviskaOsoby: Array<ResponseRfoFamilyNamePropsDto>
  /**
   * Family members
   * @type {Array<ResponseRfoFamilyMemberPropsDto>}
   * @memberof ResponseRfoPersonDto
   */
  rodinniPrislusnici: Array<ResponseRfoFamilyMemberPropsDto>
  /**
   * Stays
   * @type {Array<ResponseRfoStayPropsDto>}
   * @memberof ResponseRfoPersonDto
   */
  pobytyOsoby: Array<ResponseRfoStayPropsDto>
  /**
   * Documents
   * @type {Array<ResponseRfoDocPropsDto>}
   * @memberof ResponseRfoPersonDto
   */
  doklady: Array<ResponseRfoDocPropsDto>
}
/**
 *
 * @export
 * @interface ResponseRfoPersonListDto
 */
export interface ResponseRfoPersonListDto {
  /**
   * list of persons with same birthNumber or query properties
   * @type {Array<ResponseRfoPersonDto>}
   * @memberof ResponseRfoPersonListDto
   */
  items: Array<ResponseRfoPersonDto>
}
/**
 *
 * @export
 * @interface ResponseRfoStayPropsDto
 */
export interface ResponseRfoStayPropsDto {
  /**
   * Type of stay
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  typPobytu: number
  /**
   * Type of state out of dial
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  typPobytuMimoCiselnik: string
  /**
   * Stay register date
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  datumPrihlaseniaPobytu: string
  /**
   * Stay termination date
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  datumUkonceniaPobytu: string
  /**
   * Municipality
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  nazovObce: string
  /**
   * Register number
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  supisneCislo: number
  /**
   * District
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  nazovCastiObce: string
  /**
   * Region
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  nazovOkresu: string
  /**
   * Street
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  nazovUlice: string
  /**
   * Country - code
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  statMimoSr: number
  /**
   * Country
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  nazovStatu: string
  /**
   * Address out of SR
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  adresaMimoSr: string
  /**
   * Region out of SR
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  okresMimoSr: string
  /**
   * Municipality out of SR
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  obecMimoSr: string
  /**
   * District out of SR
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  castObceMimoSr: string
  /**
   * Street out of SR
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  ulicaMimoSr: string
  /**
   * Orientation number out of SR
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  orientacneCisloMimoSr: number
  /**
   * Register number out of SR
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  supisneCisloMimoSr: number
  /**
   * Location inside the building out of SR
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  urcenieMiestaVRamciBudovyMimoSr: string
  /**
   * Stay out of SR
   * @type {boolean}
   * @memberof ResponseRfoStayPropsDto
   */
  pobytMimoSr: boolean
  /**
   * Index of building
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  indexDomu: string
  /**
   * Location inside the building
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  urcenieMiestaVRamciBudovy: string
  /**
   * Address id from address register
   * @type {string}
   * @memberof ResponseRfoStayPropsDto
   */
  identifikatorAdresyRa: string
  /**
   * Doorway
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  vchodDomu: number
  /**
   * House
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  dom: number
  /**
   * Street
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  ulica: number
  /**
   * District
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  castObce: number
  /**
   * Municipality
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  obec: number
  /**
   * Region
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  okres: number
  /**
   * Orientation number
   * @type {number}
   * @memberof ResponseRfoStayPropsDto
   */
  orientacneCislo: number
  /**
   * Foreign regions
   * @type {ResponseRfoForeignRegionsPropsDto}
   * @memberof ResponseRfoStayPropsDto
   */
  regionyMimoSr: ResponseRfoForeignRegionsPropsDto
}
/**
 *
 * @export
 * @interface ResponseRfoSurnamePropsDto
 */
export interface ResponseRfoSurnamePropsDto {
  /**
   * Surname
   * @type {string}
   * @memberof ResponseRfoSurnamePropsDto
   */
  priezvisko: string
  /**
   * Order - surname
   * @type {number}
   * @memberof ResponseRfoSurnamePropsDto
   */
  poradiePriezviska: number
}
/**
 *
 * @export
 * @interface ResponseRpoLegalPersonDto
 */
export interface ResponseRpoLegalPersonDto {
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  ico?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  dic?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  icDph?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  ipo: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  datumVzniku?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  datumZaniku?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  technickyDatumZmenyZaznamu?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  datumCasVytvorenia?: string
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  datumCasZmeny: string
  /**
   *
   * @type {CodelistDto}
   * @memberof ResponseRpoLegalPersonDto
   */
  essa2010?: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof ResponseRpoLegalPersonDto
   */
  skNaceHlavnaCinnost?: CodelistDto
  /**
   *
   * @type {Array<CodelistWithHistory>}
   * @memberof ResponseRpoLegalPersonDto
   */
  pravneFormy?: Array<CodelistWithHistory>
  /**
   *
   * @type {NamesPropsDto}
   * @memberof ResponseRpoLegalPersonDto
   */
  mena?: NamesPropsDto
  /**
   *
   * @type {Array<ValueWithHistory>}
   * @memberof ResponseRpoLegalPersonDto
   */
  alternativneMena?: Array<ValueWithHistory>
  /**
   *
   * @type {Array<CodelistWithHistory>}
   * @memberof ResponseRpoLegalPersonDto
   */
  inePravneSkutocnosti?: Array<CodelistWithHistory>
  /**
   *
   * @type {Array<CodelistWithHistory>}
   * @memberof ResponseRpoLegalPersonDto
   */
  pravneStavy?: Array<CodelistWithHistory>
  /**
   *
   * @type {SourcePropsDto}
   * @memberof ResponseRpoLegalPersonDto
   */
  zdroj?: SourcePropsDto
  /**
   *
   * @type {Array<PhoneAddressDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  telefonneAdresy?: Array<PhoneAddressDto>
  /**
   *
   * @type {Array<string>}
   * @memberof ResponseRpoLegalPersonDto
   */
  internetoveAdresy?: Array<string>
  /**
   *
   * @type {Array<PhysicalAddress>}
   * @memberof ResponseRpoLegalPersonDto
   */
  adresy?: Array<PhysicalAddress>
  /**
   *
   * @type {Array<IdWithHistory>}
   * @memberof ResponseRpoLegalPersonDto
   */
  externeIds?: Array<IdWithHistory>
  /**
   *
   * @type {Array<StatutoryPropsDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  statutarneOrgany?: Array<StatutoryPropsDto>
  /**
   *
   * @type {Array<StakeholderDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  zainteresovaneOsoby?: Array<StakeholderDto>
  /**
   *
   * @type {Array<DepositDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  vklady?: Array<DepositDto>
  /**
   *
   * @type {Array<ShareDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  akcie?: Array<ShareDto>
  /**
   *
   * @type {Array<Activity>}
   * @memberof ResponseRpoLegalPersonDto
   */
  predmetyCinnosti?: Array<Activity>
  /**
   *
   * @type {Array<PredecessorSuccessor>}
   * @memberof ResponseRpoLegalPersonDto
   */
  pravnyNastupcovia?: Array<PredecessorSuccessor>
  /**
   *
   * @type {Array<PredecessorSuccessor>}
   * @memberof ResponseRpoLegalPersonDto
   */
  pravnyPredchodcovia?: Array<PredecessorSuccessor>
  /**
   *
   * @type {Array<ValueWithHistory>}
   * @memberof ResponseRpoLegalPersonDto
   */
  opravneniaKonat?: Array<ValueWithHistory>
  /**
   *
   * @type {Array<OrganizationUnitDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  organizacneJednotky?: Array<OrganizationUnitDto>
  /**
   *
   * @type {Array<BankConnectionDto>}
   * @memberof ResponseRpoLegalPersonDto
   */
  bankoveSpojenia?: Array<BankConnectionDto>
  /**
   *
   * @type {Equity}
   * @memberof ResponseRpoLegalPersonDto
   */
  zakladneImania?: Equity
  /**
   *
   * @type {string}
   * @memberof ResponseRpoLegalPersonDto
   */
  externeRpoId: string
}
/**
 *
 * @export
 * @interface ResponseRsdStateDto
 */
export interface ResponseRsdStateDto {
  /**
   * Is found or not found
   * @type {string}
   * @memberof ResponseRsdStateDto
   */
  result: ResponseRsdStateDtoResultEnum
  /**
   * Is severally disabled from
   * @type {string}
   * @memberof ResponseRsdStateDto
   */
  disabledFrom?: string
  /**
   * Is accompanying person for severally disabled
   * @type {boolean}
   * @memberof ResponseRsdStateDto
   */
  accompanyingPerson: boolean
}

export const ResponseRsdStateDtoResultEnum = {
  Found: 'found',
  NotFound: 'not_found',
} as const

export type ResponseRsdStateDtoResultEnum =
  (typeof ResponseRsdStateDtoResultEnum)[keyof typeof ResponseRsdStateDtoResultEnum]

/**
 *
 * @export
 * @interface ShareDto
 */
export interface ShareDto {
  /**
   *
   * @type {string}
   * @memberof ShareDto
   */
  podoba: string
  /**
   *
   * @type {string}
   * @memberof ShareDto
   */
  forma: string
  /**
   *
   * @type {string}
   * @memberof ShareDto
   */
  menovitaHodnota: string
  /**
   *
   * @type {string}
   * @memberof ShareDto
   */
  mnozstvo: string
  /**
   *
   * @type {string}
   * @memberof ShareDto
   */
  prevoditelnost: string
  /**
   *
   * @type {CodelistDto}
   * @memberof ShareDto
   */
  mena: CodelistDto
  /**
   *
   * @type {CodelistDto}
   * @memberof ShareDto
   */
  druh: CodelistDto
}
/**
 *
 * @export
 * @interface SourcePropsDto
 */
export interface SourcePropsDto {
  /**
   *
   * @type {number}
   * @memberof SourcePropsDto
   */
  zdrojovySystemId?: number
  /**
   *
   * @type {CodelistDto}
   * @memberof SourcePropsDto
   */
  zdrojovyRegister?: CodelistDto
  /**
   *
   * @type {string}
   * @memberof SourcePropsDto
   */
  registratori?: string
  /**
   *
   * @type {string}
   * @memberof SourcePropsDto
   */
  registracneCisla?: string
}
/**
 *
 * @export
 * @interface StakeholderDto
 */
export interface StakeholderDto {
  /**
   *
   * @type {PersonDto}
   * @memberof StakeholderDto
   */
  osoba: PersonDto
  /**
   *
   * @type {CodelistDto}
   * @memberof StakeholderDto
   */
  typ: CodelistDto
  /**
   *
   * @type {Array<DepositDto>}
   * @memberof StakeholderDto
   */
  vklady: Array<DepositDto>
  /**
   *
   * @type {Array<ShareDto>}
   * @memberof StakeholderDto
   */
  akcie: Array<ShareDto>
}
/**
 *
 * @export
 * @interface StatutoryPropsDto
 */
export interface StatutoryPropsDto {
  /**
   *
   * @type {PersonDto}
   * @memberof StatutoryPropsDto
   */
  osoba: PersonDto
  /**
   *
   * @type {CodelistDto}
   * @memberof StatutoryPropsDto
   */
  typ: CodelistDto
}
/**
 *
 * @export
 * @interface SurnamePropsDto
 */
export interface SurnamePropsDto {
  /**
   *
   * @type {string}
   * @memberof SurnamePropsDto
   */
  priezvisko: string
  /**
   *
   * @type {boolean}
   * @memberof SurnamePropsDto
   */
  priznakPrimarnehoPriezviska: boolean
  /**
   *
   * @type {string}
   * @memberof SurnamePropsDto
   */
  prefix: string
}
/**
 *
 * @export
 * @interface TitlesPropsDto
 */
export interface TitlesPropsDto {
  /**
   *
   * @type {string}
   * @memberof TitlesPropsDto
   */
  typ: string
  /**
   *
   * @type {string}
   * @memberof TitlesPropsDto
   */
  titul: string
  /**
   *
   * @type {string}
   * @memberof TitlesPropsDto
   */
  pozicia: string
}
/**
 *
 * @export
 * @interface UnprocessableEntityErrorDto
 */
export interface UnprocessableEntityErrorDto {
  /**
   * Status code
   * @type {object}
   * @memberof UnprocessableEntityErrorDto
   */
  statusCode: object
  /**
   *
   * @type {string}
   * @memberof UnprocessableEntityErrorDto
   */
  state: string
  /**
   * Error name
   * @type {string}
   * @memberof UnprocessableEntityErrorDto
   */
  errorName: UnprocessableEntityErrorDtoErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof UnprocessableEntityErrorDto
   */
  type: string
  /**
   * Additional info
   * @type {object}
   * @memberof UnprocessableEntityErrorDto
   */
  message: object
}

export const UnprocessableEntityErrorDtoErrorNameEnum = {
  DcomRequestError: 'DCOM_REQUEST_ERROR',
  ParserError: 'PARSER_ERROR',
  DcomNotfound: 'DCOM_NOTFOUND',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  MarkPersonError: 'MARK_PERSON_ERROR',
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const

export type UnprocessableEntityErrorDtoErrorNameEnum =
  (typeof UnprocessableEntityErrorDtoErrorNameEnum)[keyof typeof UnprocessableEntityErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface ValueWithHistory
 */
export interface ValueWithHistory {
  /**
   *
   * @type {boolean}
   * @memberof ValueWithHistory
   */
  priznakAktualnehoZaznamu: boolean
  /**
   *
   * @type {string}
   * @memberof ValueWithHistory
   */
  platnostOd: string
  /**
   *
   * @type {string}
   * @memberof ValueWithHistory
   */
  platnostDo: string
  /**
   *
   * @type {string}
   * @memberof ValueWithHistory
   */
  hodnota: string
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Update or create data in rpo by file
     * @summary Load data to RPO
     * @param {Array<any>} [files] Required array of file/files with RPO (zip) data inside
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerInsertOrUpdateDataInRpo: async (
      files?: Array<any>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/rpo/data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication Admin required
      await setApiKeyToObject(localVarHeaderParameter, 'apiKey', configuration)

      if (files) {
        files.forEach((element) => {
          localVarFormParams.append('files', element as any)
        })
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
  return {
    /**
     * Update or create data in rpo by file
     * @summary Load data to RPO
     * @param {Array<any>} [files] Required array of file/files with RPO (zip) data inside
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerInsertOrUpdateDataInRpo(
      files?: Array<any>,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminControllerInsertOrUpdateDataInRpo(files, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminApi.adminControllerInsertOrUpdateDataInRpo']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminApiFp(configuration)
  return {
    /**
     * Update or create data in rpo by file
     * @summary Load data to RPO
     * @param {Array<any>} [files] Required array of file/files with RPO (zip) data inside
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerInsertOrUpdateDataInRpo(files?: Array<any>, options?: any): AxiosPromise<void> {
      return localVarFp
        .adminControllerInsertOrUpdateDataInRpo(files, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   * Update or create data in rpo by file
   * @summary Load data to RPO
   * @param {Array<any>} [files] Required array of file/files with RPO (zip) data inside
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminControllerInsertOrUpdateDataInRpo(
    files?: Array<any>,
    options?: RawAxiosRequestConfig
  ) {
    return AdminApiFp(this.configuration)
      .adminControllerInsertOrUpdateDataInRpo(files, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * See if nest is working!
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerHealth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/healthcheck`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     * See if nest is working!
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerHealth(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerHealth(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.appControllerHealth']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     * See if nest is working!
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerHealth(options?: any): AxiosPromise<HealthCheckResponseDto> {
      return localVarFp.appControllerHealth(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * See if nest is working!
   * @summary Healthcheck
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public appControllerHealth(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .appControllerHealth(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * DeveloperApi - axios parameter creator
 * @export
 */
export const DeveloperApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create new test data exchange for RPO in rabbitMQ
     * @summary Test RabbitMQ RPO
     * @param {object} [data]
     * @param {Array<any>} [files] Required array of file/files with RPO/ RFO/ RA data inside
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developerControllerPushRpoExchangeData: async (
      data?: object,
      files?: Array<any>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/dev/create-exchange-data-rabbitmq`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication Developer required
      await setApiKeyToObject(localVarHeaderParameter, 'apiKey', configuration)

      if (data !== undefined) {
        localVarFormParams.append(
          'data',
          new Blob([JSON.stringify(data)], { type: 'application/json' })
        )
      }
      if (files) {
        files.forEach((element) => {
          localVarFormParams.append('files', element as any)
        })
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DeveloperApi - functional programming interface
 * @export
 */
export const DeveloperApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeveloperApiAxiosParamCreator(configuration)
  return {
    /**
     * Create new test data exchange for RPO in rabbitMQ
     * @summary Test RabbitMQ RPO
     * @param {object} [data]
     * @param {Array<any>} [files] Required array of file/files with RPO/ RFO/ RA data inside
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async developerControllerPushRpoExchangeData(
      data?: object,
      files?: Array<any>,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.developerControllerPushRpoExchangeData(data, files, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DeveloperApi.developerControllerPushRpoExchangeData']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DeveloperApi - factory interface
 * @export
 */
export const DeveloperApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DeveloperApiFp(configuration)
  return {
    /**
     * Create new test data exchange for RPO in rabbitMQ
     * @summary Test RabbitMQ RPO
     * @param {object} [data]
     * @param {Array<any>} [files] Required array of file/files with RPO/ RFO/ RA data inside
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developerControllerPushRpoExchangeData(
      data?: object,
      files?: Array<any>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .developerControllerPushRpoExchangeData(data, files, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DeveloperApi - object-oriented interface
 * @export
 * @class DeveloperApi
 * @extends {BaseAPI}
 */
export class DeveloperApi extends BaseAPI {
  /**
   * Create new test data exchange for RPO in rabbitMQ
   * @summary Test RabbitMQ RPO
   * @param {object} [data]
   * @param {Array<any>} [files] Required array of file/files with RPO/ RFO/ RA data inside
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeveloperApi
   */
  public developerControllerPushRpoExchangeData(
    data?: object,
    files?: Array<any>,
    options?: RawAxiosRequestConfig
  ) {
    return DeveloperApiFp(this.configuration)
      .developerControllerPushRpoExchangeData(data, files, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * KNKatasterNehnutenostApi - axios parameter creator
 * @export
 */
export const KNKatasterNehnutenostApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} urlPath path of general call to \&quot;kataster\&quot; in base64, for example \&quot;/odata/ParcelsE/\&quot; is in base64 \&quot;L29kYXRhL1BhcmNlbHNFLw&#x3D;&#x3D;\&quot;
     * @param {string} query query of general call to \&quot;kataster\&quot; in base64, for example \&quot;&amp;$filter&#x3D;Municipality/Code%20eq%20&lt;kodeObce&gt;\&quot; is in base64 \&quot;JiRmaWx0ZXI9TXVuaWNpcGFsaXR5L0NvZGUlMjBlcSUyMDxrb2RlT2JjZT4&#x3D;\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    knControllerGeneralAgenda: async (
      urlPath: string,
      query: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'urlPath' is not null or undefined
      assertParamExists('knControllerGeneralAgenda', 'urlPath', urlPath)
      // verify required parameter 'query' is not null or undefined
      assertParamExists('knControllerGeneralAgenda', 'query', query)
      const localVarPath = `/kn/general-agenda`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (urlPath !== undefined) {
        localVarQueryParameter['urlPath'] = urlPath
      }

      if (query !== undefined) {
        localVarQueryParameter['query'] = query
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Find owners by property district, municipality and register number
     * @summary Found owners of given properties
     * @param {string} districName Name of district
     * @param {string} municipalityName Name of municipality (village, city)
     * @param {string} registerNumber Register Number - Súpisné číslo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    knControllerGetOwner: async (
      districName: string,
      municipalityName: string,
      registerNumber: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'districName' is not null or undefined
      assertParamExists('knControllerGetOwner', 'districName', districName)
      // verify required parameter 'municipalityName' is not null or undefined
      assertParamExists('knControllerGetOwner', 'municipalityName', municipalityName)
      // verify required parameter 'registerNumber' is not null or undefined
      assertParamExists('knControllerGetOwner', 'registerNumber', registerNumber)
      const localVarPath = `/kn/find-owners/property`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (districName !== undefined) {
        localVarQueryParameter['districName'] = districName
      }

      if (municipalityName !== undefined) {
        localVarQueryParameter['municipalityName'] = municipalityName
      }

      if (registerNumber !== undefined) {
        localVarQueryParameter['registerNumber'] = registerNumber
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Find properties by name of municipality, name, surname, date of birth
     * @summary Found properties by owner
     * @param {string} municipalityName Name of municipality (village, city)
     * @param {string} firstName First name
     * @param {string} surname Surname
     * @param {string} dateOfBirth Date of birth. (yyyy-mm-dd)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    knControllerGetProperties: async (
      municipalityName: string,
      firstName: string,
      surname: string,
      dateOfBirth: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'municipalityName' is not null or undefined
      assertParamExists('knControllerGetProperties', 'municipalityName', municipalityName)
      // verify required parameter 'firstName' is not null or undefined
      assertParamExists('knControllerGetProperties', 'firstName', firstName)
      // verify required parameter 'surname' is not null or undefined
      assertParamExists('knControllerGetProperties', 'surname', surname)
      // verify required parameter 'dateOfBirth' is not null or undefined
      assertParamExists('knControllerGetProperties', 'dateOfBirth', dateOfBirth)
      const localVarPath = `/kn/find-properties/owner`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (municipalityName !== undefined) {
        localVarQueryParameter['municipalityName'] = municipalityName
      }

      if (firstName !== undefined) {
        localVarQueryParameter['firstName'] = firstName
      }

      if (surname !== undefined) {
        localVarQueryParameter['surname'] = surname
      }

      if (dateOfBirth !== undefined) {
        localVarQueryParameter['dateOfBirth'] = dateOfBirth
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * KNKatasterNehnutenostApi - functional programming interface
 * @export
 */
export const KNKatasterNehnutenostApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = KNKatasterNehnutenostApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} urlPath path of general call to \&quot;kataster\&quot; in base64, for example \&quot;/odata/ParcelsE/\&quot; is in base64 \&quot;L29kYXRhL1BhcmNlbHNFLw&#x3D;&#x3D;\&quot;
     * @param {string} query query of general call to \&quot;kataster\&quot; in base64, for example \&quot;&amp;$filter&#x3D;Municipality/Code%20eq%20&lt;kodeObce&gt;\&quot; is in base64 \&quot;JiRmaWx0ZXI9TXVuaWNpcGFsaXR5L0NvZGUlMjBlcSUyMDxrb2RlT2JjZT4&#x3D;\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async knControllerGeneralAgenda(
      urlPath: string,
      query: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseKNGetOwnersDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.knControllerGeneralAgenda(
        urlPath,
        query,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['KNKatasterNehnutenostApi.knControllerGeneralAgenda']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Find owners by property district, municipality and register number
     * @summary Found owners of given properties
     * @param {string} districName Name of district
     * @param {string} municipalityName Name of municipality (village, city)
     * @param {string} registerNumber Register Number - Súpisné číslo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async knControllerGetOwner(
      districName: string,
      municipalityName: string,
      registerNumber: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseKNGetOwnersDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.knControllerGetOwner(
        districName,
        municipalityName,
        registerNumber,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['KNKatasterNehnutenostApi.knControllerGetOwner']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Find properties by name of municipality, name, surname, date of birth
     * @summary Found properties by owner
     * @param {string} municipalityName Name of municipality (village, city)
     * @param {string} firstName First name
     * @param {string} surname Surname
     * @param {string} dateOfBirth Date of birth. (yyyy-mm-dd)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async knControllerGetProperties(
      municipalityName: string,
      firstName: string,
      surname: string,
      dateOfBirth: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseKNGetPropertiesDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.knControllerGetProperties(
        municipalityName,
        firstName,
        surname,
        dateOfBirth,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['KNKatasterNehnutenostApi.knControllerGetProperties']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * KNKatasterNehnutenostApi - factory interface
 * @export
 */
export const KNKatasterNehnutenostApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = KNKatasterNehnutenostApiFp(configuration)
  return {
    /**
     *
     * @param {string} urlPath path of general call to \&quot;kataster\&quot; in base64, for example \&quot;/odata/ParcelsE/\&quot; is in base64 \&quot;L29kYXRhL1BhcmNlbHNFLw&#x3D;&#x3D;\&quot;
     * @param {string} query query of general call to \&quot;kataster\&quot; in base64, for example \&quot;&amp;$filter&#x3D;Municipality/Code%20eq%20&lt;kodeObce&gt;\&quot; is in base64 \&quot;JiRmaWx0ZXI9TXVuaWNpcGFsaXR5L0NvZGUlMjBlcSUyMDxrb2RlT2JjZT4&#x3D;\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    knControllerGeneralAgenda(
      urlPath: string,
      query: string,
      options?: any
    ): AxiosPromise<ResponseKNGetOwnersDto> {
      return localVarFp
        .knControllerGeneralAgenda(urlPath, query, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Find owners by property district, municipality and register number
     * @summary Found owners of given properties
     * @param {string} districName Name of district
     * @param {string} municipalityName Name of municipality (village, city)
     * @param {string} registerNumber Register Number - Súpisné číslo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    knControllerGetOwner(
      districName: string,
      municipalityName: string,
      registerNumber: string,
      options?: any
    ): AxiosPromise<ResponseKNGetOwnersDto> {
      return localVarFp
        .knControllerGetOwner(districName, municipalityName, registerNumber, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Find properties by name of municipality, name, surname, date of birth
     * @summary Found properties by owner
     * @param {string} municipalityName Name of municipality (village, city)
     * @param {string} firstName First name
     * @param {string} surname Surname
     * @param {string} dateOfBirth Date of birth. (yyyy-mm-dd)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    knControllerGetProperties(
      municipalityName: string,
      firstName: string,
      surname: string,
      dateOfBirth: string,
      options?: any
    ): AxiosPromise<ResponseKNGetPropertiesDto> {
      return localVarFp
        .knControllerGetProperties(municipalityName, firstName, surname, dateOfBirth, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * KNKatasterNehnutenostApi - object-oriented interface
 * @export
 * @class KNKatasterNehnutenostApi
 * @extends {BaseAPI}
 */
export class KNKatasterNehnutenostApi extends BaseAPI {
  /**
   *
   * @param {string} urlPath path of general call to \&quot;kataster\&quot; in base64, for example \&quot;/odata/ParcelsE/\&quot; is in base64 \&quot;L29kYXRhL1BhcmNlbHNFLw&#x3D;&#x3D;\&quot;
   * @param {string} query query of general call to \&quot;kataster\&quot; in base64, for example \&quot;&amp;$filter&#x3D;Municipality/Code%20eq%20&lt;kodeObce&gt;\&quot; is in base64 \&quot;JiRmaWx0ZXI9TXVuaWNpcGFsaXR5L0NvZGUlMjBlcSUyMDxrb2RlT2JjZT4&#x3D;\&quot;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KNKatasterNehnutenostApi
   */
  public knControllerGeneralAgenda(
    urlPath: string,
    query: string,
    options?: RawAxiosRequestConfig
  ) {
    return KNKatasterNehnutenostApiFp(this.configuration)
      .knControllerGeneralAgenda(urlPath, query, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Find owners by property district, municipality and register number
   * @summary Found owners of given properties
   * @param {string} districName Name of district
   * @param {string} municipalityName Name of municipality (village, city)
   * @param {string} registerNumber Register Number - Súpisné číslo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KNKatasterNehnutenostApi
   */
  public knControllerGetOwner(
    districName: string,
    municipalityName: string,
    registerNumber: string,
    options?: RawAxiosRequestConfig
  ) {
    return KNKatasterNehnutenostApiFp(this.configuration)
      .knControllerGetOwner(districName, municipalityName, registerNumber, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Find properties by name of municipality, name, surname, date of birth
   * @summary Found properties by owner
   * @param {string} municipalityName Name of municipality (village, city)
   * @param {string} firstName First name
   * @param {string} surname Surname
   * @param {string} dateOfBirth Date of birth. (yyyy-mm-dd)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KNKatasterNehnutenostApi
   */
  public knControllerGetProperties(
    municipalityName: string,
    firstName: string,
    surname: string,
    dateOfBirth: string,
    options?: RawAxiosRequestConfig
  ) {
    return KNKatasterNehnutenostApiFp(this.configuration)
      .knControllerGetProperties(municipalityName, firstName, surname, dateOfBirth, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * NEVNrodnEvidenciaVozidielApi - axios parameter creator
 * @export
 */
export const NEVNrodnEvidenciaVozidielApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Find control by VI (Id of car)
     * @summary Found state of technical and emision control
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerTechnicalEmisionControl: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nevControllerTechnicalEmisionControl', 'id', id)
      const localVarPath = `/nev/tkek/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Display details of vehicle given by ECV
     * @summary Found vehicle by ECV
     * @param {string} ecv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByECV: async (
      ecv: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ecv' is not null or undefined
      assertParamExists('nevControllerVehicleByECV', 'ecv', ecv)
      const localVarPath = `/nev/vozidlo/ecv/{ecv}`.replace(
        `{${'ecv'}}`,
        encodeURIComponent(String(ecv))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Display details of vehicles given by their holder\'s birth number
     * @summary Found vehicles by their holder\'s birth number
     * @param {string} birthNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByHolderBirthNumber: async (
      birthNumber: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'birthNumber' is not null or undefined
      assertParamExists('nevControllerVehicleByHolderBirthNumber', 'birthNumber', birthNumber)
      const localVarPath = `/nev/vozidlo/drzitel/rodnecislo/{birthNumber}`.replace(
        `{${'birthNumber'}}`,
        encodeURIComponent(String(birthNumber))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Display details of vehicles given by their holder\'s business id
     * @summary Found vehicles by their holder\'s business id
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByHolderICO: async (
      ico: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ico' is not null or undefined
      assertParamExists('nevControllerVehicleByHolderICO', 'ico', ico)
      const localVarPath = `/nev/vozidlo/drzitel/ico/{ico}`.replace(
        `{${'ico'}}`,
        encodeURIComponent(String(ico))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Display details of vehicles given by their owner\'s birth number
     * @summary Found vehicles by their owner\'s birth number
     * @param {string} birthNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByOwnerBirthNumber: async (
      birthNumber: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'birthNumber' is not null or undefined
      assertParamExists('nevControllerVehicleByOwnerBirthNumber', 'birthNumber', birthNumber)
      const localVarPath = `/nev/vozidlo/vlastnik/rodnecislo/{birthNumber}`.replace(
        `{${'birthNumber'}}`,
        encodeURIComponent(String(birthNumber))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Display details of vehicles given by their owner\'s business id
     * @summary Found vehicles by their owner\'s business id
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByOwnerICO: async (
      ico: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ico' is not null or undefined
      assertParamExists('nevControllerVehicleByOwnerICO', 'ico', ico)
      const localVarPath = `/nev/vozidlo/vlastnik/ico/{ico}`.replace(
        `{${'ico'}}`,
        encodeURIComponent(String(ico))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NEVNrodnEvidenciaVozidielApi - functional programming interface
 * @export
 */
export const NEVNrodnEvidenciaVozidielApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NEVNrodnEvidenciaVozidielApiAxiosParamCreator(configuration)
  return {
    /**
     * Find control by VI (Id of car)
     * @summary Found state of technical and emision control
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nevControllerTechnicalEmisionControl(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNEVTkEkDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.nevControllerTechnicalEmisionControl(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['NEVNrodnEvidenciaVozidielApi.nevControllerTechnicalEmisionControl']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Display details of vehicle given by ECV
     * @summary Found vehicle by ECV
     * @param {string} ecv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nevControllerVehicleByECV(
      ecv: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNEVMainDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nevControllerVehicleByECV(
        ecv,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['NEVNrodnEvidenciaVozidielApi.nevControllerVehicleByECV']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Display details of vehicles given by their holder\'s birth number
     * @summary Found vehicles by their holder\'s birth number
     * @param {string} birthNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nevControllerVehicleByHolderBirthNumber(
      birthNumber: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNEVMainDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.nevControllerVehicleByHolderBirthNumber(
          birthNumber,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'NEVNrodnEvidenciaVozidielApi.nevControllerVehicleByHolderBirthNumber'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Display details of vehicles given by their holder\'s business id
     * @summary Found vehicles by their holder\'s business id
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nevControllerVehicleByHolderICO(
      ico: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNEVMainDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nevControllerVehicleByHolderICO(
        ico,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['NEVNrodnEvidenciaVozidielApi.nevControllerVehicleByHolderICO']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Display details of vehicles given by their owner\'s birth number
     * @summary Found vehicles by their owner\'s birth number
     * @param {string} birthNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nevControllerVehicleByOwnerBirthNumber(
      birthNumber: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNEVMainDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.nevControllerVehicleByOwnerBirthNumber(birthNumber, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['NEVNrodnEvidenciaVozidielApi.nevControllerVehicleByOwnerBirthNumber']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Display details of vehicles given by their owner\'s business id
     * @summary Found vehicles by their owner\'s business id
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nevControllerVehicleByOwnerICO(
      ico: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseNEVMainDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nevControllerVehicleByOwnerICO(
        ico,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['NEVNrodnEvidenciaVozidielApi.nevControllerVehicleByOwnerICO']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * NEVNrodnEvidenciaVozidielApi - factory interface
 * @export
 */
export const NEVNrodnEvidenciaVozidielApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = NEVNrodnEvidenciaVozidielApiFp(configuration)
  return {
    /**
     * Find control by VI (Id of car)
     * @summary Found state of technical and emision control
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerTechnicalEmisionControl(
      id: string,
      options?: any
    ): AxiosPromise<ResponseNEVTkEkDto> {
      return localVarFp
        .nevControllerTechnicalEmisionControl(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Display details of vehicle given by ECV
     * @summary Found vehicle by ECV
     * @param {string} ecv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByECV(ecv: string, options?: any): AxiosPromise<ResponseNEVMainDto> {
      return localVarFp
        .nevControllerVehicleByECV(ecv, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Display details of vehicles given by their holder\'s birth number
     * @summary Found vehicles by their holder\'s birth number
     * @param {string} birthNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByHolderBirthNumber(
      birthNumber: string,
      options?: any
    ): AxiosPromise<ResponseNEVMainDto> {
      return localVarFp
        .nevControllerVehicleByHolderBirthNumber(birthNumber, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Display details of vehicles given by their holder\'s business id
     * @summary Found vehicles by their holder\'s business id
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByHolderICO(ico: string, options?: any): AxiosPromise<ResponseNEVMainDto> {
      return localVarFp
        .nevControllerVehicleByHolderICO(ico, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Display details of vehicles given by their owner\'s birth number
     * @summary Found vehicles by their owner\'s birth number
     * @param {string} birthNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByOwnerBirthNumber(
      birthNumber: string,
      options?: any
    ): AxiosPromise<ResponseNEVMainDto> {
      return localVarFp
        .nevControllerVehicleByOwnerBirthNumber(birthNumber, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Display details of vehicles given by their owner\'s business id
     * @summary Found vehicles by their owner\'s business id
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nevControllerVehicleByOwnerICO(ico: string, options?: any): AxiosPromise<ResponseNEVMainDto> {
      return localVarFp
        .nevControllerVehicleByOwnerICO(ico, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NEVNrodnEvidenciaVozidielApi - object-oriented interface
 * @export
 * @class NEVNrodnEvidenciaVozidielApi
 * @extends {BaseAPI}
 */
export class NEVNrodnEvidenciaVozidielApi extends BaseAPI {
  /**
   * Find control by VI (Id of car)
   * @summary Found state of technical and emision control
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NEVNrodnEvidenciaVozidielApi
   */
  public nevControllerTechnicalEmisionControl(id: string, options?: RawAxiosRequestConfig) {
    return NEVNrodnEvidenciaVozidielApiFp(this.configuration)
      .nevControllerTechnicalEmisionControl(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Display details of vehicle given by ECV
   * @summary Found vehicle by ECV
   * @param {string} ecv
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NEVNrodnEvidenciaVozidielApi
   */
  public nevControllerVehicleByECV(ecv: string, options?: RawAxiosRequestConfig) {
    return NEVNrodnEvidenciaVozidielApiFp(this.configuration)
      .nevControllerVehicleByECV(ecv, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Display details of vehicles given by their holder\'s birth number
   * @summary Found vehicles by their holder\'s birth number
   * @param {string} birthNumber
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NEVNrodnEvidenciaVozidielApi
   */
  public nevControllerVehicleByHolderBirthNumber(
    birthNumber: string,
    options?: RawAxiosRequestConfig
  ) {
    return NEVNrodnEvidenciaVozidielApiFp(this.configuration)
      .nevControllerVehicleByHolderBirthNumber(birthNumber, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Display details of vehicles given by their holder\'s business id
   * @summary Found vehicles by their holder\'s business id
   * @param {string} ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NEVNrodnEvidenciaVozidielApi
   */
  public nevControllerVehicleByHolderICO(ico: string, options?: RawAxiosRequestConfig) {
    return NEVNrodnEvidenciaVozidielApiFp(this.configuration)
      .nevControllerVehicleByHolderICO(ico, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Display details of vehicles given by their owner\'s birth number
   * @summary Found vehicles by their owner\'s birth number
   * @param {string} birthNumber
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NEVNrodnEvidenciaVozidielApi
   */
  public nevControllerVehicleByOwnerBirthNumber(
    birthNumber: string,
    options?: RawAxiosRequestConfig
  ) {
    return NEVNrodnEvidenciaVozidielApiFp(this.configuration)
      .nevControllerVehicleByOwnerBirthNumber(birthNumber, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Display details of vehicles given by their owner\'s business id
   * @summary Found vehicles by their owner\'s business id
   * @param {string} ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NEVNrodnEvidenciaVozidielApi
   */
  public nevControllerVehicleByOwnerICO(ico: string, options?: RawAxiosRequestConfig) {
    return NEVNrodnEvidenciaVozidielApiFp(this.configuration)
      .nevControllerVehicleByOwnerICO(ico, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * RFORegisterFyzickchOsbApi - axios parameter creator
 * @export
 */
export const RFORegisterFyzickchOsbApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Information about a physical person given by birth number
     * @param {string} rodneCislo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetList: async (
      rodneCislo: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'rodneCislo' is not null or undefined
      assertParamExists('rfoControllerGetList', 'rodneCislo', rodneCislo)
      const localVarPath = `/rfo/rodneCislo/list/{rodneCislo}`.replace(
        `{${'rodneCislo'}}`,
        encodeURIComponent(String(rodneCislo))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a physical person given by birth number
     * @param {string} rodneCislo
     * @param {RfoControllerGetOneGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOne: async (
      rodneCislo: string,
      getFromDatabase?: RfoControllerGetOneGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneUpdateInDatabaseEnum,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'rodneCislo' is not null or undefined
      assertParamExists('rfoControllerGetOne', 'rodneCislo', rodneCislo)
      const localVarPath = `/rfo/rodneCislo/{rodneCislo}`.replace(
        `{${'rodneCislo'}}`,
        encodeURIComponent(String(rodneCislo))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (getFromDatabase !== undefined) {
        localVarQueryParameter['getFromDatabase'] = getFromDatabase
      }

      if (updateInDatabase !== undefined) {
        localVarQueryParameter['updateInDatabase'] = updateInDatabase
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a physical person given by ifo
     * @param {string} ifo
     * @param {RfoControllerGetOneByIfoGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneByIfoUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneByIfo: async (
      ifo: string,
      getFromDatabase?: RfoControllerGetOneByIfoGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneByIfoUpdateInDatabaseEnum,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ifo' is not null or undefined
      assertParamExists('rfoControllerGetOneByIfo', 'ifo', ifo)
      const localVarPath = `/rfo/ifo/{ifo}`.replace(`{${'ifo'}}`, encodeURIComponent(String(ifo)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (getFromDatabase !== undefined) {
        localVarQueryParameter['getFromDatabase'] = getFromDatabase
      }

      if (updateInDatabase !== undefined) {
        localVarQueryParameter['updateInDatabase'] = updateInDatabase
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a physical person based on name and birth date
     * @param {Array<string>} meno First name of the person
     * @param {Array<string>} priezvisko Second name of the person
     * @param {string} datumNarodenia Date of birth
     * @param {Array<string>} [rodnePriezvisko] Birth Second name of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneByListOfNames: async (
      meno: Array<string>,
      priezvisko: Array<string>,
      datumNarodenia: string,
      rodnePriezvisko?: Array<string>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'meno' is not null or undefined
      assertParamExists('rfoControllerGetOneByListOfNames', 'meno', meno)
      // verify required parameter 'priezvisko' is not null or undefined
      assertParamExists('rfoControllerGetOneByListOfNames', 'priezvisko', priezvisko)
      // verify required parameter 'datumNarodenia' is not null or undefined
      assertParamExists('rfoControllerGetOneByListOfNames', 'datumNarodenia', datumNarodenia)
      const localVarPath = `/rfo/meno-priezvisko-datumnarodenia-list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (rodnePriezvisko) {
        localVarQueryParameter['rodnePriezvisko'] = rodnePriezvisko
      }

      if (meno) {
        localVarQueryParameter['meno'] = meno
      }

      if (priezvisko) {
        localVarQueryParameter['priezvisko'] = priezvisko
      }

      if (datumNarodenia !== undefined) {
        localVarQueryParameter['datumNarodenia'] = datumNarodenia
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a physical person based on name and birth date
     * @param {string} meno
     * @param {string} priezvisko
     * @param {string} datumNarodenia
     * @param {RfoControllerGetOneByNameGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneByNameUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {string} [rodnePriezvisko]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneByName: async (
      meno: string,
      priezvisko: string,
      datumNarodenia: string,
      getFromDatabase?: RfoControllerGetOneByNameGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneByNameUpdateInDatabaseEnum,
      rodnePriezvisko?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'meno' is not null or undefined
      assertParamExists('rfoControllerGetOneByName', 'meno', meno)
      // verify required parameter 'priezvisko' is not null or undefined
      assertParamExists('rfoControllerGetOneByName', 'priezvisko', priezvisko)
      // verify required parameter 'datumNarodenia' is not null or undefined
      assertParamExists('rfoControllerGetOneByName', 'datumNarodenia', datumNarodenia)
      const localVarPath =
        `/rfo/meno-priezvisko-datumnarodenia/{meno}/{priezvisko}/{datumNarodenia}`
          .replace(`{${'meno'}}`, encodeURIComponent(String(meno)))
          .replace(`{${'priezvisko'}}`, encodeURIComponent(String(priezvisko)))
          .replace(`{${'datumNarodenia'}}`, encodeURIComponent(String(datumNarodenia)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (getFromDatabase !== undefined) {
        localVarQueryParameter['getFromDatabase'] = getFromDatabase
      }

      if (updateInDatabase !== undefined) {
        localVarQueryParameter['updateInDatabase'] = updateInDatabase
      }

      if (rodnePriezvisko !== undefined) {
        localVarQueryParameter['rodnePriezvisko'] = rodnePriezvisko
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a physical person based on birth number without cash database
     * @param {string} rodneCislo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneDcom: async (
      rodneCislo: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'rodneCislo' is not null or undefined
      assertParamExists('rfoControllerGetOneDcom', 'rodneCislo', rodneCislo)
      const localVarPath = `/rfo/rodneCislo/dcom/{rodneCislo}`.replace(
        `{${'rodneCislo'}}`,
        encodeURIComponent(String(rodneCislo))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Mark physical person as interesting based on ifo
     * @param {string} ifo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerMark: async (
      ifo: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ifo' is not null or undefined
      assertParamExists('rfoControllerMark', 'ifo', ifo)
      const localVarPath = `/rfo/oznacenie-zaujmovej-osoby/{ifo}`.replace(
        `{${'ifo'}}`,
        encodeURIComponent(String(ifo))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Unmark a physical person as interesting based on ifo
     * @param {string} ifo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerUnMark: async (
      ifo: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ifo' is not null or undefined
      assertParamExists('rfoControllerUnMark', 'ifo', ifo)
      const localVarPath = `/rfo/odznacenie-zaujmovej-ososby/{ifo}`.replace(
        `{${'ifo'}}`,
        encodeURIComponent(String(ifo))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RFORegisterFyzickchOsbApi - functional programming interface
 * @export
 */
export const RFORegisterFyzickchOsbApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RFORegisterFyzickchOsbApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Information about a physical person given by birth number
     * @param {string} rodneCislo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerGetList(
      rodneCislo: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonListDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerGetList(
        rodneCislo,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerGetList']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a physical person given by birth number
     * @param {string} rodneCislo
     * @param {RfoControllerGetOneGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerGetOne(
      rodneCislo: string,
      getFromDatabase?: RfoControllerGetOneGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneUpdateInDatabaseEnum,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerGetOne(
        rodneCislo,
        getFromDatabase,
        updateInDatabase,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerGetOne']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a physical person given by ifo
     * @param {string} ifo
     * @param {RfoControllerGetOneByIfoGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneByIfoUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerGetOneByIfo(
      ifo: string,
      getFromDatabase?: RfoControllerGetOneByIfoGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneByIfoUpdateInDatabaseEnum,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerGetOneByIfo(
        ifo,
        getFromDatabase,
        updateInDatabase,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerGetOneByIfo']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a physical person based on name and birth date
     * @param {Array<string>} meno First name of the person
     * @param {Array<string>} priezvisko Second name of the person
     * @param {string} datumNarodenia Date of birth
     * @param {Array<string>} [rodnePriezvisko] Birth Second name of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerGetOneByListOfNames(
      meno: Array<string>,
      priezvisko: Array<string>,
      datumNarodenia: string,
      rodnePriezvisko?: Array<string>,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerGetOneByListOfNames(
        meno,
        priezvisko,
        datumNarodenia,
        rodnePriezvisko,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerGetOneByListOfNames']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a physical person based on name and birth date
     * @param {string} meno
     * @param {string} priezvisko
     * @param {string} datumNarodenia
     * @param {RfoControllerGetOneByNameGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneByNameUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {string} [rodnePriezvisko]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerGetOneByName(
      meno: string,
      priezvisko: string,
      datumNarodenia: string,
      getFromDatabase?: RfoControllerGetOneByNameGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneByNameUpdateInDatabaseEnum,
      rodnePriezvisko?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerGetOneByName(
        meno,
        priezvisko,
        datumNarodenia,
        getFromDatabase,
        updateInDatabase,
        rodnePriezvisko,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerGetOneByName']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a physical person based on birth number without cash database
     * @param {string} rodneCislo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerGetOneDcom(
      rodneCislo: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerGetOneDcom(
        rodneCislo,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerGetOneDcom']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Mark physical person as interesting based on ifo
     * @param {string} ifo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerMark(
      ifo: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerMark(ifo, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerMark']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Unmark a physical person as interesting based on ifo
     * @param {string} ifo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rfoControllerUnMark(
      ifo: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRfoPersonDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rfoControllerUnMark(ifo, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RFORegisterFyzickchOsbApi.rfoControllerUnMark']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * RFORegisterFyzickchOsbApi - factory interface
 * @export
 */
export const RFORegisterFyzickchOsbApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RFORegisterFyzickchOsbApiFp(configuration)
  return {
    /**
     *
     * @summary Information about a physical person given by birth number
     * @param {string} rodneCislo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetList(
      rodneCislo: string,
      options?: any
    ): AxiosPromise<ResponseRfoPersonListDto> {
      return localVarFp
        .rfoControllerGetList(rodneCislo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a physical person given by birth number
     * @param {string} rodneCislo
     * @param {RfoControllerGetOneGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOne(
      rodneCislo: string,
      getFromDatabase?: RfoControllerGetOneGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneUpdateInDatabaseEnum,
      options?: any
    ): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp
        .rfoControllerGetOne(rodneCislo, getFromDatabase, updateInDatabase, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a physical person given by ifo
     * @param {string} ifo
     * @param {RfoControllerGetOneByIfoGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneByIfoUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneByIfo(
      ifo: string,
      getFromDatabase?: RfoControllerGetOneByIfoGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneByIfoUpdateInDatabaseEnum,
      options?: any
    ): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp
        .rfoControllerGetOneByIfo(ifo, getFromDatabase, updateInDatabase, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a physical person based on name and birth date
     * @param {Array<string>} meno First name of the person
     * @param {Array<string>} priezvisko Second name of the person
     * @param {string} datumNarodenia Date of birth
     * @param {Array<string>} [rodnePriezvisko] Birth Second name of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneByListOfNames(
      meno: Array<string>,
      priezvisko: Array<string>,
      datumNarodenia: string,
      rodnePriezvisko?: Array<string>,
      options?: any
    ): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp
        .rfoControllerGetOneByListOfNames(
          meno,
          priezvisko,
          datumNarodenia,
          rodnePriezvisko,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a physical person based on name and birth date
     * @param {string} meno
     * @param {string} priezvisko
     * @param {string} datumNarodenia
     * @param {RfoControllerGetOneByNameGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
     * @param {RfoControllerGetOneByNameUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
     * @param {string} [rodnePriezvisko]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneByName(
      meno: string,
      priezvisko: string,
      datumNarodenia: string,
      getFromDatabase?: RfoControllerGetOneByNameGetFromDatabaseEnum,
      updateInDatabase?: RfoControllerGetOneByNameUpdateInDatabaseEnum,
      rodnePriezvisko?: string,
      options?: any
    ): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp
        .rfoControllerGetOneByName(
          meno,
          priezvisko,
          datumNarodenia,
          getFromDatabase,
          updateInDatabase,
          rodnePriezvisko,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a physical person based on birth number without cash database
     * @param {string} rodneCislo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerGetOneDcom(rodneCislo: string, options?: any): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp
        .rfoControllerGetOneDcom(rodneCislo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Mark physical person as interesting based on ifo
     * @param {string} ifo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerMark(ifo: string, options?: any): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp.rfoControllerMark(ifo, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Unmark a physical person as interesting based on ifo
     * @param {string} ifo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rfoControllerUnMark(ifo: string, options?: any): AxiosPromise<ResponseRfoPersonDto> {
      return localVarFp
        .rfoControllerUnMark(ifo, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RFORegisterFyzickchOsbApi - object-oriented interface
 * @export
 * @class RFORegisterFyzickchOsbApi
 * @extends {BaseAPI}
 */
export class RFORegisterFyzickchOsbApi extends BaseAPI {
  /**
   *
   * @summary Information about a physical person given by birth number
   * @param {string} rodneCislo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerGetList(rodneCislo: string, options?: RawAxiosRequestConfig) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerGetList(rodneCislo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a physical person given by birth number
   * @param {string} rodneCislo
   * @param {RfoControllerGetOneGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
   * @param {RfoControllerGetOneUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerGetOne(
    rodneCislo: string,
    getFromDatabase?: RfoControllerGetOneGetFromDatabaseEnum,
    updateInDatabase?: RfoControllerGetOneUpdateInDatabaseEnum,
    options?: RawAxiosRequestConfig
  ) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerGetOne(rodneCislo, getFromDatabase, updateInDatabase, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a physical person given by ifo
   * @param {string} ifo
   * @param {RfoControllerGetOneByIfoGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
   * @param {RfoControllerGetOneByIfoUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerGetOneByIfo(
    ifo: string,
    getFromDatabase?: RfoControllerGetOneByIfoGetFromDatabaseEnum,
    updateInDatabase?: RfoControllerGetOneByIfoUpdateInDatabaseEnum,
    options?: RawAxiosRequestConfig
  ) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerGetOneByIfo(ifo, getFromDatabase, updateInDatabase, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a physical person based on name and birth date
   * @param {Array<string>} meno First name of the person
   * @param {Array<string>} priezvisko Second name of the person
   * @param {string} datumNarodenia Date of birth
   * @param {Array<string>} [rodnePriezvisko] Birth Second name of the person
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerGetOneByListOfNames(
    meno: Array<string>,
    priezvisko: Array<string>,
    datumNarodenia: string,
    rodnePriezvisko?: Array<string>,
    options?: RawAxiosRequestConfig
  ) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerGetOneByListOfNames(meno, priezvisko, datumNarodenia, rodnePriezvisko, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a physical person based on name and birth date
   * @param {string} meno
   * @param {string} priezvisko
   * @param {string} datumNarodenia
   * @param {RfoControllerGetOneByNameGetFromDatabaseEnum} [getFromDatabase] check if exists in database, if yes, return him
   * @param {RfoControllerGetOneByNameUpdateInDatabaseEnum} [updateInDatabase] Check if is in persons if interests if not, add him and create in database, if yes, update in database
   * @param {string} [rodnePriezvisko]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerGetOneByName(
    meno: string,
    priezvisko: string,
    datumNarodenia: string,
    getFromDatabase?: RfoControllerGetOneByNameGetFromDatabaseEnum,
    updateInDatabase?: RfoControllerGetOneByNameUpdateInDatabaseEnum,
    rodnePriezvisko?: string,
    options?: RawAxiosRequestConfig
  ) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerGetOneByName(
        meno,
        priezvisko,
        datumNarodenia,
        getFromDatabase,
        updateInDatabase,
        rodnePriezvisko,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a physical person based on birth number without cash database
   * @param {string} rodneCislo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerGetOneDcom(rodneCislo: string, options?: RawAxiosRequestConfig) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerGetOneDcom(rodneCislo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Mark physical person as interesting based on ifo
   * @param {string} ifo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerMark(ifo: string, options?: RawAxiosRequestConfig) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerMark(ifo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Unmark a physical person as interesting based on ifo
   * @param {string} ifo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFORegisterFyzickchOsbApi
   */
  public rfoControllerUnMark(ifo: string, options?: RawAxiosRequestConfig) {
    return RFORegisterFyzickchOsbApiFp(this.configuration)
      .rfoControllerUnMark(ifo, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const RfoControllerGetOneGetFromDatabaseEnum = {
  True: 'true',
  False: 'false',
} as const
export type RfoControllerGetOneGetFromDatabaseEnum =
  (typeof RfoControllerGetOneGetFromDatabaseEnum)[keyof typeof RfoControllerGetOneGetFromDatabaseEnum]
/**
 * @export
 */
export const RfoControllerGetOneUpdateInDatabaseEnum = {
  True: 'true',
  False: 'false',
} as const
export type RfoControllerGetOneUpdateInDatabaseEnum =
  (typeof RfoControllerGetOneUpdateInDatabaseEnum)[keyof typeof RfoControllerGetOneUpdateInDatabaseEnum]
/**
 * @export
 */
export const RfoControllerGetOneByIfoGetFromDatabaseEnum = {
  True: 'true',
  False: 'false',
} as const
export type RfoControllerGetOneByIfoGetFromDatabaseEnum =
  (typeof RfoControllerGetOneByIfoGetFromDatabaseEnum)[keyof typeof RfoControllerGetOneByIfoGetFromDatabaseEnum]
/**
 * @export
 */
export const RfoControllerGetOneByIfoUpdateInDatabaseEnum = {
  True: 'true',
  False: 'false',
} as const
export type RfoControllerGetOneByIfoUpdateInDatabaseEnum =
  (typeof RfoControllerGetOneByIfoUpdateInDatabaseEnum)[keyof typeof RfoControllerGetOneByIfoUpdateInDatabaseEnum]
/**
 * @export
 */
export const RfoControllerGetOneByNameGetFromDatabaseEnum = {
  True: 'true',
  False: 'false',
} as const
export type RfoControllerGetOneByNameGetFromDatabaseEnum =
  (typeof RfoControllerGetOneByNameGetFromDatabaseEnum)[keyof typeof RfoControllerGetOneByNameGetFromDatabaseEnum]
/**
 * @export
 */
export const RfoControllerGetOneByNameUpdateInDatabaseEnum = {
  True: 'true',
  False: 'false',
} as const
export type RfoControllerGetOneByNameUpdateInDatabaseEnum =
  (typeof RfoControllerGetOneByNameUpdateInDatabaseEnum)[keyof typeof RfoControllerGetOneByNameUpdateInDatabaseEnum]

/**
 * RPORegisterPrvnickchOsbApi - axios parameter creator
 * @export
 */
export const RPORegisterPrvnickchOsbApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPerson: async (
      ico: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ico' is not null or undefined
      assertParamExists('rpoControllerGetLegalPerson', 'ico', ico)
      const localVarPath = `/rpo/{ico}`.replace(`{${'ico'}}`, encodeURIComponent(String(ico)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPersonBase: async (
      ico: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ico' is not null or undefined
      assertParamExists('rpoControllerGetLegalPersonBase', 'ico', ico)
      const localVarPath = `/rpo/base/{ico}`.replace(`{${'ico'}}`, encodeURIComponent(String(ico)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPersonBase_1: async (
      ico: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ico' is not null or undefined
      assertParamExists('rpoControllerGetLegalPersonBase_1', 'ico', ico)
      const localVarPath = `/rpo/base/ico/{ico}`.replace(
        `{${'ico'}}`,
        encodeURIComponent(String(ico))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPerson_2: async (
      ico: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ico' is not null or undefined
      assertParamExists('rpoControllerGetLegalPerson_2', 'ico', ico)
      const localVarPath = `/rpo/ico/{ico}`.replace(`{${'ico'}}`, encodeURIComponent(String(ico)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RPORegisterPrvnickchOsbApi - functional programming interface
 * @export
 */
export const RPORegisterPrvnickchOsbApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RPORegisterPrvnickchOsbApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rpoControllerGetLegalPerson(
      ico: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRpoLegalPersonDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rpoControllerGetLegalPerson(
        ico,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RPORegisterPrvnickchOsbApi.rpoControllerGetLegalPerson']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rpoControllerGetLegalPersonBase(
      ico: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRpoLegalPersonDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rpoControllerGetLegalPersonBase(
        ico,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RPORegisterPrvnickchOsbApi.rpoControllerGetLegalPersonBase']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rpoControllerGetLegalPersonBase_1(
      ico: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRpoLegalPersonDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rpoControllerGetLegalPersonBase_1(
        ico,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RPORegisterPrvnickchOsbApi.rpoControllerGetLegalPersonBase_1']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rpoControllerGetLegalPerson_2(
      ico: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRpoLegalPersonDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rpoControllerGetLegalPerson_2(
        ico,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RPORegisterPrvnickchOsbApi.rpoControllerGetLegalPerson_2']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * RPORegisterPrvnickchOsbApi - factory interface
 * @export
 */
export const RPORegisterPrvnickchOsbApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RPORegisterPrvnickchOsbApiFp(configuration)
  return {
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPerson(
      ico: string,
      options?: any
    ): AxiosPromise<ResponseRpoLegalPersonDto> {
      return localVarFp
        .rpoControllerGetLegalPerson(ico, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPersonBase(
      ico: string,
      options?: any
    ): AxiosPromise<ResponseRpoLegalPersonDto> {
      return localVarFp
        .rpoControllerGetLegalPersonBase(ico, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPersonBase_1(
      ico: string,
      options?: any
    ): AxiosPromise<ResponseRpoLegalPersonDto> {
      return localVarFp
        .rpoControllerGetLegalPersonBase_1(ico, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about a legal person
     * @param {string} ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rpoControllerGetLegalPerson_2(
      ico: string,
      options?: any
    ): AxiosPromise<ResponseRpoLegalPersonDto> {
      return localVarFp
        .rpoControllerGetLegalPerson_2(ico, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RPORegisterPrvnickchOsbApi - object-oriented interface
 * @export
 * @class RPORegisterPrvnickchOsbApi
 * @extends {BaseAPI}
 */
export class RPORegisterPrvnickchOsbApi extends BaseAPI {
  /**
   *
   * @summary Information about a legal person
   * @param {string} ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RPORegisterPrvnickchOsbApi
   */
  public rpoControllerGetLegalPerson(ico: string, options?: RawAxiosRequestConfig) {
    return RPORegisterPrvnickchOsbApiFp(this.configuration)
      .rpoControllerGetLegalPerson(ico, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a legal person
   * @param {string} ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RPORegisterPrvnickchOsbApi
   */
  public rpoControllerGetLegalPersonBase(ico: string, options?: RawAxiosRequestConfig) {
    return RPORegisterPrvnickchOsbApiFp(this.configuration)
      .rpoControllerGetLegalPersonBase(ico, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a legal person
   * @param {string} ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RPORegisterPrvnickchOsbApi
   */
  public rpoControllerGetLegalPersonBase_1(ico: string, options?: RawAxiosRequestConfig) {
    return RPORegisterPrvnickchOsbApiFp(this.configuration)
      .rpoControllerGetLegalPersonBase_1(ico, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about a legal person
   * @param {string} ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RPORegisterPrvnickchOsbApi
   */
  public rpoControllerGetLegalPerson_2(ico: string, options?: RawAxiosRequestConfig) {
    return RPORegisterPrvnickchOsbApiFp(this.configuration)
      .rpoControllerGetLegalPerson_2(ico, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * RSDRegisterSocilnychDvokApi - axios parameter creator
 * @export
 */
export const RSDRegisterSocilnychDvokApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Information about type of contributions
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    rsdControllerContributions: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/rsd/contributions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Information about state of severely disabled
     * @param {string} firstName First name (if is not known then send \&quot;?\&quot;)
     * @param {string} surname Surname
     * @param {string} toDate Is person disable to date
     * @param {string} [dateOfBirth] Date of birth. (yyyy-mm-dd)
     * @param {string} [birthNumber] Birth number in format without slash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rsdControllerState: async (
      firstName: string,
      surname: string,
      toDate: string,
      dateOfBirth?: string,
      birthNumber?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'firstName' is not null or undefined
      assertParamExists('rsdControllerState', 'firstName', firstName)
      // verify required parameter 'surname' is not null or undefined
      assertParamExists('rsdControllerState', 'surname', surname)
      // verify required parameter 'toDate' is not null or undefined
      assertParamExists('rsdControllerState', 'toDate', toDate)
      const localVarPath = `/rsd/severely-disabled-state`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (firstName !== undefined) {
        localVarQueryParameter['firstName'] = firstName
      }

      if (surname !== undefined) {
        localVarQueryParameter['surname'] = surname
      }

      if (dateOfBirth !== undefined) {
        localVarQueryParameter['dateOfBirth'] = dateOfBirth
      }

      if (birthNumber !== undefined) {
        localVarQueryParameter['birthNumber'] = birthNumber
      }

      if (toDate !== undefined) {
        localVarQueryParameter['toDate'] = toDate
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RSDRegisterSocilnychDvokApi - functional programming interface
 * @export
 */
export const RSDRegisterSocilnychDvokApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RSDRegisterSocilnychDvokApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Information about type of contributions
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async rsdControllerContributions(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rsdControllerContributions(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RSDRegisterSocilnychDvokApi.rsdControllerContributions']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Information about state of severely disabled
     * @param {string} firstName First name (if is not known then send \&quot;?\&quot;)
     * @param {string} surname Surname
     * @param {string} toDate Is person disable to date
     * @param {string} [dateOfBirth] Date of birth. (yyyy-mm-dd)
     * @param {string} [birthNumber] Birth number in format without slash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rsdControllerState(
      firstName: string,
      surname: string,
      toDate: string,
      dateOfBirth?: string,
      birthNumber?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRsdStateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rsdControllerState(
        firstName,
        surname,
        toDate,
        dateOfBirth,
        birthNumber,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RSDRegisterSocilnychDvokApi.rsdControllerState']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * RSDRegisterSocilnychDvokApi - factory interface
 * @export
 */
export const RSDRegisterSocilnychDvokApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RSDRegisterSocilnychDvokApiFp(configuration)
  return {
    /**
     *
     * @summary Information about type of contributions
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    rsdControllerContributions(options?: any): AxiosPromise<void> {
      return localVarFp
        .rsdControllerContributions(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Information about state of severely disabled
     * @param {string} firstName First name (if is not known then send \&quot;?\&quot;)
     * @param {string} surname Surname
     * @param {string} toDate Is person disable to date
     * @param {string} [dateOfBirth] Date of birth. (yyyy-mm-dd)
     * @param {string} [birthNumber] Birth number in format without slash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rsdControllerState(
      firstName: string,
      surname: string,
      toDate: string,
      dateOfBirth?: string,
      birthNumber?: string,
      options?: any
    ): AxiosPromise<ResponseRsdStateDto> {
      return localVarFp
        .rsdControllerState(firstName, surname, toDate, dateOfBirth, birthNumber, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RSDRegisterSocilnychDvokApi - object-oriented interface
 * @export
 * @class RSDRegisterSocilnychDvokApi
 * @extends {BaseAPI}
 */
export class RSDRegisterSocilnychDvokApi extends BaseAPI {
  /**
   *
   * @summary Information about type of contributions
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof RSDRegisterSocilnychDvokApi
   */
  public rsdControllerContributions(options?: RawAxiosRequestConfig) {
    return RSDRegisterSocilnychDvokApiFp(this.configuration)
      .rsdControllerContributions(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Information about state of severely disabled
   * @param {string} firstName First name (if is not known then send \&quot;?\&quot;)
   * @param {string} surname Surname
   * @param {string} toDate Is person disable to date
   * @param {string} [dateOfBirth] Date of birth. (yyyy-mm-dd)
   * @param {string} [birthNumber] Birth number in format without slash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RSDRegisterSocilnychDvokApi
   */
  public rsdControllerState(
    firstName: string,
    surname: string,
    toDate: string,
    dateOfBirth?: string,
    birthNumber?: string,
    options?: RawAxiosRequestConfig
  ) {
    return RSDRegisterSocilnychDvokApiFp(this.configuration)
      .rsdControllerState(firstName, surname, toDate, dateOfBirth, birthNumber, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
