import { ApiProperty } from '@nestjs/swagger'

export const COGNITO_TYPE_ERROR = 'Unexpected Cognito User Account Type'

// copied over from nest-forms-backend
export enum ErrorsEnum {
  NOT_FOUND_ERROR = 'NOT_FOUND_ERROR',
  DATABASE_ERROR = 'DATABASE_ERROR',
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',
  UNAUTHORIZED_ERROR = 'UNAUTHORIZED_ERROR',
  UNPROCESSABLE_ENTITY_ERROR = 'UNPROCESSABLE_ENTITY_ERROR',
  BAD_REQUEST_ERROR = 'BAD_REQUEST_ERROR',
}

export enum CustomErrorVerificationTypesEnum {
  RFO_ACCESS_ERROR = 'RFO_ACCESS_ERROR',
  RFO_NOT_RESPONDING = 'RFO_NOT_RESPONDING',
  RPO_NOT_RESPONDING = 'RPO_NOT_RESPONDING',
  DEAD_PERSON = 'DEAD_PERSON',
  BIRTH_NUMBER_AND_IDENTITY_CARD_INCONSISTENCY = 'BIRTH_NUMBER_AND_IDENTITY_CARD_INCONSISTENCY',
  BIRTHNUMBER_IFO_DUPLICITY = 'BIRTHNUMBER_IFO_DUPLICITY',
  BIRTHNUMBER_ICO_DUPLICITY = 'BIRTHNUMBER_ICO_DUPLICITY',
  BIRTH_NUMBER_NOT_EXISTS = 'BIRTH_NUMBER_NOT_EXISTS',
  BIRTH_NUMBER_WRONG_FORMAT = 'BIRTH_NUMBER_WRONG_FORMAT',
  DATABASE_ERROR = 'DATABASE_ERROR',
  INVALID_CAPTCHA = 'INVALID_CAPTCHA',
  VERIFY_EID_ERROR = 'VERIFY_EID_ERROR',
  UNEXPECTED_UPVS_RESPONSE = 'UNEXPECTED_UPVS_RESPONSE',
  LEGAL_ENTITIES_NOT_FOUND = 'LEGAL_ENTITIES_NOT_FOUND',
  USER_NOT_FOUND_IN_LEGAL_ENTITY = 'USER_NOT_FOUND_IN_LEGAL_ENTITY',
  NO_IF_FOUND_FOR_STATUTORY = 'NO_IF_FOUND_FOR_STATUTORY',
  UNEXPECTED_MAGPROXY_RESPONSE_ERROR = 'UNEXPECTED_MAGPROXY_RESPONSE_ERROR',
  RPO_FIELD_NOT_EXISTS = 'RPO_FIELD_NOT_EXISTS',
  ICO_NOT_PROVIDED = 'ICO_NOT_PROVIDED',
  IFO_NOT_PROVIDED = 'IFO_NOT_PROVIDED',
  VERIFICATION_DATA_NOT_PROVIDED = 'VERIFICATION_DATA_NOT_PROVIDED',
}

export enum CustomErrorAdminTypesEnum {
  BIRTH_NUMBER_NOT_FOUND = 'BIRTH_NUMBER_NOT_FOUND',
}

export enum CustomErrorUserEnum {
  USER_NOT_FOUND = 'USER_NOT_FOUND',
  NO_EXTERNAL_ID = 'NO_EXTERNAL_ID'
}

export enum CustomErrorSendToQueueEnum {
  COGNITO_CHANGE_TIER_ERROR = 'COGNITO_CHANGE_TIER_ERROR',
  RABBIT_PUSH_DATA_ERROR = 'RABBIT_PUSH_DATA_ERROR',
}

export class ResponseInternalServerErrorDto {
  @ApiProperty({
    description: 'statusCode',
    default: 500,
  })
  statusCode!: number

  @ApiProperty({
    description: 'Message about error',
    default: 'Internal server error',
  })
  message!: string
}

export class ResponseErrorDto {
  statusCode!: number

  status!: string

  message!: string

  errorName!: CustomErrorVerificationTypesEnum
}
