/* tslint:disable */
/* eslint-disable */
/**
 * Nest Forms Backend
 * Backend od processing forms and handling the attachments
 *
 * The version of the OpenAPI document: 1.0
 * Contact: inovacie@bratislava.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface BadRequestDecoratorErrorDto
 */
export interface BadRequestDecoratorErrorDto {
  /**
   *
   * @type {number}
   * @memberof BadRequestDecoratorErrorDto
   */
  statusCode: number
  /**
   *
   * @type {Array<string>}
   * @memberof BadRequestDecoratorErrorDto
   */
  message: Array<string>
  /**
   *
   * @type {string}
   * @memberof BadRequestDecoratorErrorDto
   */
  error: string
}
/**
 *
 * @export
 * @interface CreateFormEidRequestDto
 */
export interface CreateFormEidRequestDto {
  /**
   * Version of Schema
   * @type {string}
   * @memberof CreateFormEidRequestDto
   */
  schemaVersionId: string
  /**
   * Email, if it is not registered user by city account, and it is logged in only by Eid
   * @type {string}
   * @memberof CreateFormEidRequestDto
   */
  email: string
}
/**
 *
 * @export
 * @interface CreateFormRequestDto
 */
export interface CreateFormRequestDto {
  /**
   * Version of Schema
   * @type {string}
   * @memberof CreateFormRequestDto
   */
  schemaVersionId: string
}
/**
 *
 * @export
 * @interface DatabaseErrorDto
 */
export interface DatabaseErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof DatabaseErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof DatabaseErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof DatabaseErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof DatabaseErrorDto
   */
  errorName: DatabaseErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof DatabaseErrorDto
   */
  object?: object
}

export const DatabaseErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type DatabaseErrorDtoErrorNameEnum =
  (typeof DatabaseErrorDtoErrorNameEnum)[keyof typeof DatabaseErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface DeleteFileResponseData
 */
export interface DeleteFileResponseData {
  /**
   * scan result
   * @type {string}
   * @memberof DeleteFileResponseData
   */
  status: DeleteFileResponseDataStatusEnum
  /**
   * Real file name of the file, but is used only for display
   * @type {string}
   * @memberof DeleteFileResponseData
   */
  fileName: string
  /**
   * Hashed file uid under which is file stored in minio
   * @type {string}
   * @memberof DeleteFileResponseData
   */
  fileUid: string
  /**
   * Form type
   * @type {string}
   * @memberof DeleteFileResponseData
   */
  pospId: string
  /**
   * Identifier of sent form
   * @type {string}
   * @memberof DeleteFileResponseData
   */
  formId: string
  /**
   * File size in bytes
   * @type {number}
   * @memberof DeleteFileResponseData
   */
  fileSize: number
  /**
   * more info
   * @type {string}
   * @memberof DeleteFileResponseData
   */
  message: string
}

export const DeleteFileResponseDataStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type DeleteFileResponseDataStatusEnum =
  (typeof DeleteFileResponseDataStatusEnum)[keyof typeof DeleteFileResponseDataStatusEnum]

/**
 *
 * @export
 * @interface DownloadTokenResponseDataDto
 */
export interface DownloadTokenResponseDataDto {
  /**
   * Download jwt token
   * @type {string}
   * @memberof DownloadTokenResponseDataDto
   */
  jwt: string
}
/**
 *
 * @export
 * @interface FileAlreadyProcessedErrorDto
 */
export interface FileAlreadyProcessedErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileAlreadyProcessedErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileAlreadyProcessedErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileAlreadyProcessedErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileAlreadyProcessedErrorDto
   */
  errorName: FileAlreadyProcessedErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileAlreadyProcessedErrorDto
   */
  object?: object
}

export const FileAlreadyProcessedErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileAlreadyProcessedErrorDtoErrorNameEnum =
  (typeof FileAlreadyProcessedErrorDtoErrorNameEnum)[keyof typeof FileAlreadyProcessedErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileByScannerIdNotFoundErrorDto
 */
export interface FileByScannerIdNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileByScannerIdNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileByScannerIdNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileByScannerIdNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileByScannerIdNotFoundErrorDto
   */
  errorName: FileByScannerIdNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileByScannerIdNotFoundErrorDto
   */
  object?: object
}

export const FileByScannerIdNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileByScannerIdNotFoundErrorDtoErrorNameEnum =
  (typeof FileByScannerIdNotFoundErrorDtoErrorNameEnum)[keyof typeof FileByScannerIdNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileHasUnsupportedMimeTypeErrorDto
 */
export interface FileHasUnsupportedMimeTypeErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileHasUnsupportedMimeTypeErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileHasUnsupportedMimeTypeErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileHasUnsupportedMimeTypeErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileHasUnsupportedMimeTypeErrorDto
   */
  errorName: FileHasUnsupportedMimeTypeErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileHasUnsupportedMimeTypeErrorDto
   */
  object?: object
}

export const FileHasUnsupportedMimeTypeErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileHasUnsupportedMimeTypeErrorDtoErrorNameEnum =
  (typeof FileHasUnsupportedMimeTypeErrorDtoErrorNameEnum)[keyof typeof FileHasUnsupportedMimeTypeErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileIdAlreadyExistsErrorDto
 */
export interface FileIdAlreadyExistsErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileIdAlreadyExistsErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileIdAlreadyExistsErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileIdAlreadyExistsErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileIdAlreadyExistsErrorDto
   */
  errorName: FileIdAlreadyExistsErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileIdAlreadyExistsErrorDto
   */
  object?: object
}

export const FileIdAlreadyExistsErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileIdAlreadyExistsErrorDtoErrorNameEnum =
  (typeof FileIdAlreadyExistsErrorDtoErrorNameEnum)[keyof typeof FileIdAlreadyExistsErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileInMinioNotFoundErrorDto
 */
export interface FileInMinioNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileInMinioNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileInMinioNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileInMinioNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileInMinioNotFoundErrorDto
   */
  errorName: FileInMinioNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileInMinioNotFoundErrorDto
   */
  object?: object
}

export const FileInMinioNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileInMinioNotFoundErrorDtoErrorNameEnum =
  (typeof FileInMinioNotFoundErrorDtoErrorNameEnum)[keyof typeof FileInMinioNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileInScannerNotFoundErrorDto
 */
export interface FileInScannerNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileInScannerNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileInScannerNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileInScannerNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileInScannerNotFoundErrorDto
   */
  errorName: FileInScannerNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileInScannerNotFoundErrorDto
   */
  object?: object
}

export const FileInScannerNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileInScannerNotFoundErrorDtoErrorNameEnum =
  (typeof FileInScannerNotFoundErrorDtoErrorNameEnum)[keyof typeof FileInScannerNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileNotFoundErrorDto
 */
export interface FileNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileNotFoundErrorDto
   */
  errorName: FileNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileNotFoundErrorDto
   */
  object?: object
}

export const FileNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileNotFoundErrorDtoErrorNameEnum =
  (typeof FileNotFoundErrorDtoErrorNameEnum)[keyof typeof FileNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileOrUserNotFoundErrorDto
 */
export interface FileOrUserNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileOrUserNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileOrUserNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileOrUserNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileOrUserNotFoundErrorDto
   */
  errorName: FileOrUserNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileOrUserNotFoundErrorDto
   */
  object?: object
}

export const FileOrUserNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileOrUserNotFoundErrorDtoErrorNameEnum =
  (typeof FileOrUserNotFoundErrorDtoErrorNameEnum)[keyof typeof FileOrUserNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileSizeExceededErrorDto
 */
export interface FileSizeExceededErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileSizeExceededErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileSizeExceededErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileSizeExceededErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileSizeExceededErrorDto
   */
  errorName: FileSizeExceededErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileSizeExceededErrorDto
   */
  object?: object
}

export const FileSizeExceededErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileSizeExceededErrorDtoErrorNameEnum =
  (typeof FileSizeExceededErrorDtoErrorNameEnum)[keyof typeof FileSizeExceededErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileSizeTooLargeErrorDto
 */
export interface FileSizeTooLargeErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileSizeTooLargeErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileSizeTooLargeErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileSizeTooLargeErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileSizeTooLargeErrorDto
   */
  errorName: FileSizeTooLargeErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileSizeTooLargeErrorDto
   */
  object?: object
}

export const FileSizeTooLargeErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileSizeTooLargeErrorDtoErrorNameEnum =
  (typeof FileSizeTooLargeErrorDtoErrorNameEnum)[keyof typeof FileSizeTooLargeErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileSizeZeroErrorDto
 */
export interface FileSizeZeroErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileSizeZeroErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileSizeZeroErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileSizeZeroErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileSizeZeroErrorDto
   */
  errorName: FileSizeZeroErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileSizeZeroErrorDto
   */
  object?: object
}

export const FileSizeZeroErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileSizeZeroErrorDtoErrorNameEnum =
  (typeof FileSizeZeroErrorDtoErrorNameEnum)[keyof typeof FileSizeZeroErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileWrongParamsErrorDto
 */
export interface FileWrongParamsErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileWrongParamsErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileWrongParamsErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileWrongParamsErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileWrongParamsErrorDto
   */
  errorName: FileWrongParamsErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileWrongParamsErrorDto
   */
  object?: object
}

export const FileWrongParamsErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileWrongParamsErrorDtoErrorNameEnum =
  (typeof FileWrongParamsErrorDtoErrorNameEnum)[keyof typeof FileWrongParamsErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FileWrongStatusNotAcceptedErrorDto
 */
export interface FileWrongStatusNotAcceptedErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FileWrongStatusNotAcceptedErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FileWrongStatusNotAcceptedErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FileWrongStatusNotAcceptedErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FileWrongStatusNotAcceptedErrorDto
   */
  errorName: FileWrongStatusNotAcceptedErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FileWrongStatusNotAcceptedErrorDto
   */
  object?: object
}

export const FileWrongStatusNotAcceptedErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FileWrongStatusNotAcceptedErrorDtoErrorNameEnum =
  (typeof FileWrongStatusNotAcceptedErrorDtoErrorNameEnum)[keyof typeof FileWrongStatusNotAcceptedErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerDeleteFile500Response
 */
export interface FilesControllerDeleteFile500Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerDeleteFile500Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerDeleteFile500Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerDeleteFile500Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerDeleteFile500Response
   */
  errorName: FilesControllerDeleteFile500ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerDeleteFile500Response
   */
  object?: object
}

export const FilesControllerDeleteFile500ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerDeleteFile500ResponseErrorNameEnum =
  (typeof FilesControllerDeleteFile500ResponseErrorNameEnum)[keyof typeof FilesControllerDeleteFile500ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerDownloadFile400Response
 */
export interface FilesControllerDownloadFile400Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerDownloadFile400Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerDownloadFile400Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerDownloadFile400Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerDownloadFile400Response
   */
  errorName: FilesControllerDownloadFile400ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerDownloadFile400Response
   */
  object?: object
}

export const FilesControllerDownloadFile400ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerDownloadFile400ResponseErrorNameEnum =
  (typeof FilesControllerDownloadFile400ResponseErrorNameEnum)[keyof typeof FilesControllerDownloadFile400ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerDownloadFile404Response
 */
export interface FilesControllerDownloadFile404Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerDownloadFile404Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerDownloadFile404Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerDownloadFile404Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerDownloadFile404Response
   */
  errorName: FilesControllerDownloadFile404ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerDownloadFile404Response
   */
  object?: object
}

export const FilesControllerDownloadFile404ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerDownloadFile404ResponseErrorNameEnum =
  (typeof FilesControllerDownloadFile404ResponseErrorNameEnum)[keyof typeof FilesControllerDownloadFile404ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerDownloadToken404Response
 */
export interface FilesControllerDownloadToken404Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerDownloadToken404Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerDownloadToken404Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerDownloadToken404Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerDownloadToken404Response
   */
  errorName: FilesControllerDownloadToken404ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerDownloadToken404Response
   */
  object?: object
}

export const FilesControllerDownloadToken404ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerDownloadToken404ResponseErrorNameEnum =
  (typeof FilesControllerDownloadToken404ResponseErrorNameEnum)[keyof typeof FilesControllerDownloadToken404ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerPostFileToScanner400Response
 */
export interface FilesControllerPostFileToScanner400Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerPostFileToScanner400Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerPostFileToScanner400Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerPostFileToScanner400Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerPostFileToScanner400Response
   */
  errorName: FilesControllerPostFileToScanner400ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerPostFileToScanner400Response
   */
  object?: object
}

export const FilesControllerPostFileToScanner400ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerPostFileToScanner400ResponseErrorNameEnum =
  (typeof FilesControllerPostFileToScanner400ResponseErrorNameEnum)[keyof typeof FilesControllerPostFileToScanner400ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerPostFileToScanner404Response
 */
export interface FilesControllerPostFileToScanner404Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerPostFileToScanner404Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerPostFileToScanner404Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerPostFileToScanner404Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerPostFileToScanner404Response
   */
  errorName: FilesControllerPostFileToScanner404ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerPostFileToScanner404Response
   */
  object?: object
}

export const FilesControllerPostFileToScanner404ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerPostFileToScanner404ResponseErrorNameEnum =
  (typeof FilesControllerPostFileToScanner404ResponseErrorNameEnum)[keyof typeof FilesControllerPostFileToScanner404ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerPostFileToScanner500Response
 */
export interface FilesControllerPostFileToScanner500Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerPostFileToScanner500Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerPostFileToScanner500Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerPostFileToScanner500Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerPostFileToScanner500Response
   */
  errorName: FilesControllerPostFileToScanner500ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerPostFileToScanner500Response
   */
  object?: object
}

export const FilesControllerPostFileToScanner500ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerPostFileToScanner500ResponseErrorNameEnum =
  (typeof FilesControllerPostFileToScanner500ResponseErrorNameEnum)[keyof typeof FilesControllerPostFileToScanner500ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FilesControllerUploadFile400Response
 */
export interface FilesControllerUploadFile400Response {
  /**
   * Status Code
   * @type {number}
   * @memberof FilesControllerUploadFile400Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FilesControllerUploadFile400Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FilesControllerUploadFile400Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FilesControllerUploadFile400Response
   */
  errorName: FilesControllerUploadFile400ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FilesControllerUploadFile400Response
   */
  object?: object
  /**
   *
   * @type {string}
   * @memberof FilesControllerUploadFile400Response
   */
  error: string
}

export const FilesControllerUploadFile400ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FilesControllerUploadFile400ResponseErrorNameEnum =
  (typeof FilesControllerUploadFile400ResponseErrorNameEnum)[keyof typeof FilesControllerUploadFile400ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface FormNotDraftErrorDto
 */
export interface FormNotDraftErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FormNotDraftErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FormNotDraftErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FormNotDraftErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FormNotDraftErrorDto
   */
  errorName: FormNotDraftErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FormNotDraftErrorDto
   */
  object?: object
}

export const FormNotDraftErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FormNotDraftErrorDtoErrorNameEnum =
  (typeof FormNotDraftErrorDtoErrorNameEnum)[keyof typeof FormNotDraftErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FormNotFoundErrorDto
 */
export interface FormNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FormNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FormNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FormNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FormNotFoundErrorDto
   */
  errorName: FormNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FormNotFoundErrorDto
   */
  object?: object
}

export const FormNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FormNotFoundErrorDtoErrorNameEnum =
  (typeof FormNotFoundErrorDtoErrorNameEnum)[keyof typeof FormNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FormOrFileOrUserNotFoundErrorDto
 */
export interface FormOrFileOrUserNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FormOrFileOrUserNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FormOrFileOrUserNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FormOrFileOrUserNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FormOrFileOrUserNotFoundErrorDto
   */
  errorName: FormOrFileOrUserNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FormOrFileOrUserNotFoundErrorDto
   */
  object?: object
}

export const FormOrFileOrUserNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FormOrFileOrUserNotFoundErrorDtoErrorNameEnum =
  (typeof FormOrFileOrUserNotFoundErrorDtoErrorNameEnum)[keyof typeof FormOrFileOrUserNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface FormOrUserNotFoundErrorDto
 */
export interface FormOrUserNotFoundErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof FormOrUserNotFoundErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof FormOrUserNotFoundErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof FormOrUserNotFoundErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof FormOrUserNotFoundErrorDto
   */
  errorName: FormOrUserNotFoundErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof FormOrUserNotFoundErrorDto
   */
  object?: object
}

export const FormOrUserNotFoundErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type FormOrUserNotFoundErrorDtoErrorNameEnum =
  (typeof FormOrUserNotFoundErrorDtoErrorNameEnum)[keyof typeof FormOrUserNotFoundErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @enum {string}
 */

export const FormState = {
  Draft: 'DRAFT',
  Queued: 'QUEUED',
  DeliveredNases: 'DELIVERED_NASES',
  DeliveredGinis: 'DELIVERED_GINIS',
  ReadyForProcessing: 'READY_FOR_PROCESSING',
  Processing: 'PROCESSING',
  Finished: 'FINISHED',
  Rejected: 'REJECTED',
  Error: 'ERROR',
} as const

export type FormState = (typeof FormState)[keyof typeof FormState]

/**
 *
 * @export
 * @interface GetFileResponseDto
 */
export interface GetFileResponseDto {
  /**
   * Real file name of the file, but is used only for display
   * @type {string}
   * @memberof GetFileResponseDto
   */
  fileName: string
  /**
   * Hashed file uid under which is file stored in minio
   * @type {string}
   * @memberof GetFileResponseDto
   */
  fileUid: string
  /**
   * Form type
   * @type {string}
   * @memberof GetFileResponseDto
   */
  pospId: string
  /**
   * Identifier of sent form
   * @type {string}
   * @memberof GetFileResponseDto
   */
  formId: string
  /**
   * External Id of user
   * @type {string}
   * @memberof GetFileResponseDto
   */
  userExternalId: string | null
  /**
   * scan result
   * @type {string}
   * @memberof GetFileResponseDto
   */
  status: GetFileResponseDtoStatusEnum
  /**
   * File size in bytes
   * @type {number}
   * @memberof GetFileResponseDto
   */
  fileSize: number
  /**
   * id of the record in db
   * @type {string}
   * @memberof GetFileResponseDto
   */
  id: string
  /**
   * File id under which is file stored in the scanner
   * @type {string}
   * @memberof GetFileResponseDto
   */
  scannerId?: string | null
  /**
   * Date when file was created
   * @type {string}
   * @memberof GetFileResponseDto
   */
  createdAt: string
  /**
   * Date when file was updated
   * @type {string}
   * @memberof GetFileResponseDto
   */
  updatedAt: string
}

export const GetFileResponseDtoStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type GetFileResponseDtoStatusEnum =
  (typeof GetFileResponseDtoStatusEnum)[keyof typeof GetFileResponseDtoStatusEnum]

/**
 *
 * @export
 * @interface GetFileStatusResponseDto
 */
export interface GetFileStatusResponseDto {
  /**
   * scan result
   * @type {string}
   * @memberof GetFileStatusResponseDto
   */
  status: GetFileStatusResponseDtoStatusEnum
}

export const GetFileStatusResponseDtoStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type GetFileStatusResponseDtoStatusEnum =
  (typeof GetFileStatusResponseDtoStatusEnum)[keyof typeof GetFileStatusResponseDtoStatusEnum]

/**
 *
 * @export
 * @interface GetFormResponseDto
 */
export interface GetFormResponseDto {
  /**
   * Change email, on which you can be contacted
   * @type {string}
   * @memberof GetFormResponseDto
   */
  email: string | null
  /**
   * Id of record
   * @type {string}
   * @memberof GetFormResponseDto
   */
  id: string
  /**
   * Create date of record
   * @type {string}
   * @memberof GetFormResponseDto
   */
  createdAt: string
  /**
   * Update date of record
   * @type {string}
   * @memberof GetFormResponseDto
   */
  updatedAt: string
  /**
   * Id of send form from other system, (probably ginis)
   * @type {string}
   * @memberof GetFormResponseDto
   */
  externalId: string | null
  /**
   * User ID (from cognito) who submit this form, can be empty, if it was submitted by user through eID
   * @type {string}
   * @memberof GetFormResponseDto
   */
  userExternalId: string | null
  /**
   * Uri for defining electronic sendbox, if person has it
   * @type {string}
   * @memberof GetFormResponseDto
   */
  uri: string | null
  /**
   * State of form
   * @type {string}
   * @memberof GetFormResponseDto
   */
  state: GetFormResponseDtoStateEnum
  /**
   * Specific error type
   * @type {string}
   * @memberof GetFormResponseDto
   */
  error: GetFormResponseDtoErrorEnum
  /**
   * Data from ginis saved in our db
   * @type {string}
   * @memberof GetFormResponseDto
   */
  formDataGinis: string | null
  /**
   * Technical NASES id of sender
   * @type {string}
   * @memberof GetFormResponseDto
   */
  senderId: string | null
  /**
   * Technical NASES id of recipient
   * @type {string}
   * @memberof GetFormResponseDto
   */
  recipientId: string | null
  /**
   * end of submition
   * @type {string}
   * @memberof GetFormResponseDto
   */
  finishSubmission: string | null
  /**
   * Schema version Id.
   * @type {string}
   * @memberof GetFormResponseDto
   */
  schemaVersionId: string
}

export const GetFormResponseDtoStateEnum = {
  Draft: 'DRAFT',
  Queued: 'QUEUED',
  DeliveredNases: 'DELIVERED_NASES',
  DeliveredGinis: 'DELIVERED_GINIS',
  ReadyForProcessing: 'READY_FOR_PROCESSING',
  Processing: 'PROCESSING',
  Finished: 'FINISHED',
  Rejected: 'REJECTED',
  Error: 'ERROR',
} as const

export type GetFormResponseDtoStateEnum =
  (typeof GetFormResponseDtoStateEnum)[keyof typeof GetFormResponseDtoStateEnum]
export const GetFormResponseDtoErrorEnum = {
  None: 'NONE',
  RabbitmqMaxTries: 'RABBITMQ_MAX_TRIES',
  FilesNotYetScanned: 'FILES_NOT_YET_SCANNED',
  UnableToScanFiles: 'UNABLE_TO_SCAN_FILES',
  InfectedFiles: 'INFECTED_FILES',
  NasesSendError: 'NASES_SEND_ERROR',
} as const

export type GetFormResponseDtoErrorEnum =
  (typeof GetFormResponseDtoErrorEnum)[keyof typeof GetFormResponseDtoErrorEnum]

/**
 *
 * @export
 * @interface GetFormsResponseDto
 */
export interface GetFormsResponseDto {
  /**
   * actual page
   * @type {number}
   * @memberof GetFormsResponseDto
   */
  currentPage: number
  /**
   * number of items in one page
   * @type {number}
   * @memberof GetFormsResponseDto
   */
  pagination: number
  /**
   * Total number of items
   * @type {number}
   * @memberof GetFormsResponseDto
   */
  countPages: number
  /**
   * Items
   * @type {Array<GetFormResponseDto>}
   * @memberof GetFormsResponseDto
   */
  items: Array<GetFormResponseDto>
}
/**
 *
 * @export
 * @interface InvalidJwtTokenErrorDto
 */
export interface InvalidJwtTokenErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof InvalidJwtTokenErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof InvalidJwtTokenErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof InvalidJwtTokenErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof InvalidJwtTokenErrorDto
   */
  errorName: InvalidJwtTokenErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof InvalidJwtTokenErrorDto
   */
  object?: object
}

export const InvalidJwtTokenErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type InvalidJwtTokenErrorDtoErrorNameEnum =
  (typeof InvalidJwtTokenErrorDtoErrorNameEnum)[keyof typeof InvalidJwtTokenErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface InvalidOrExpiredJwtTokenErrorDto
 */
export interface InvalidOrExpiredJwtTokenErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof InvalidOrExpiredJwtTokenErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof InvalidOrExpiredJwtTokenErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof InvalidOrExpiredJwtTokenErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof InvalidOrExpiredJwtTokenErrorDto
   */
  errorName: InvalidOrExpiredJwtTokenErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof InvalidOrExpiredJwtTokenErrorDto
   */
  object?: object
}

export const InvalidOrExpiredJwtTokenErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type InvalidOrExpiredJwtTokenErrorDtoErrorNameEnum =
  (typeof InvalidOrExpiredJwtTokenErrorDtoErrorNameEnum)[keyof typeof InvalidOrExpiredJwtTokenErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface JsonToXmlRequestDto
 */
export interface JsonToXmlRequestDto {
  /**
   * Form values in JSON
   * @type {object}
   * @memberof JsonToXmlRequestDto
   */
  jsonForm: object
}
/**
 *
 * @export
 * @interface JsonToXmlResponseDto
 */
export interface JsonToXmlResponseDto {
  /**
   * Form values in XML
   * @type {string}
   * @memberof JsonToXmlResponseDto
   */
  xmlForm: string
}
/**
 *
 * @export
 * @interface NasesControllerGetEidJwt401Response
 */
export interface NasesControllerGetEidJwt401Response {
  /**
   * Status Code
   * @type {number}
   * @memberof NasesControllerGetEidJwt401Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NasesControllerGetEidJwt401Response
   */
  message: string
}
/**
 *
 * @export
 * @interface NasesControllerGetForm404Response
 */
export interface NasesControllerGetForm404Response {
  /**
   * Status Code
   * @type {number}
   * @memberof NasesControllerGetForm404Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NasesControllerGetForm404Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NasesControllerGetForm404Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NasesControllerGetForm404Response
   */
  errorName: NasesControllerGetForm404ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NasesControllerGetForm404Response
   */
  object?: object
}

export const NasesControllerGetForm404ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NasesControllerGetForm404ResponseErrorNameEnum =
  (typeof NasesControllerGetForm404ResponseErrorNameEnum)[keyof typeof NasesControllerGetForm404ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface NasesControllerGetForms500Response
 */
export interface NasesControllerGetForms500Response {
  /**
   * Status Code
   * @type {number}
   * @memberof NasesControllerGetForms500Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NasesControllerGetForms500Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NasesControllerGetForms500Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NasesControllerGetForms500Response
   */
  errorName: NasesControllerGetForms500ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NasesControllerGetForms500Response
   */
  object?: object
}

export const NasesControllerGetForms500ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NasesControllerGetForms500ResponseErrorNameEnum =
  (typeof NasesControllerGetForms500ResponseErrorNameEnum)[keyof typeof NasesControllerGetForms500ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface NasesControllerSendAndUpdateForm400Response
 */
export interface NasesControllerSendAndUpdateForm400Response {
  /**
   * Status Code
   * @type {number}
   * @memberof NasesControllerSendAndUpdateForm400Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NasesControllerSendAndUpdateForm400Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NasesControllerSendAndUpdateForm400Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NasesControllerSendAndUpdateForm400Response
   */
  errorName: NasesControllerSendAndUpdateForm400ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NasesControllerSendAndUpdateForm400Response
   */
  object?: object
}

export const NasesControllerSendAndUpdateForm400ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NasesControllerSendAndUpdateForm400ResponseErrorNameEnum =
  (typeof NasesControllerSendAndUpdateForm400ResponseErrorNameEnum)[keyof typeof NasesControllerSendAndUpdateForm400ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface NasesControllerSendAndUpdateForm422Response
 */
export interface NasesControllerSendAndUpdateForm422Response {
  /**
   * Status Code
   * @type {number}
   * @memberof NasesControllerSendAndUpdateForm422Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NasesControllerSendAndUpdateForm422Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NasesControllerSendAndUpdateForm422Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NasesControllerSendAndUpdateForm422Response
   */
  errorName: NasesControllerSendAndUpdateForm422ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NasesControllerSendAndUpdateForm422Response
   */
  object?: object
}

export const NasesControllerSendAndUpdateForm422ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NasesControllerSendAndUpdateForm422ResponseErrorNameEnum =
  (typeof NasesControllerSendAndUpdateForm422ResponseErrorNameEnum)[keyof typeof NasesControllerSendAndUpdateForm422ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface NasesControllerSendForm422Response
 */
export interface NasesControllerSendForm422Response {
  /**
   * Status Code
   * @type {number}
   * @memberof NasesControllerSendForm422Response
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NasesControllerSendForm422Response
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NasesControllerSendForm422Response
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NasesControllerSendForm422Response
   */
  errorName: NasesControllerSendForm422ResponseErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NasesControllerSendForm422Response
   */
  object?: object
}

export const NasesControllerSendForm422ResponseErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NasesControllerSendForm422ResponseErrorNameEnum =
  (typeof NasesControllerSendForm422ResponseErrorNameEnum)[keyof typeof NasesControllerSendForm422ResponseErrorNameEnum]

/**
 *
 * @export
 * @interface NoFileUploadDataErrorDto
 */
export interface NoFileUploadDataErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof NoFileUploadDataErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NoFileUploadDataErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NoFileUploadDataErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NoFileUploadDataErrorDto
   */
  errorName: NoFileUploadDataErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NoFileUploadDataErrorDto
   */
  object?: object
}

export const NoFileUploadDataErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NoFileUploadDataErrorDtoErrorNameEnum =
  (typeof NoFileUploadDataErrorDtoErrorNameEnum)[keyof typeof NoFileUploadDataErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface NoFormXmlDataErrorDto
 */
export interface NoFormXmlDataErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof NoFormXmlDataErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof NoFormXmlDataErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof NoFormXmlDataErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof NoFormXmlDataErrorDto
   */
  errorName: NoFormXmlDataErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof NoFormXmlDataErrorDto
   */
  object?: object
}

export const NoFormXmlDataErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type NoFormXmlDataErrorDtoErrorNameEnum =
  (typeof NoFormXmlDataErrorDtoErrorNameEnum)[keyof typeof NoFormXmlDataErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface PostFileRequestDto
 */
export interface PostFileRequestDto {
  /**
   * Real file name of the file, but is used only for display
   * @type {string}
   * @memberof PostFileRequestDto
   */
  fileName: string
  /**
   * Hashed file uid under which is file stored in minio
   * @type {string}
   * @memberof PostFileRequestDto
   */
  fileUid: string
  /**
   * Form type
   * @type {string}
   * @memberof PostFileRequestDto
   */
  pospId: string
  /**
   * Identifier of sent form
   * @type {string}
   * @memberof PostFileRequestDto
   */
  formId: string
  /**
   * Desired id of file in db
   * @type {string}
   * @memberof PostFileRequestDto
   */
  fileId: string
  /**
   * File size in bytes
   * @type {number}
   * @memberof PostFileRequestDto
   */
  fileSize: number
}
/**
 *
 * @export
 * @interface PostFileResponseDto
 */
export interface PostFileResponseDto {
  /**
   * Real file name of the file, but is used only for display
   * @type {string}
   * @memberof PostFileResponseDto
   */
  fileName: string
  /**
   * Hashed file uid under which is file stored in minio
   * @type {string}
   * @memberof PostFileResponseDto
   */
  fileUid: string
  /**
   * Form type
   * @type {string}
   * @memberof PostFileResponseDto
   */
  pospId: string
  /**
   * Identifier of sent form
   * @type {string}
   * @memberof PostFileResponseDto
   */
  formId: string
  /**
   * External Id of user
   * @type {string}
   * @memberof PostFileResponseDto
   */
  userExternalId: string | null
  /**
   * scan result
   * @type {string}
   * @memberof PostFileResponseDto
   */
  status: PostFileResponseDtoStatusEnum
  /**
   * File size in bytes
   * @type {number}
   * @memberof PostFileResponseDto
   */
  fileSize: number
  /**
   * id of the record in db
   * @type {string}
   * @memberof PostFileResponseDto
   */
  id: string
  /**
   * File id under which is file stored in the scanner
   * @type {string}
   * @memberof PostFileResponseDto
   */
  scannerId?: string | null
  /**
   * Date when file was created
   * @type {string}
   * @memberof PostFileResponseDto
   */
  createdAt: string
  /**
   * Date when file was updated
   * @type {string}
   * @memberof PostFileResponseDto
   */
  updatedAt: string
  /**
   * more info
   * @type {string}
   * @memberof PostFileResponseDto
   */
  message: string
}

export const PostFileResponseDtoStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type PostFileResponseDtoStatusEnum =
  (typeof PostFileResponseDtoStatusEnum)[keyof typeof PostFileResponseDtoStatusEnum]

/**
 *
 * @export
 * @interface ProblemWithScannerErrorDto
 */
export interface ProblemWithScannerErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof ProblemWithScannerErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof ProblemWithScannerErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof ProblemWithScannerErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof ProblemWithScannerErrorDto
   */
  errorName: ProblemWithScannerErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof ProblemWithScannerErrorDto
   */
  object?: object
}

export const ProblemWithScannerErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type ProblemWithScannerErrorDtoErrorNameEnum =
  (typeof ProblemWithScannerErrorDtoErrorNameEnum)[keyof typeof ProblemWithScannerErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface ScannerNoResponseErrorDto
 */
export interface ScannerNoResponseErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof ScannerNoResponseErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof ScannerNoResponseErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof ScannerNoResponseErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof ScannerNoResponseErrorDto
   */
  errorName: ScannerNoResponseErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof ScannerNoResponseErrorDto
   */
  object?: object
}

export const ScannerNoResponseErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type ScannerNoResponseErrorDtoErrorNameEnum =
  (typeof ScannerNoResponseErrorDtoErrorNameEnum)[keyof typeof ScannerNoResponseErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface SchemaNotFound
 */
export interface SchemaNotFound {
  /**
   * Status Code
   * @type {number}
   * @memberof SchemaNotFound
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof SchemaNotFound
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof SchemaNotFound
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof SchemaNotFound
   */
  errorName: SchemaNotFoundErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof SchemaNotFound
   */
  object?: object
}

export const SchemaNotFoundErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type SchemaNotFoundErrorNameEnum =
  (typeof SchemaNotFoundErrorNameEnum)[keyof typeof SchemaNotFoundErrorNameEnum]

/**
 *
 * @export
 * @interface SchemaResponseDto
 */
export interface SchemaResponseDto {
  /**
   * Id of the schema.
   * @type {string}
   * @memberof SchemaResponseDto
   */
  id: string
  /**
   * Name of the form
   * @type {string}
   * @memberof SchemaResponseDto
   */
  formName: string
  /**
   * Form slug
   * @type {string}
   * @memberof SchemaResponseDto
   */
  slug: string
  /**
   * Category of the form
   * @type {string}
   * @memberof SchemaResponseDto
   */
  category: string | null
  /**
   * Subject of the message
   * @type {string}
   * @memberof SchemaResponseDto
   */
  messageSubject: string
  /**
   * Created timestamp
   * @type {string}
   * @memberof SchemaResponseDto
   */
  createdAt: string
  /**
   * Updated timestamp
   * @type {string}
   * @memberof SchemaResponseDto
   */
  updatedAt: string
  /**
   * Id of the latest schema version.
   * @type {string}
   * @memberof SchemaResponseDto
   */
  latestVersionId: string | null
}
/**
 *
 * @export
 * @interface SchemaVersionNotFound
 */
export interface SchemaVersionNotFound {
  /**
   * Status Code
   * @type {number}
   * @memberof SchemaVersionNotFound
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof SchemaVersionNotFound
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof SchemaVersionNotFound
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof SchemaVersionNotFound
   */
  errorName: SchemaVersionNotFoundErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof SchemaVersionNotFound
   */
  object?: object
}

export const SchemaVersionNotFoundErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type SchemaVersionNotFoundErrorNameEnum =
  (typeof SchemaVersionNotFoundErrorNameEnum)[keyof typeof SchemaVersionNotFoundErrorNameEnum]

/**
 *
 * @export
 * @interface SchemaVersionResponseDto
 */
export interface SchemaVersionResponseDto {
  /**
   * Id of the schema version.
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  id: string
  /**
   * Text representation of the version.
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  version: string | null
  /**
   * Version of the Posp form.
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  pospVersion: string
  /**
   * Description of the schema in current version.
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  formDescription: string | null
  /**
   * Posp ID of Form
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  pospID: string
  /**
   * Must be signed
   * @type {boolean}
   * @memberof SchemaVersionResponseDto
   */
  isSigned: boolean
  /**
   * data.json
   * @type {object}
   * @memberof SchemaVersionResponseDto
   */
  data: object
  /**
   * data.xml
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  dataXml: string | null
  /**
   * form.fo.xslt
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  formFo: string
  /**
   * form.html.sef.json
   * @type {object}
   * @memberof SchemaVersionResponseDto
   */
  formHtmlSef: object
  /**
   * form.html.xslt
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  formHtml: string
  /**
   * form.sb.sef.json
   * @type {object}
   * @memberof SchemaVersionResponseDto
   */
  formSbSef: object
  /**
   * form.sb.xslt
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  formSb: string
  /**
   * schema.json
   * @type {object}
   * @memberof SchemaVersionResponseDto
   */
  jsonSchema: object
  /**
   * schema.xsd
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  schemaXsd: string
  /**
   * uiSchema.json
   * @type {object}
   * @memberof SchemaVersionResponseDto
   */
  uiSchema: object
  /**
   * xmlTemplate
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  xmlTemplate: string
  /**
   *
   * @type {SchemaVersionResponseDtoSchema}
   * @memberof SchemaVersionResponseDto
   */
  schema?: SchemaVersionResponseDtoSchema
  /**
   * Id of the parent schema object.
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  schemaId: string
  /**
   * Created timestamp
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  createdAt: string
  /**
   * Updated timestamp
   * @type {string}
   * @memberof SchemaVersionResponseDto
   */
  updatedAt: string
}
/**
 * Parent schema object.
 * @export
 * @interface SchemaVersionResponseDtoSchema
 */
export interface SchemaVersionResponseDtoSchema {
  /**
   * Id of the schema.
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  id: string
  /**
   * Name of the form
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  formName: string
  /**
   * Form slug
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  slug: string
  /**
   * Category of the form
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  category: string | null
  /**
   * Subject of the message
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  messageSubject: string
  /**
   * Created timestamp
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  createdAt: string
  /**
   * Updated timestamp
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  updatedAt: string
  /**
   * Id of the latest schema version.
   * @type {string}
   * @memberof SchemaVersionResponseDtoSchema
   */
  latestVersionId: string | null
}
/**
 *
 * @export
 * @interface SchemaVersionsResponseDto
 */
export interface SchemaVersionsResponseDto {
  /**
   * actual page
   * @type {number}
   * @memberof SchemaVersionsResponseDto
   */
  currentPage: number
  /**
   * number of items in one page
   * @type {number}
   * @memberof SchemaVersionsResponseDto
   */
  pagination: number
  /**
   * Total number of items
   * @type {number}
   * @memberof SchemaVersionsResponseDto
   */
  countPages: number
  /**
   * Items
   * @type {Array<SchemaVersionResponseDto>}
   * @memberof SchemaVersionsResponseDto
   */
  items: Array<SchemaVersionResponseDto>
}
/**
 *
 * @export
 * @interface SendFormResponseDto
 */
export interface SendFormResponseDto {
  /**
   * Id of record
   * @type {string}
   * @memberof SendFormResponseDto
   */
  id: string
  /**
   * Message response regarding the process
   * @type {string}
   * @memberof SendFormResponseDto
   */
  message: string
  /**
   * Form state
   * @type {object}
   * @memberof SendFormResponseDto
   */
  state: object
}
/**
 *
 * @export
 * @interface ServiceRunningDto
 */
export interface ServiceRunningDto {
  /**
   * is service running?
   * @type {boolean}
   * @memberof ServiceRunningDto
   */
  running: boolean
}
/**
 *
 * @export
 * @interface StatusFileDto
 */
export interface StatusFileDto {
  /**
   * scan result
   * @type {string}
   * @memberof StatusFileDto
   */
  status: StatusFileDtoStatusEnum
}

export const StatusFileDtoStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type StatusFileDtoStatusEnum =
  (typeof StatusFileDtoStatusEnum)[keyof typeof StatusFileDtoStatusEnum]

/**
 *
 * @export
 * @interface StatusResponseDto
 */
export interface StatusResponseDto {
  /**
   *
   * @type {ServiceRunningDto}
   * @memberof StatusResponseDto
   */
  prisma: ServiceRunningDto
  /**
   *
   * @type {ServiceRunningDto}
   * @memberof StatusResponseDto
   */
  minio: ServiceRunningDto
  /**
   *
   * @type {ServiceRunningDto}
   * @memberof StatusResponseDto
   */
  scanner: ServiceRunningDto
}
/**
 *
 * @export
 * @interface UnableAddFormToRabbitErrorDto
 */
export interface UnableAddFormToRabbitErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof UnableAddFormToRabbitErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof UnableAddFormToRabbitErrorDto
   */
  message: string
  /**
   * status in text
   * @type {string}
   * @memberof UnableAddFormToRabbitErrorDto
   */
  status: string
  /**
   * Exact error name
   * @type {string}
   * @memberof UnableAddFormToRabbitErrorDto
   */
  errorName: UnableAddFormToRabbitErrorDtoErrorNameEnum
  /**
   * Helper for sending additional data in error
   * @type {object}
   * @memberof UnableAddFormToRabbitErrorDto
   */
  object?: object
}

export const UnableAddFormToRabbitErrorDtoErrorNameEnum = {
  NotFoundError: 'NOT_FOUND_ERROR',
  DatabaseError: 'DATABASE_ERROR',
  InternalServerError: 'INTERNAL_SERVER_ERROR',
  UnauthorizedError: 'UNAUTHORIZED_ERROR',
} as const

export type UnableAddFormToRabbitErrorDtoErrorNameEnum =
  (typeof UnableAddFormToRabbitErrorDtoErrorNameEnum)[keyof typeof UnableAddFormToRabbitErrorDtoErrorNameEnum]

/**
 *
 * @export
 * @interface UnauthorizedErrorDto
 */
export interface UnauthorizedErrorDto {
  /**
   * Status Code
   * @type {number}
   * @memberof UnauthorizedErrorDto
   */
  statusCode: number
  /**
   * Detail error message
   * @type {string}
   * @memberof UnauthorizedErrorDto
   */
  message: string
}
/**
 *
 * @export
 * @interface UpdateFileStatusRequestDto
 */
export interface UpdateFileStatusRequestDto {
  /**
   * scan result
   * @type {string}
   * @memberof UpdateFileStatusRequestDto
   */
  status: UpdateFileStatusRequestDtoStatusEnum
}

export const UpdateFileStatusRequestDtoStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type UpdateFileStatusRequestDtoStatusEnum =
  (typeof UpdateFileStatusRequestDtoStatusEnum)[keyof typeof UpdateFileStatusRequestDtoStatusEnum]

/**
 *
 * @export
 * @interface UpdateFileStatusResponseDto
 */
export interface UpdateFileStatusResponseDto {
  /**
   * Real file name of the file, but is used only for display
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  fileName: string
  /**
   * Hashed file uid under which is file stored in minio
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  fileUid: string
  /**
   * Form type
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  pospId: string
  /**
   * Identifier of sent form
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  formId: string
  /**
   * External Id of user
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  userExternalId: string | null
  /**
   * scan result
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  status: UpdateFileStatusResponseDtoStatusEnum
  /**
   * File size in bytes
   * @type {number}
   * @memberof UpdateFileStatusResponseDto
   */
  fileSize: number
  /**
   * id of the record in db
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  id: string
  /**
   * File id under which is file stored in the scanner
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  scannerId?: string | null
  /**
   * Date when file was created
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  createdAt: string
  /**
   * Date when file was updated
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  updatedAt: string
  /**
   * more info
   * @type {string}
   * @memberof UpdateFileStatusResponseDto
   */
  message: string
}

export const UpdateFileStatusResponseDtoStatusEnum = {
  Uploaded: 'UPLOADED',
  Accepted: 'ACCEPTED',
  Scanning: 'SCANNING',
  Safe: 'SAFE',
  Infected: 'INFECTED',
  NotFound: 'NOT FOUND',
  MoveErrorSafe: 'MOVE ERROR SAFE',
  MoveErrorInfected: 'MOVE ERROR INFECTED',
} as const

export type UpdateFileStatusResponseDtoStatusEnum =
  (typeof UpdateFileStatusResponseDtoStatusEnum)[keyof typeof UpdateFileStatusResponseDtoStatusEnum]

/**
 *
 * @export
 * @interface UpdateFormRequestDto
 */
export interface UpdateFormRequestDto {
  /**
   * Send JSON body of form
   * @type {object}
   * @memberof UpdateFormRequestDto
   */
  formDataJson?: object
  /**
   * State of form
   * @type {object}
   * @memberof UpdateFormRequestDto
   */
  state?: object
  /**
   * Data from ginis saved in our db
   * @type {string}
   * @memberof UpdateFormRequestDto
   */
  formDataGinis?: string
  /**
   * Date time, when submission was finished in ginis
   * @type {string}
   * @memberof UpdateFormRequestDto
   */
  finishSubmission?: string
  /**
   * ID of person, who is sending this (URI)
   * @type {string}
   * @memberof UpdateFormRequestDto
   */
  recipientId?: string
}
/**
 *
 * @export
 * @interface XmlToJsonRequestDto
 */
export interface XmlToJsonRequestDto {
  /**
   * Form values in XML
   * @type {string}
   * @memberof XmlToJsonRequestDto
   */
  xmlForm: string
}
/**
 *
 * @export
 * @interface XmlToJsonResponseDto
 */
export interface XmlToJsonResponseDto {
  /**
   * Form values in JSON
   * @type {object}
   * @memberof XmlToJsonResponseDto
   */
  jsonForm: object
}

/**
 * ConvertApi - axios parameter creator
 * @export
 */
export const ConvertApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Generates XML form from given JSON data and form slug
     * @summary
     * @param {string} formSlug
     * @param {JsonToXmlRequestDto} jsonToXmlRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertControllerConvertJsonToXml: async (
      formSlug: string,
      jsonToXmlRequestDto: JsonToXmlRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'formSlug' is not null or undefined
      assertParamExists('convertControllerConvertJsonToXml', 'formSlug', formSlug)
      // verify required parameter 'jsonToXmlRequestDto' is not null or undefined
      assertParamExists(
        'convertControllerConvertJsonToXml',
        'jsonToXmlRequestDto',
        jsonToXmlRequestDto,
      )
      const localVarPath = `/convert/json-to-xml/{formSlug}`.replace(
        `{${'formSlug'}}`,
        encodeURIComponent(String(formSlug)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        jsonToXmlRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Generates JSON form from given XML data and form slug
     * @summary
     * @param {string} formSlug
     * @param {XmlToJsonRequestDto} xmlToJsonRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertControllerConvertXmlToJson: async (
      formSlug: string,
      xmlToJsonRequestDto: XmlToJsonRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'formSlug' is not null or undefined
      assertParamExists('convertControllerConvertXmlToJson', 'formSlug', formSlug)
      // verify required parameter 'xmlToJsonRequestDto' is not null or undefined
      assertParamExists(
        'convertControllerConvertXmlToJson',
        'xmlToJsonRequestDto',
        xmlToJsonRequestDto,
      )
      const localVarPath = `/convert/xml-to-json/{formSlug}`.replace(
        `{${'formSlug'}}`,
        encodeURIComponent(String(formSlug)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        xmlToJsonRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ConvertApi - functional programming interface
 * @export
 */
export const ConvertApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ConvertApiAxiosParamCreator(configuration)
  return {
    /**
     * Generates XML form from given JSON data and form slug
     * @summary
     * @param {string} formSlug
     * @param {JsonToXmlRequestDto} jsonToXmlRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async convertControllerConvertJsonToXml(
      formSlug: string,
      jsonToXmlRequestDto: JsonToXmlRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonToXmlResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.convertControllerConvertJsonToXml(
        formSlug,
        jsonToXmlRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Generates JSON form from given XML data and form slug
     * @summary
     * @param {string} formSlug
     * @param {XmlToJsonRequestDto} xmlToJsonRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async convertControllerConvertXmlToJson(
      formSlug: string,
      xmlToJsonRequestDto: XmlToJsonRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XmlToJsonRequestDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.convertControllerConvertXmlToJson(
        formSlug,
        xmlToJsonRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ConvertApi - factory interface
 * @export
 */
export const ConvertApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ConvertApiFp(configuration)
  return {
    /**
     * Generates XML form from given JSON data and form slug
     * @summary
     * @param {string} formSlug
     * @param {JsonToXmlRequestDto} jsonToXmlRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertControllerConvertJsonToXml(
      formSlug: string,
      jsonToXmlRequestDto: JsonToXmlRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<JsonToXmlResponseDto> {
      return localVarFp
        .convertControllerConvertJsonToXml(formSlug, jsonToXmlRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Generates JSON form from given XML data and form slug
     * @summary
     * @param {string} formSlug
     * @param {XmlToJsonRequestDto} xmlToJsonRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertControllerConvertXmlToJson(
      formSlug: string,
      xmlToJsonRequestDto: XmlToJsonRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<XmlToJsonRequestDto> {
      return localVarFp
        .convertControllerConvertXmlToJson(formSlug, xmlToJsonRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ConvertApi - object-oriented interface
 * @export
 * @class ConvertApi
 * @extends {BaseAPI}
 */
export class ConvertApi extends BaseAPI {
  /**
   * Generates XML form from given JSON data and form slug
   * @summary
   * @param {string} formSlug
   * @param {JsonToXmlRequestDto} jsonToXmlRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConvertApi
   */
  public convertControllerConvertJsonToXml(
    formSlug: string,
    jsonToXmlRequestDto: JsonToXmlRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return ConvertApiFp(this.configuration)
      .convertControllerConvertJsonToXml(formSlug, jsonToXmlRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Generates JSON form from given XML data and form slug
   * @summary
   * @param {string} formSlug
   * @param {XmlToJsonRequestDto} xmlToJsonRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConvertApi
   */
  public convertControllerConvertXmlToJson(
    formSlug: string,
    xmlToJsonRequestDto: XmlToJsonRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return ConvertApiFp(this.configuration)
      .convertControllerConvertXmlToJson(formSlug, xmlToJsonRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * You can delete file based on fileId.
     * @summary Delete file based on fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerDeleteFile: async (
      fileId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('filesControllerDeleteFile', 'fileId', fileId)
      const localVarPath = `/files/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * You can download file byt fileId.
     * @summary Download file by jwt token
     * @param {string} jwtToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerDownloadFile: async (
      jwtToken: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jwtToken' is not null or undefined
      assertParamExists('filesControllerDownloadFile', 'jwtToken', jwtToken)
      const localVarPath = `/files/download/file/{jwtToken}`.replace(
        `{${'jwtToken'}}`,
        encodeURIComponent(String(jwtToken)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * To be able to download file you need to obtain jwt token.
     * @summary Obtain jwt token form file download
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerDownloadToken: async (
      fileId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('filesControllerDownloadToken', 'fileId', fileId)
      const localVarPath = `/files/download/jwt/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * You get all file info based on fileId.
     * @summary Get file by fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFile: async (
      fileId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('filesControllerGetFile', 'fileId', fileId)
      const localVarPath = `/files/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * You get file status based on fileId which you obtained when you notified for file scanning.
     * @summary Get file status based on fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFileStatus: async (
      fileId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('filesControllerGetFileStatus', 'fileId', fileId)
      const localVarPath = `/files/scan/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * You get file status based on formId and fileUid.
     * @summary Get file status based on formId and fileUid
     * @param {string} formId
     * @param {string} fileUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFileStatusByForm: async (
      formId: string,
      fileUid: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      assertParamExists('filesControllerGetFileStatusByForm', 'formId', formId)
      // verify required parameter 'fileUid' is not null or undefined
      assertParamExists('filesControllerGetFileStatusByForm', 'fileUid', fileUid)
      const localVarPath = `/files/forms/{formId}/{fileUid}`
        .replace(`{${'formId'}}`, encodeURIComponent(String(formId)))
        .replace(`{${'fileUid'}}`, encodeURIComponent(String(fileUid)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * If you need list of files and their file statuses based on formId.
     * @summary List of files and statuses based on formId
     * @param {string} formId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFilesStatusByForm: async (
      formId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      assertParamExists('filesControllerGetFilesStatusByForm', 'formId', formId)
      const localVarPath = `/files/forms/{formId}`.replace(
        `{${'formId'}}`,
        encodeURIComponent(String(formId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * When you hit this POST endpoint, you send file for scanning. You get file id and his current status in response.
     * @summary Send file for scanning.
     * @param {PostFileRequestDto} postFileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerPostFileToScanner: async (
      postFileRequestDto: PostFileRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postFileRequestDto' is not null or undefined
      assertParamExists(
        'filesControllerPostFileToScanner',
        'postFileRequestDto',
        postFileRequestDto,
      )
      const localVarPath = `/files/scan`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postFileRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * You have to provide scannerId and status which you want to update. Service will return updated file with status saying that file was updated. If not then proper error will be propagated.
     * @summary Endpoint for updating file status from scanner.
     * @param {string} scannerId
     * @param {UpdateFileStatusRequestDto} updateFileStatusRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerUpdateFileStatusScannerId: async (
      scannerId: string,
      updateFileStatusRequestDto: UpdateFileStatusRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scannerId' is not null or undefined
      assertParamExists('filesControllerUpdateFileStatusScannerId', 'scannerId', scannerId)
      // verify required parameter 'updateFileStatusRequestDto' is not null or undefined
      assertParamExists(
        'filesControllerUpdateFileStatusScannerId',
        'updateFileStatusRequestDto',
        updateFileStatusRequestDto,
      )
      const localVarPath = `/files/scan/{scannerId}`.replace(
        `{${'scannerId'}}`,
        encodeURIComponent(String(scannerId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFileStatusRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * You can upload file to form.
     * @summary Upload file to form
     * @param {string} formId
     * @param {File} [file]
     * @param {string} [filename]
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerUploadFile: async (
      formId: string,
      file?: File,
      filename?: string,
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      assertParamExists('filesControllerUploadFile', 'formId', formId)
      const localVarPath = `/files/upload/{formId}`.replace(
        `{${'formId'}}`,
        encodeURIComponent(String(formId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (file !== undefined) {
        localVarFormParams.append('file', file as any)
      }

      if (filename !== undefined) {
        localVarFormParams.append('filename', filename as any)
      }

      if (id !== undefined) {
        localVarFormParams.append('id', id as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
  return {
    /**
     * You can delete file based on fileId.
     * @summary Delete file based on fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerDeleteFile(
      fileId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFileResponseData>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerDeleteFile(
        fileId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * You can download file byt fileId.
     * @summary Download file by jwt token
     * @param {string} jwtToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerDownloadFile(
      jwtToken: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerDownloadFile(
        jwtToken,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * To be able to download file you need to obtain jwt token.
     * @summary Obtain jwt token form file download
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerDownloadToken(
      fileId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadTokenResponseDataDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerDownloadToken(
        fileId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * You get all file info based on fileId.
     * @summary Get file by fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerGetFile(
      fileId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGetFile(
        fileId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * You get file status based on fileId which you obtained when you notified for file scanning.
     * @summary Get file status based on fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerGetFileStatus(
      fileId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileStatusResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGetFileStatus(
        fileId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * You get file status based on formId and fileUid.
     * @summary Get file status based on formId and fileUid
     * @param {string} formId
     * @param {string} fileUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerGetFileStatusByForm(
      formId: string,
      fileUid: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusFileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGetFileStatusByForm(
        formId,
        fileUid,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * If you need list of files and their file statuses based on formId.
     * @summary List of files and statuses based on formId
     * @param {string} formId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerGetFilesStatusByForm(
      formId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetFileResponseDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGetFilesStatusByForm(
        formId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * When you hit this POST endpoint, you send file for scanning. You get file id and his current status in response.
     * @summary Send file for scanning.
     * @param {PostFileRequestDto} postFileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerPostFileToScanner(
      postFileRequestDto: PostFileRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFileResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerPostFileToScanner(
        postFileRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * You have to provide scannerId and status which you want to update. Service will return updated file with status saying that file was updated. If not then proper error will be propagated.
     * @summary Endpoint for updating file status from scanner.
     * @param {string} scannerId
     * @param {UpdateFileStatusRequestDto} updateFileStatusRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerUpdateFileStatusScannerId(
      scannerId: string,
      updateFileStatusRequestDto: UpdateFileStatusRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateFileStatusResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.filesControllerUpdateFileStatusScannerId(
          scannerId,
          updateFileStatusRequestDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * You can upload file to form.
     * @summary Upload file to form
     * @param {string} formId
     * @param {File} [file]
     * @param {string} [filename]
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async filesControllerUploadFile(
      formId: string,
      file?: File,
      filename?: string,
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFileResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerUploadFile(
        formId,
        file,
        filename,
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FilesApiFp(configuration)
  return {
    /**
     * You can delete file based on fileId.
     * @summary Delete file based on fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerDeleteFile(
      fileId: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<DeleteFileResponseData> {
      return localVarFp
        .filesControllerDeleteFile(fileId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * You can download file byt fileId.
     * @summary Download file by jwt token
     * @param {string} jwtToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerDownloadFile(
      jwtToken: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .filesControllerDownloadFile(jwtToken, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * To be able to download file you need to obtain jwt token.
     * @summary Obtain jwt token form file download
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerDownloadToken(
      fileId: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<DownloadTokenResponseDataDto> {
      return localVarFp
        .filesControllerDownloadToken(fileId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * You get all file info based on fileId.
     * @summary Get file by fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFile(
      fileId: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFileResponseDto> {
      return localVarFp
        .filesControllerGetFile(fileId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * You get file status based on fileId which you obtained when you notified for file scanning.
     * @summary Get file status based on fileId
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFileStatus(
      fileId: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFileStatusResponseDto> {
      return localVarFp
        .filesControllerGetFileStatus(fileId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * You get file status based on formId and fileUid.
     * @summary Get file status based on formId and fileUid
     * @param {string} formId
     * @param {string} fileUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFileStatusByForm(
      formId: string,
      fileUid: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<StatusFileDto> {
      return localVarFp
        .filesControllerGetFileStatusByForm(formId, fileUid, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * If you need list of files and their file statuses based on formId.
     * @summary List of files and statuses based on formId
     * @param {string} formId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerGetFilesStatusByForm(
      formId: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<Array<GetFileResponseDto>> {
      return localVarFp
        .filesControllerGetFilesStatusByForm(formId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * When you hit this POST endpoint, you send file for scanning. You get file id and his current status in response.
     * @summary Send file for scanning.
     * @param {PostFileRequestDto} postFileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerPostFileToScanner(
      postFileRequestDto: PostFileRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PostFileResponseDto> {
      return localVarFp
        .filesControllerPostFileToScanner(postFileRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * You have to provide scannerId and status which you want to update. Service will return updated file with status saying that file was updated. If not then proper error will be propagated.
     * @summary Endpoint for updating file status from scanner.
     * @param {string} scannerId
     * @param {UpdateFileStatusRequestDto} updateFileStatusRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerUpdateFileStatusScannerId(
      scannerId: string,
      updateFileStatusRequestDto: UpdateFileStatusRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UpdateFileStatusResponseDto> {
      return localVarFp
        .filesControllerUpdateFileStatusScannerId(scannerId, updateFileStatusRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * You can upload file to form.
     * @summary Upload file to form
     * @param {string} formId
     * @param {File} [file]
     * @param {string} [filename]
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesControllerUploadFile(
      formId: string,
      file?: File,
      filename?: string,
      id?: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PostFileResponseDto> {
      return localVarFp
        .filesControllerUploadFile(formId, file, filename, id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
  /**
   * You can delete file based on fileId.
   * @summary Delete file based on fileId
   * @param {string} fileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerDeleteFile(fileId: string, options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .filesControllerDeleteFile(fileId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * You can download file byt fileId.
   * @summary Download file by jwt token
   * @param {string} jwtToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerDownloadFile(jwtToken: string, options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .filesControllerDownloadFile(jwtToken, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * To be able to download file you need to obtain jwt token.
   * @summary Obtain jwt token form file download
   * @param {string} fileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerDownloadToken(fileId: string, options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .filesControllerDownloadToken(fileId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * You get all file info based on fileId.
   * @summary Get file by fileId
   * @param {string} fileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerGetFile(fileId: string, options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .filesControllerGetFile(fileId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * You get file status based on fileId which you obtained when you notified for file scanning.
   * @summary Get file status based on fileId
   * @param {string} fileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerGetFileStatus(fileId: string, options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .filesControllerGetFileStatus(fileId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * You get file status based on formId and fileUid.
   * @summary Get file status based on formId and fileUid
   * @param {string} formId
   * @param {string} fileUid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerGetFileStatusByForm(
    formId: string,
    fileUid: string,
    options?: AxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .filesControllerGetFileStatusByForm(formId, fileUid, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * If you need list of files and their file statuses based on formId.
   * @summary List of files and statuses based on formId
   * @param {string} formId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerGetFilesStatusByForm(formId: string, options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .filesControllerGetFilesStatusByForm(formId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * When you hit this POST endpoint, you send file for scanning. You get file id and his current status in response.
   * @summary Send file for scanning.
   * @param {PostFileRequestDto} postFileRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerPostFileToScanner(
    postFileRequestDto: PostFileRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .filesControllerPostFileToScanner(postFileRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * You have to provide scannerId and status which you want to update. Service will return updated file with status saying that file was updated. If not then proper error will be propagated.
   * @summary Endpoint for updating file status from scanner.
   * @param {string} scannerId
   * @param {UpdateFileStatusRequestDto} updateFileStatusRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerUpdateFileStatusScannerId(
    scannerId: string,
    updateFileStatusRequestDto: UpdateFileStatusRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .filesControllerUpdateFileStatusScannerId(scannerId, updateFileStatusRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * You can upload file to form.
   * @summary Upload file to form
   * @param {string} formId
   * @param {File} [file]
   * @param {string} [filename]
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public filesControllerUploadFile(
    formId: string,
    file?: File,
    filename?: string,
    id?: string,
    options?: AxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .filesControllerUploadFile(formId, file, filename, id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * HealthcheckApi - axios parameter creator
 * @export
 */
export const HealthcheckApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * See if nest is working!
     * @summary Hello world!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/healthcheck`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * HealthcheckApi - functional programming interface
 * @export
 */
export const HealthcheckApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthcheckApiAxiosParamCreator(configuration)
  return {
    /**
     * See if nest is working!
     * @summary Hello world!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetHello(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * HealthcheckApi - factory interface
 * @export
 */
export const HealthcheckApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HealthcheckApiFp(configuration)
  return {
    /**
     * See if nest is working!
     * @summary Hello world!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: AxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * HealthcheckApi - object-oriented interface
 * @export
 * @class HealthcheckApi
 * @extends {BaseAPI}
 */
export class HealthcheckApi extends BaseAPI {
  /**
   * See if nest is working!
   * @summary Hello world!
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthcheckApi
   */
  public appControllerGetHello(options?: AxiosRequestConfig) {
    return HealthcheckApiFp(this.configuration)
      .appControllerGetHello(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * NasesApi - axios parameter creator
 * @export
 */
export const NasesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
     * @summary
     * @param {CreateFormRequestDto} createFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerCreateForm: async (
      createFormRequestDto: CreateFormRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createFormRequestDto' is not null or undefined
      assertParamExists('nasesControllerCreateForm', 'createFormRequestDto', createFormRequestDto)
      const localVarPath = `/nases/create-form`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createFormRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create only id in our backend, which you need to send in form as external id. There is only one mandatory parameter - email, rest of body is not mandatory, you can add form name, category version and some tags
     * @summary
     * @param {CreateFormEidRequestDto} createFormEidRequestDto
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    nasesControllerCreateFormEid: async (
      createFormEidRequestDto: CreateFormEidRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createFormEidRequestDto' is not null or undefined
      assertParamExists(
        'nasesControllerCreateFormEid',
        'createFormEidRequestDto',
        createFormEidRequestDto,
      )
      const localVarPath = `/nases/eid/create-form`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createFormEidRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Return administration account JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetAdministrationJwt: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/nases/administration-jwt`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Return eid user JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetEidJwt: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/nases/eid-jwt`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Return form by ID and by logged user
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetForm: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerGetForm', 'id', id)
      const localVarPath = `/nases/form/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get paginated forms
     * @summary Get paginated forms
     * @param {string} [currentPage] Page number
     * @param {string} [pagination] Number of items per page
     * @param {string} [pospID] Posp ID of Form
     * @param {string} [formName] Form Name
     * @param {Array<FormState>} [states] States of form
     * @param {string} [schemaVersionId] Schema version Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetForms: async (
      currentPage?: string,
      pagination?: string,
      pospID?: string,
      formName?: string,
      states?: Array<FormState>,
      schemaVersionId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/nases/forms`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (currentPage !== undefined) {
        localVarQueryParameter['currentPage'] = currentPage
      }

      if (pagination !== undefined) {
        localVarQueryParameter['pagination'] = pagination
      }

      if (pospID !== undefined) {
        localVarQueryParameter['pospID'] = pospID
      }

      if (formName !== undefined) {
        localVarQueryParameter['formName'] = formName
      }

      if (states) {
        localVarQueryParameter['states'] = states
      }

      if (schemaVersionId !== undefined) {
        localVarQueryParameter['schemaVersionId'] = schemaVersionId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Return technical account JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetTechnicalJwt: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/nases/technical-jwt`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Assign form with no assigned user to the authenticated user
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerMigrateForm: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerMigrateForm', 'id', id)
      const localVarPath = `/nases/migrate-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendAndUpdateForm: async (
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerSendAndUpdateForm', 'id', id)
      // verify required parameter 'updateFormRequestDto' is not null or undefined
      assertParamExists(
        'nasesControllerSendAndUpdateForm',
        'updateFormRequestDto',
        updateFormRequestDto,
      )
      const localVarPath = `/nases/send-and-update-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFormRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendAndUpdateFormEid: async (
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerSendAndUpdateFormEid', 'id', id)
      // verify required parameter 'updateFormRequestDto' is not null or undefined
      assertParamExists(
        'nasesControllerSendAndUpdateFormEid',
        'updateFormRequestDto',
        updateFormRequestDto,
      )
      const localVarPath = `/nases/eid/send-and-update-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFormRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendForm: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerSendForm', 'id', id)
      const localVarPath = `/nases/send-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendFormEid: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerSendFormEid', 'id', id)
      const localVarPath = `/nases/eid/send-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update form
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerUpdateForm: async (
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerUpdateForm', 'id', id)
      // verify required parameter 'updateFormRequestDto' is not null or undefined
      assertParamExists('nasesControllerUpdateForm', 'updateFormRequestDto', updateFormRequestDto)
      const localVarPath = `/nases/update-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFormRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    nasesControllerUpdateFormEid: async (
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('nasesControllerUpdateFormEid', 'id', id)
      // verify required parameter 'updateFormRequestDto' is not null or undefined
      assertParamExists(
        'nasesControllerUpdateFormEid',
        'updateFormRequestDto',
        updateFormRequestDto,
      )
      const localVarPath = `/nases/eid/update-form/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFormRequestDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NasesApi - functional programming interface
 * @export
 */
export const NasesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NasesApiAxiosParamCreator(configuration)
  return {
    /**
     * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
     * @summary
     * @param {CreateFormRequestDto} createFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerCreateForm(
      createFormRequestDto: CreateFormRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerCreateForm(
        createFormRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Create only id in our backend, which you need to send in form as external id. There is only one mandatory parameter - email, rest of body is not mandatory, you can add form name, category version and some tags
     * @summary
     * @param {CreateFormEidRequestDto} createFormEidRequestDto
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async nasesControllerCreateFormEid(
      createFormEidRequestDto: CreateFormEidRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerCreateFormEid(
        createFormEidRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Return administration account JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerGetAdministrationJwt(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerGetAdministrationJwt(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Return eid user JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerGetEidJwt(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerGetEidJwt(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Return form by ID and by logged user
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerGetForm(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerGetForm(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Get paginated forms
     * @summary Get paginated forms
     * @param {string} [currentPage] Page number
     * @param {string} [pagination] Number of items per page
     * @param {string} [pospID] Posp ID of Form
     * @param {string} [formName] Form Name
     * @param {Array<FormState>} [states] States of form
     * @param {string} [schemaVersionId] Schema version Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerGetForms(
      currentPage?: string,
      pagination?: string,
      pospID?: string,
      formName?: string,
      states?: Array<FormState>,
      schemaVersionId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFormsResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerGetForms(
        currentPage,
        pagination,
        pospID,
        formName,
        states,
        schemaVersionId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Return technical account JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerGetTechnicalJwt(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerGetTechnicalJwt(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Assign form with no assigned user to the authenticated user
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerMigrateForm(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerMigrateForm(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerSendAndUpdateForm(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerSendAndUpdateForm(
        id,
        updateFormRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerSendAndUpdateFormEid(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerSendAndUpdateFormEid(
        id,
        updateFormRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerSendForm(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerSendForm(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerSendFormEid(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerSendFormEid(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update form
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nasesControllerUpdateForm(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerUpdateForm(
        id,
        updateFormRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async nasesControllerUpdateFormEid(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFormResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.nasesControllerUpdateFormEid(
        id,
        updateFormRequestDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * NasesApi - factory interface
 * @export
 */
export const NasesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NasesApiFp(configuration)
  return {
    /**
     * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
     * @summary
     * @param {CreateFormRequestDto} createFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerCreateForm(
      createFormRequestDto: CreateFormRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFormResponseDto> {
      return localVarFp
        .nasesControllerCreateForm(createFormRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create only id in our backend, which you need to send in form as external id. There is only one mandatory parameter - email, rest of body is not mandatory, you can add form name, category version and some tags
     * @summary
     * @param {CreateFormEidRequestDto} createFormEidRequestDto
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    nasesControllerCreateFormEid(
      createFormEidRequestDto: CreateFormEidRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFormResponseDto> {
      return localVarFp
        .nasesControllerCreateFormEid(createFormEidRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Return administration account JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetAdministrationJwt(options?: AxiosRequestConfig): AxiosPromise<object> {
      return localVarFp
        .nasesControllerGetAdministrationJwt(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Return eid user JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetEidJwt(options?: AxiosRequestConfig): AxiosPromise<object> {
      return localVarFp
        .nasesControllerGetEidJwt(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Return form by ID and by logged user
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetForm(
      id: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFormResponseDto> {
      return localVarFp
        .nasesControllerGetForm(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get paginated forms
     * @summary Get paginated forms
     * @param {string} [currentPage] Page number
     * @param {string} [pagination] Number of items per page
     * @param {string} [pospID] Posp ID of Form
     * @param {string} [formName] Form Name
     * @param {Array<FormState>} [states] States of form
     * @param {string} [schemaVersionId] Schema version Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetForms(
      currentPage?: string,
      pagination?: string,
      pospID?: string,
      formName?: string,
      states?: Array<FormState>,
      schemaVersionId?: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFormsResponseDto> {
      return localVarFp
        .nasesControllerGetForms(
          currentPage,
          pagination,
          pospID,
          formName,
          states,
          schemaVersionId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Return technical account JWT token
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerGetTechnicalJwt(options?: AxiosRequestConfig): AxiosPromise<object> {
      return localVarFp
        .nasesControllerGetTechnicalJwt(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Assign form with no assigned user to the authenticated user
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerMigrateForm(id: string, options?: AxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .nasesControllerMigrateForm(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendAndUpdateForm(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SendFormResponseDto> {
      return localVarFp
        .nasesControllerSendAndUpdateForm(id, updateFormRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendAndUpdateFormEid(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SendFormResponseDto> {
      return localVarFp
        .nasesControllerSendAndUpdateFormEid(id, updateFormRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendForm(
      id: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SendFormResponseDto> {
      return localVarFp
        .nasesControllerSendForm(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerSendFormEid(
      id: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SendFormResponseDto> {
      return localVarFp
        .nasesControllerSendFormEid(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Update form
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nasesControllerUpdateForm(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFormResponseDto> {
      return localVarFp
        .nasesControllerUpdateForm(id, updateFormRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
     * @summary
     * @param {string} id
     * @param {UpdateFormRequestDto} updateFormRequestDto
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    nasesControllerUpdateFormEid(
      id: string,
      updateFormRequestDto: UpdateFormRequestDto,
      options?: AxiosRequestConfig,
    ): AxiosPromise<GetFormResponseDto> {
      return localVarFp
        .nasesControllerUpdateFormEid(id, updateFormRequestDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NasesApi - object-oriented interface
 * @export
 * @class NasesApi
 * @extends {BaseAPI}
 */
export class NasesApi extends BaseAPI {
  /**
   * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
   * @summary
   * @param {CreateFormRequestDto} createFormRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerCreateForm(
    createFormRequestDto: CreateFormRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerCreateForm(createFormRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create only id in our backend, which you need to send in form as external id. There is only one mandatory parameter - email, rest of body is not mandatory, you can add form name, category version and some tags
   * @summary
   * @param {CreateFormEidRequestDto} createFormEidRequestDto
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerCreateFormEid(
    createFormEidRequestDto: CreateFormEidRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerCreateFormEid(createFormEidRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Return administration account JWT token
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerGetAdministrationJwt(options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerGetAdministrationJwt(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Return eid user JWT token
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerGetEidJwt(options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerGetEidJwt(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Return form by ID and by logged user
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerGetForm(id: string, options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerGetForm(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get paginated forms
   * @summary Get paginated forms
   * @param {string} [currentPage] Page number
   * @param {string} [pagination] Number of items per page
   * @param {string} [pospID] Posp ID of Form
   * @param {string} [formName] Form Name
   * @param {Array<FormState>} [states] States of form
   * @param {string} [schemaVersionId] Schema version Id.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerGetForms(
    currentPage?: string,
    pagination?: string,
    pospID?: string,
    formName?: string,
    states?: Array<FormState>,
    schemaVersionId?: string,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerGetForms(
        currentPage,
        pagination,
        pospID,
        formName,
        states,
        schemaVersionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Return technical account JWT token
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerGetTechnicalJwt(options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerGetTechnicalJwt(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Assign form with no assigned user to the authenticated user
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerMigrateForm(id: string, options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerMigrateForm(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
   * @summary
   * @param {string} id
   * @param {UpdateFormRequestDto} updateFormRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerSendAndUpdateForm(
    id: string,
    updateFormRequestDto: UpdateFormRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerSendAndUpdateForm(id, updateFormRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint is used for updating from and sending it to NASES. First is form updated then send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
   * @summary
   * @param {string} id
   * @param {UpdateFormRequestDto} updateFormRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerSendAndUpdateFormEid(
    id: string,
    updateFormRequestDto: UpdateFormRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerSendAndUpdateFormEid(id, updateFormRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerSendForm(id: string, options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerSendForm(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint is used for sending form to NASES. First is form send to rabbitmq, then is controlled if everything is okay and files are scanned and after that is send to NASES
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerSendFormEid(id: string, options?: AxiosRequestConfig) {
    return NasesApiFp(this.configuration)
      .nasesControllerSendFormEid(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update form
   * @summary
   * @param {string} id
   * @param {UpdateFormRequestDto} updateFormRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerUpdateForm(
    id: string,
    updateFormRequestDto: UpdateFormRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerUpdateForm(id, updateFormRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create id in our backend, which you need to send in form as external id. Save also data necessary for envelope to send message to NASES
   * @summary
   * @param {string} id
   * @param {UpdateFormRequestDto} updateFormRequestDto
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof NasesApi
   */
  public nasesControllerUpdateFormEid(
    id: string,
    updateFormRequestDto: UpdateFormRequestDto,
    options?: AxiosRequestConfig,
  ) {
    return NasesApiFp(this.configuration)
      .nasesControllerUpdateFormEid(id, updateFormRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * SchemasApi - axios parameter creator
 * @export
 */
export const SchemasApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {boolean} [onlyLatest] True if only the latest version of each form is desirable
     * @param {string} [slug] Schema slug for which the versions should be retrieved
     * @param {string} [currentPage] Page number
     * @param {string} [pagination] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasControllerGetAllVersions: async (
      onlyLatest?: boolean,
      slug?: string,
      currentPage?: string,
      pagination?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/schemas/schema-versions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (onlyLatest !== undefined) {
        localVarQueryParameter['onlyLatest'] = onlyLatest
      }

      if (slug !== undefined) {
        localVarQueryParameter['slug'] = slug
      }

      if (currentPage !== undefined) {
        localVarQueryParameter['currentPage'] = currentPage
      }

      if (pagination !== undefined) {
        localVarQueryParameter['pagination'] = pagination
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} schemaSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasControllerGetSchema: async (
      schemaSlug: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'schemaSlug' is not null or undefined
      assertParamExists('schemasControllerGetSchema', 'schemaSlug', schemaSlug)
      const localVarPath = `/schemas/schema/{schemaSlug}`.replace(
        `{${'schemaSlug'}}`,
        encodeURIComponent(String(schemaSlug)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Returns a schema and uiSchema for a given form slug, if it exists
     * @summary
     * @param {string} formSlug
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasControllerGetSchemaForSlug: async (
      formSlug: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'formSlug' is not null or undefined
      assertParamExists('schemasControllerGetSchemaForSlug', 'formSlug', formSlug)
      const localVarPath = `/schemas/{formSlug}`.replace(
        `{${'formSlug'}}`,
        encodeURIComponent(String(formSlug)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {boolean} [includeSchema] True if schema should be included, not only schema id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasControllerGetSchemaVersion: async (
      id: string,
      includeSchema?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('schemasControllerGetSchemaVersion', 'id', id)
      const localVarPath = `/schemas/schema-version/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (includeSchema !== undefined) {
        localVarQueryParameter['includeSchema'] = includeSchema
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SchemasApi - functional programming interface
 * @export
 */
export const SchemasApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SchemasApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {boolean} [onlyLatest] True if only the latest version of each form is desirable
     * @param {string} [slug] Schema slug for which the versions should be retrieved
     * @param {string} [currentPage] Page number
     * @param {string} [pagination] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async schemasControllerGetAllVersions(
      onlyLatest?: boolean,
      slug?: string,
      currentPage?: string,
      pagination?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaVersionsResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.schemasControllerGetAllVersions(
        onlyLatest,
        slug,
        currentPage,
        pagination,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {string} schemaSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async schemasControllerGetSchema(
      schemaSlug: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.schemasControllerGetSchema(
        schemaSlug,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Returns a schema and uiSchema for a given form slug, if it exists
     * @summary
     * @param {string} formSlug
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async schemasControllerGetSchemaForSlug(
      formSlug: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.schemasControllerGetSchemaForSlug(
        formSlug,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {string} id
     * @param {boolean} [includeSchema] True if schema should be included, not only schema id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async schemasControllerGetSchemaVersion(
      id: string,
      includeSchema?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaVersionResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.schemasControllerGetSchemaVersion(
        id,
        includeSchema,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * SchemasApi - factory interface
 * @export
 */
export const SchemasApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SchemasApiFp(configuration)
  return {
    /**
     *
     * @param {boolean} [onlyLatest] True if only the latest version of each form is desirable
     * @param {string} [slug] Schema slug for which the versions should be retrieved
     * @param {string} [currentPage] Page number
     * @param {string} [pagination] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasControllerGetAllVersions(
      onlyLatest?: boolean,
      slug?: string,
      currentPage?: string,
      pagination?: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SchemaVersionsResponseDto> {
      return localVarFp
        .schemasControllerGetAllVersions(onlyLatest, slug, currentPage, pagination, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} schemaSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasControllerGetSchema(
      schemaSlug: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SchemaResponseDto> {
      return localVarFp
        .schemasControllerGetSchema(schemaSlug, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Returns a schema and uiSchema for a given form slug, if it exists
     * @summary
     * @param {string} formSlug
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasControllerGetSchemaForSlug(
      formSlug: string,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SchemaResponseDto> {
      return localVarFp
        .schemasControllerGetSchemaForSlug(formSlug, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {boolean} [includeSchema] True if schema should be included, not only schema id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasControllerGetSchemaVersion(
      id: string,
      includeSchema?: boolean,
      options?: AxiosRequestConfig,
    ): AxiosPromise<SchemaVersionResponseDto> {
      return localVarFp
        .schemasControllerGetSchemaVersion(id, includeSchema, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SchemasApi - object-oriented interface
 * @export
 * @class SchemasApi
 * @extends {BaseAPI}
 */
export class SchemasApi extends BaseAPI {
  /**
   *
   * @param {boolean} [onlyLatest] True if only the latest version of each form is desirable
   * @param {string} [slug] Schema slug for which the versions should be retrieved
   * @param {string} [currentPage] Page number
   * @param {string} [pagination] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemasApi
   */
  public schemasControllerGetAllVersions(
    onlyLatest?: boolean,
    slug?: string,
    currentPage?: string,
    pagination?: string,
    options?: AxiosRequestConfig,
  ) {
    return SchemasApiFp(this.configuration)
      .schemasControllerGetAllVersions(onlyLatest, slug, currentPage, pagination, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} schemaSlug
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemasApi
   */
  public schemasControllerGetSchema(schemaSlug: string, options?: AxiosRequestConfig) {
    return SchemasApiFp(this.configuration)
      .schemasControllerGetSchema(schemaSlug, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Returns a schema and uiSchema for a given form slug, if it exists
   * @summary
   * @param {string} formSlug
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof SchemasApi
   */
  public schemasControllerGetSchemaForSlug(formSlug: string, options?: AxiosRequestConfig) {
    return SchemasApiFp(this.configuration)
      .schemasControllerGetSchemaForSlug(formSlug, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {boolean} [includeSchema] True if schema should be included, not only schema id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemasApi
   */
  public schemasControllerGetSchemaVersion(
    id: string,
    includeSchema?: boolean,
    options?: AxiosRequestConfig,
  ) {
    return SchemasApiFp(this.configuration)
      .schemasControllerGetSchemaVersion(id, includeSchema, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * StatusesApi - axios parameter creator
 * @export
 */
export const StatusesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint checks if forms backend is running
     * @summary Check scanner backend status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerIsFormsRunning: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/status/scanner`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint checks if minio is running
     * @summary Check minio status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerIsMinioRunning: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/status/minio`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint checks if prisma is running
     * @summary Check prisma status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerIsPrismaRunning: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/status/prisma`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint checks all services status
     * @summary Check all services status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/status`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * StatusesApi - functional programming interface
 * @export
 */
export const StatusesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StatusesApiAxiosParamCreator(configuration)
  return {
    /**
     * This endpoint checks if forms backend is running
     * @summary Check scanner backend status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statusControllerIsFormsRunning(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRunningDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.statusControllerIsFormsRunning(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint checks if minio is running
     * @summary Check minio status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statusControllerIsMinioRunning(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRunningDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.statusControllerIsMinioRunning(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint checks if prisma is running
     * @summary Check prisma status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statusControllerIsPrismaRunning(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRunningDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.statusControllerIsPrismaRunning(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * This endpoint checks all services status
     * @summary Check all services status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statusControllerStatus(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.statusControllerStatus(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * StatusesApi - factory interface
 * @export
 */
export const StatusesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StatusesApiFp(configuration)
  return {
    /**
     * This endpoint checks if forms backend is running
     * @summary Check scanner backend status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerIsFormsRunning(options?: AxiosRequestConfig): AxiosPromise<ServiceRunningDto> {
      return localVarFp
        .statusControllerIsFormsRunning(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint checks if minio is running
     * @summary Check minio status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerIsMinioRunning(options?: AxiosRequestConfig): AxiosPromise<ServiceRunningDto> {
      return localVarFp
        .statusControllerIsMinioRunning(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint checks if prisma is running
     * @summary Check prisma status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerIsPrismaRunning(options?: AxiosRequestConfig): AxiosPromise<ServiceRunningDto> {
      return localVarFp
        .statusControllerIsPrismaRunning(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint checks all services status
     * @summary Check all services status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusControllerStatus(options?: AxiosRequestConfig): AxiosPromise<StatusResponseDto> {
      return localVarFp.statusControllerStatus(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * StatusesApi - object-oriented interface
 * @export
 * @class StatusesApi
 * @extends {BaseAPI}
 */
export class StatusesApi extends BaseAPI {
  /**
   * This endpoint checks if forms backend is running
   * @summary Check scanner backend status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusesApi
   */
  public statusControllerIsFormsRunning(options?: AxiosRequestConfig) {
    return StatusesApiFp(this.configuration)
      .statusControllerIsFormsRunning(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint checks if minio is running
   * @summary Check minio status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusesApi
   */
  public statusControllerIsMinioRunning(options?: AxiosRequestConfig) {
    return StatusesApiFp(this.configuration)
      .statusControllerIsMinioRunning(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint checks if prisma is running
   * @summary Check prisma status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusesApi
   */
  public statusControllerIsPrismaRunning(options?: AxiosRequestConfig) {
    return StatusesApiFp(this.configuration)
      .statusControllerIsPrismaRunning(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint checks all services status
   * @summary Check all services status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusesApi
   */
  public statusControllerStatus(options?: AxiosRequestConfig) {
    return StatusesApiFp(this.configuration)
      .statusControllerStatus(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
