generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-arm64-openssl-1.1.x", "darwin-arm64", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileStatus {
  // when file was accepted for scanning
  ACCEPTED
  // when file is queued for scanning by the scan worker
  QUEUED
  // when file is being scanned by clamav
  SCANNING
  // when scan result is safe
  SAFE
  // when scan result is infected
  INFECTED
  // when file is not found in minio
  NOT_FOUND
  // when file is safe but there was an error while moving it to safe bucket
  MOVE_ERROR_SAFE
  // when file is infected but there was an error while moving it to infected bucket
  MOVE_ERROR_INFECTED
  // when there was a clamav error while scanning file
  SCAN_ERROR
  // when scan by clamav timed out
  SCAN_TIMEOUT
  // after x number of unsuccessful scans, this status is set
  SCAN_NOT_SUCCESSFUL
  // when file id is not found in forms
  FORM_ID_NOT_FOUND
}

model Files {
  id           String     @id @default(uuid())
  // file indentifier
  fileUid      String
  // bucket indentifier
  bucketUid    String
  // file size from minio
  fileSize     Int
  // file mime type
  fileMimeType String
  // status of the scanner file
  status       FileStatus @default(ACCEPTED)
  // if the forms where notified about status change
  notified     Boolean    @default(false)
  // number of times the file was scanned
  runs         Int        @default(0)
  // reserved for som other data
  meta         Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([fileUid, bucketUid, fileSize, status, notified])
}
