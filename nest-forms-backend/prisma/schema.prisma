// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-arm64-openssl-1.1.x", "darwin-arm64", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Forms {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  // dotecie z ginisu neskor
  externalId       String?
  // z ba konta ale nemusi
  userExternalId   String?        @db.Uuid
  // same as above
  email            String?
  // nases id
  mainUri          String?
  actorUri         String?
  ownerType        FormOwnerType?
  ico              String?
  state            FormState      @default(DRAFT)
  error            FormError      @default(NONE)
  formDataJson     Json?
  formDataGinis    String?
  formDataBase64   String?
  // ID from Ginis, which is generated after registering the submission
  ginisDocumentId  String?        @unique
  // nases id FO, PO, alebo mesto cez tech. ucet
  senderId         String?
  // always BA
  recipientId      String?
  // kedy to bolo podane
  finishSubmission DateTime?
  schemaVersion    SchemaVersion  @relation(fields: [schemaVersionId], references: [id])
  schemaVersionId  String
  // relation to files
  files            Files[]
  archived         Boolean        @default(false)
  ginisState       GinisState     @default(CREATED)
}

enum GinisState {
  CREATED
  RUNNING_REGISTER
  REGISTERED
  RUNNING_UPLOAD_ATTACHMENTS
  ATTACHMENTS_UPLOADED
  RUNNING_EDIT_SUBMISSION
  SUBMISSION_EDITED
  RUNNING_ASSIGN_SUBMISSION
  SUBMISSION_ASSIGNED
  FINISHED
  ERROR_REGISTER
  ERROR_ATTACHMENT_UPLOAD
  ERROR_EDIT_SUBMISSION
  ERROR_ASSIGN_SUBMISSION
}

enum FormState {
  DRAFT
  QUEUED
  SENDING_TO_NASES
  DELIVERED_NASES
  DELIVERED_GINIS
  PROCESSING
  FINISHED
  REJECTED
  ERROR
}

enum FormOwnerType {
  FO
  PO
}

enum FormError {
  NONE
  RABBITMQ_MAX_TRIES
  FILES_NOT_YET_SCANNED
  UNABLE_TO_SCAN_FILES
  INFECTED_FILES
  NASES_SEND_ERROR
  GINIS_SEND_ERROR
}

model Files {
  id                 String     @id @default(uuid())
  // file indentifier
  pospId             String
  // bucket indentifier
  formId             String
  // relation to form
  forms              Forms      @relation(fields: [formId], references: [id])
  // scanner file id
  scannerId          String?    @unique
  // file name with hash
  minioFileName      String
  // original file name
  fileName           String
  // size of file
  fileSize           Int
  // status of the scanner file
  status             FileStatus @default(UPLOADED)
  // if the forms where notified about status change
  ginisOrder         Int?
  // Order of the file in Ginis submission
  ginisUploaded      Boolean    @default(false)
  // ginisOrder might not be set for every uploaded file to Ginis
  ginisUploadedError Boolean    @default(false)
  // we want to know if this file was errored or not

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pospId, formId, status])
}

enum FileStatus {
  // when file was uploaded to minio
  UPLOADED
  // when file was accepted for scanning
  ACCEPTED
  // when file is queued for scanning by the scan worker
  QUEUED
  // when file is being scanned by clamav
  SCANNING
  // when scan result is safe
  SAFE
  // when scan result is infected
  INFECTED
  // when file is not found in minio
  NOT_FOUND
  // when file is safe but there was an error while moving it to safe bucket
  MOVE_ERROR_SAFE
  // when file is infected but there was an error while moving it to infected bucket
  MOVE_ERROR_INFECTED
  // when there was a clamav error while scanning file
  SCAN_ERROR
  // when scan by clamav timed out
  SCAN_TIMEOUT
  // after x number of unsuccessful scans, this status is set
  SCAN_NOT_SUCCESSFUL
  // when file id is not found in forms
  FORM_ID_NOT_FOUND
}

model Schema {
  id              String          @id @default(uuid())
  formName        String
  // Unique slug representation of the schema in kebab case, like zastita-primatora
  slug            String          @unique
  // Optional category of the form schema
  category        String?
  // List of all versions of the schema
  versions        SchemaVersion[] @relation(name: "SchemaToVersion")
  // Default subject formularu co dotecie do schranky nasesu
  messageSubject  String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  // Latest (actual) version of the schema
  latestVersion   SchemaVersion?  @relation(name: "SchemaToLatestVersion", fields: [latestVersionId], references: [id]) // Unique relation name
  latestVersionId String?         @unique
  // If only verified accounts can send these forms
  onlyVerified    Boolean         @default(true)
}

model SchemaVersion {
  id              String  @id @default(uuid())
  // Text representation of the version (i.e. v1.0.1)
  version         String?
  // By nases
  pospID          String
  pospVersion     String
  formDescription String?

  // These fields are contens of the former files for each form
  // data.json
  data        Json
  // data.xml
  dataXml     String?
  // form.fo.xslt
  formFo      String
  // schema.json
  jsonSchema  Json
  // uiSchema.json
  uiSchema    Json
  // xmlTemplate
  xmlTemplate String

  // Dynamic message subject to send to nases
  messageSubjectFormat String?

  // For which schema is this version
  schema    Schema   @relation(name: "SchemaToVersion", fields: [schemaId], references: [id])
  schemaId  String
  // Must be signed?
  isSigned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Opposite relation field for forms
  Forms           Forms[]
  // Opposite relation field for latestVerion in Schema.
  latestSchemaFor Schema? @relation(name: "SchemaToLatestVersion")

  //if schema was upgraded, remember previous schema ID
  previousSchemaVersionId String?

  // organisiation to assign in ginis
  ginisOrganizationName String?

  // person to assign in ginis
  ginisPersonName String?
}
