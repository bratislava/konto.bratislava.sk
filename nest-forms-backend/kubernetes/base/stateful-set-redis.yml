# Source: redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${BUILD_REPOSITORY_NAME}-redis-configuration
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.6.0
    app.kubernetes.io/instance: redis
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${BUILD_REPOSITORY_NAME}-redis-health
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.6.0
    app.kubernetes.io/instance: redis
    app.kubernetes.io/managed-by: Helm
# TODO:
# data:
#   ping_readiness_local.sh: |-
#     #!/bin/bash

#     [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
#     [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
#     response=$(
#       timeout -s 3 $1 \
#       redis-cli \
#         -h localhost \
#         -p $REDIS_PORT \
#         ping
#     )
#     if [ "$?" -eq "124" ]; then
#       echo "Timed out"
#       exit 1
#     fi
#     if [ "$response" != "PONG" ]; then
#       echo "$response"
#       exit 1
#     fi
#   ping_liveness_local.sh: |-
#     #!/bin/bash

#     [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
#     [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
#     response=$(
#       timeout -s 3 $1 \
#       redis-cli \
#         -h localhost \
#         -p $REDIS_PORT \
#         ping
#     )
#     if [ "$?" -eq "124" ]; then
#       echo "Timed out"
#       exit 1
#     fi
#     responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
#     if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
#       echo "$response"
#       exit 1
#     fi
---
# Source: redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${BUILD_REPOSITORY_NAME}-redis-scripts
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.6.0
    app.kubernetes.io/instance: redis
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${BUILD_REPOSITORY_NAME}-redis
  namespace: ${NAMESPACE}
  labels:
    service: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      service: redis
  template:
    metadata:
      labels:
        service: redis
    spec:
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:11-debian-11-r72
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              chown -R 1001:1001 /data
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: redis-data
              mountPath: /data
      containers:
      - name: redis
        image: bitnami/redis:7.0.8-debian-11-r0
        command: 
          - /bin/bash
        args:
          - -c
          - /opt/bitnami/scripts/start-scripts/start-master.sh
        ports:
        - containerPort: 6379
          name: redis
        env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: REDIS_REPLICATION_MODE
            value: master
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: REDIS_PORT
            value: "6379"
        envFrom:
          - secretRef:
              name: ${BUILD_REPOSITORY_NAME}-redis-secret
        # TODO:
        # livenessProbe:
        #   initialDelaySeconds: 20
        #   periodSeconds: 5
        #   # One second longer than command timeout should prevent generation of zombie processes.
        #   timeoutSeconds: 6
        #   successThreshold: 1
        #   failureThreshold: 5
        #   exec:
        #     command:
        #       - sh
        #       - -c
        #       - /health/ping_liveness_local.sh 5
        # readinessProbe:
        #   initialDelaySeconds: 20
        #   periodSeconds: 5
        #   timeoutSeconds: 2
        #   successThreshold: 1
        #   failureThreshold: 5
        #   exec:
        #     command:
        #       - sh
        #       - -c
        #       - /health/ping_readiness_local.sh 1
        volumeMounts:
          - name: start-scripts
            mountPath: /opt/bitnami/scripts/start-scripts
          - name: health
            mountPath: /health
          - name: redis-data
            mountPath: /data
          - name: config
            mountPath: /opt/bitnami/redis/mounted-etc
          - name: redis-tmp-conf
            mountPath: /opt/bitnami/redis/etc/
          - name: tmp
            mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: ${BUILD_REPOSITORY_NAME}-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: ${BUILD_REPOSITORY_NAME}-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: ${BUILD_REPOSITORY_NAME}-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        service: redis
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "vsan-default-storage-policy"
      resources:
        requests:
          storage: 10Gi
