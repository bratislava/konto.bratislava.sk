{
  "openapi": "3.0.0",
  "paths": {
    "/healthcheck": {
      "get": {
        "description": "See if app is working!",
        "operationId": "AppController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "HealthCheck",
        "tags": [
          "App"
        ]
      }
    },
    "/auth/user": {
      "get": {
        "operationId": "AuthController_login",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return data from cognito",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CognitoGetUserData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check if user is authorized",
        "tags": [
          "Auth"
        ]
      }
    },
    "/user/get-or-create": {
      "post": {
        "description": "This endpoint return all user data in database of city account and his gdpr latest gdpr data. Null in gdpr means is not subscribe neither unsubscribe. If this endpoint will create user, create automatically License subscription.",
        "operationId": "UserController_getOrCreateUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return subscribed value for logged user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseUserDataDto"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseLegalPersonDataDto"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get or create user with his data",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/update-or-create-bloomreach-customer": {
      "post": {
        "description": "This controller will call bloomreach endpoint with bloomreach credentials from env variables. This endpoint is used to update or create bloomreach customer for logged user. It is used to track user attributes change in cognito.",
        "operationId": "UserController_updateOrCreateBloomreachCustomer",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return subscribed value for logged user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUserDataDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update or create bloomreach customer for logged user",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/remove-birthnumber": {
      "post": {
        "operationId": "UserController_removeBirthNumber",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUserDataDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/subscribe": {
      "post": {
        "description": "This endpoint is used only for logged user, user is paired by JWT token. You can send subscription data from model in array, or you can send empty array in gdprData and it will automatically create subscribed data.",
        "operationId": "UserController_subscribeLoggedUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestGdprDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return subscribed value for logged user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseUserDataDto"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseLegalPersonDataDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create subscribed or unsubscribed log for logged in users",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/unsubscribe": {
      "post": {
        "description": "This endpoint is used only for logged user, user is paired by JWTtoken. You can send unsubscription data from model in array, or you can send empty array in gdprData and it will automatically create unsubscribed data.",
        "operationId": "UserController_unsubscribeLoggedUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestGdprDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return unsubscribed and subscribed value for logged user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseUserDataDto"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseLegalPersonDataDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unsubscribe logged user",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/public/unsubscribe/{id}": {
      "get": {
        "description": "unsubscribe any user by uuid with different categories of subscription",
        "operationId": "UserController_unsubscribePublicUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "description": "Type of Gdpr subscription",
            "schema": {
              "default": "marketing",
              "type": "string",
              "enum": [
                "LICENSE",
                "MARKETING",
                "FORMAL_COMMUNICATION"
              ]
            }
          },
          {
            "name": "category",
            "required": true,
            "in": "query",
            "description": "Type of Gdpr category",
            "schema": {
              "default": "library",
              "type": "string",
              "enum": [
                "TAXES",
                "ESBS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return unsubscribed and subscribed value for logged user. You can send unsubscription data from model in array in Query, or you can send empty query and it will automatically create subscribed data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unsubscribe user by uuid",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/public/unsubscribe/external-id/{id}": {
      "get": {
        "description": "unsubscribe any user by external Id from cognito with different categories of subscription",
        "operationId": "UserController_unsubscribePublicUserByExternalId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "description": "Type of Gdpr subscription",
            "schema": {
              "default": "marketing",
              "type": "string",
              "enum": [
                "LICENSE",
                "MARKETING",
                "FORMAL_COMMUNICATION"
              ]
            }
          },
          {
            "name": "category",
            "required": true,
            "in": "query",
            "description": "Type of Gdpr category",
            "schema": {
              "default": "library",
              "type": "string",
              "enum": [
                "TAXES",
                "ESBS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return unsubscribed and subscribed value for logged user. You can send unsubscription data from model in array in Query, or you can send empty query and it will automatically create subscribed data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unsubscribe user by external Id",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user/change-email": {
      "post": {
        "description": "Change email saved in database for a given cognito user.",
        "operationId": "UserController_changeEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return info of a given user or a legal person.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseUserDataBasicDto"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseLegalPersonDataSimpleDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Change email of cognito user in database",
        "tags": [
          "Users manipulation"
        ]
      }
    },
    "/user-verification/identity-card": {
      "post": {
        "description": "This endpoint return all user data in database of city account and his gdpr latest gdpr data. Null in gdpr means is not subscribe neither unsubscribe. If this endpoint will create user, create automatically License subscription.",
        "operationId": "VerificationController_verifyBirthNumberAndIdentityCard",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBodyVerifyIdentityCardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return subscribed value for logged user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseVerificationIdentityCardToQueueDto"
                }
              }
            }
          },
          "404": {
            "description": "Birth number not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCustomErrorVerificationIdentityCardDto"
                }
              }
            }
          },
          "422": {
            "description": "Specific error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNotFoundErrorVerificationIdentityCardDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get or create user with his data",
        "tags": [
          "User verifications"
        ]
      }
    },
    "/user-verification/ico-rpo": {
      "post": {
        "description": "This endpoint validates users via the register of legal entities",
        "operationId": "VerificationController_verifyIcoBirthNumberAndIdentityCard",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBodyVerifyWithRpoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return validated user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseVerificationDto"
                }
              }
            }
          },
          "422": {
            "description": "Specific error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate user via rpo",
        "tags": [
          "User verifications"
        ]
      }
    },
    "/user-verification/eid": {
      "post": {
        "description": "This endpoint validates users via eid by contacting slovensko.sk and returns user data upon successful validation.",
        "operationId": "VerificationController_verifyWithEid",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBodyVerifyWithEidDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return validated user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseVerificationDto"
                }
              }
            }
          },
          "422": {
            "description": "Specific error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCustomErrorVerificationEidDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate user via eid",
        "tags": [
          "User verifications"
        ]
      }
    },
    "/admin/userdata": {
      "get": {
        "description": "Get user data by birthnumber",
        "operationId": "AdminController_getUserDataByBirthNumber",
        "parameters": [
          {
            "name": "birthNumber",
            "required": true,
            "in": "query",
            "description": "userBirthNumber",
            "schema": {
              "default": "8808080000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUserByBirthNumberDto"
                }
              }
            }
          },
          "404": {
            "description": "User by birth number not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get user data",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/userdata-batch": {
      "post": {
        "description": "Get user data by birthnumbers in batch.",
        "operationId": "AdminController_getUserDataByBirthNumbersBatch",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBatchQueryUsersByBirthNumbersDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserDataByBirthNumbersBatchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get user data",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/activate-sync-cognito-to-db": {
      "get": {
        "description": "This endpoint is intended to be used manually to trigger a sync of all users from cognito and then call getOrCreate for each user.",
        "operationId": "AdminController_syncCognitoToDb",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Will activate one time sync of all users from cognito to db at 3am ",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/status/user/{email}": {
      "get": {
        "description": "Return the state of user verifying.",
        "operationId": "AdminController_checkUserVerifyState",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVerifyState"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get user's verify state",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/deactivate/{externalId}": {
      "get": {
        "description": "Deactivates user account in cognito and deletes personal info from database.",
        "operationId": "AdminController_deactivateAccount",
        "parameters": [
          {
            "name": "externalId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Deactivate user account",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/mark-deceased": {
      "patch": {
        "description": "This endpoint is intended to be used manually when a person is reported as deceased. When called, it deactivates the user account in cognito and marks it as deceased.",
        "operationId": "AdminController_markAccountsAsDeceasedByBirthnumber",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkDeceasedAccountRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkDeceasedAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Mark accounts as deceased",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/user/id-card-verification-data/{email}": {
      "get": {
        "description": "Returns data used for verification by identity card for given user in the last month. If the email is for a legal person, it returns the data for the given legal person.",
        "operationId": "AdminController_getVerificationDataForUser",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All data used for verification for this user in the last month.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationDataForUserResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get verification data for user.",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/user/verify-manually/{email}": {
      "post": {
        "description": "Manually verify user, or legal person (depending on data in cognito), with provided data like birth number etc.",
        "operationId": "AdminController_verifyUserManually",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManuallyVerifyUserRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success if all was updated accordingly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlySuccessDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Manually verify user.",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/validated-users-to-physical-entities": {
      "post": {
        "description": "Warning - do not run this in parallel, you risk creating duplicates. Processes up to 1000 at once. Where physicalEntity with matching birth number but no linked user is found, it is automatically linked instead of creating a new one",
        "operationId": "AdminController_validatedUsersToPhysicalEntities",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return data from cognito",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatedUsersToPhysicalEntitiesResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create physicalEntity records for validated users",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/validate-edesk-by-cognito-where-first-try": {
      "post": {
        "description": "Take up to 100 physicalEntities linked to users without any attempts to validate uri and try using cognito data to validate",
        "operationId": "AdminController_validateEdeskForUserIds",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBodyValidateEdeskForUserIdsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return data from cognito",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEdeskForUserIdsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Validate edesk for physicalEntities",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/validate-physical-entity-rfo": {
      "post": {
        "operationId": "AdminController_validatePhysicalEntityRfo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestValidatePhysicalEntityRfoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return data from db, RFO and UPVS if available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseValidatePhysicalEntityRfoDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Manually update entity data against RFO (and UPVS) if possible",
        "tags": [
          "ADMIN"
        ]
      }
    },
    "/admin/delete-tax": {
      "post": {
        "description": "Delete tax for user, for example when the tax is cancelled in Noris.",
        "operationId": "AdminController_deleteTax",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestDeleteTaxDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success if all was updated accordingly."
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Delete tax for user",
        "tags": [
          "ADMIN"
        ]
      }
    }
  },
  "info": {
    "title": "User Module - city account",
    "description": "User module use for store additional data for users and authentication against Azure AD",
    "version": "1.0",
    "contact": {
      "name": "Bratislava Inovations",
      "url": "https://inovacie.bratislava.sk",
      "email": "inovacie@bratislava.sk"
    }
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3000/"
    },
    {
      "url": "https://nest-city-account.dev.bratislava.sk/"
    },
    {
      "url": "https://nest-city-account.staging.bratislava.sk/"
    },
    {
      "url": "https://nest-city-account.bratislava.sk/"
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "apiKey"
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "description": "Get token from cognito",
        "openIdConnectUrl": "TBD"
      }
    },
    "schemas": {
      "CognitoGetUserData": {
        "type": "object",
        "properties": {
          "sub": {
            "type": "string",
            "description": "Id from cognito",
            "default": "9e7791b2-787b-4b93-8473-94a70a516025"
          },
          "email_verified": {
            "type": "string",
            "description": "Is email verified in cognito?",
            "default": "true"
          },
          "name": {
            "type": "string",
            "description": "Usually name of the company",
            "example": "Company s.r.o."
          },
          "custom:tier": {
            "type": "object",
            "description": "Which type of verified tier it is?",
            "default": "IDENTITY_CARD"
          },
          "custom:account_type": {
            "enum": [
              "fo",
              "po",
              "fo-p"
            ],
            "type": "string",
            "description": "Which type of account it is?",
            "default": "fo"
          },
          "given_name": {
            "type": "string",
            "description": "First name",
            "default": "Jožko"
          },
          "family_name": {
            "type": "string",
            "description": "Last name",
            "default": "Bratislavský"
          },
          "email": {
            "type": "string",
            "description": "email",
            "default": "janko.bratislavsky@bratislava.sk"
          },
          "idUser": {
            "type": "string",
            "description": "User Id from cognito, same as sub",
            "default": "9e7791b2-787b-4b93-8473-94a70a516025"
          },
          "UserCreateDate": {
            "format": "date-time",
            "type": "string",
            "description": "User create date",
            "default": "2022-01-01 00:00:00"
          },
          "UserLastModifiedDate": {
            "format": "date-time",
            "type": "string",
            "description": "User updated date",
            "default": "2022-01-01 00:00:00"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Is user enabled?",
            "default": true
          },
          "UserStatus": {
            "enum": [
              "ARCHIVED",
              "COMPROMISED",
              "CONFIRMED",
              "FORCE_CHANGE_PASSWORD",
              "RESET_REQUIRED",
              "UNCONFIRMED",
              "UNKNOWN"
            ],
            "type": "string",
            "description": "Cognito confirmation statue",
            "default": "CONFIRMED"
          }
        },
        "required": [
          "sub",
          "custom:account_type",
          "email",
          "idUser",
          "Enabled"
        ]
      },
      "UserOfficialCorrespondenceChannelEnum": {
        "type": "string",
        "enum": [
          "POSTAL",
          "EDESK",
          "EMAIL"
        ],
        "description": "State, if we can communicate user with email, or user have active e-desk slovensko.sk mail or we need to communicate with him with post. First we are looking for edesk, if he has registered edesk communication in NASES use edesk. If not, check if there is subscription for communication through email, use email from city account. Else use Postal communication."
      },
      "ResponseGdprUserDataDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "TAXES",
              "ESBS"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "LICENSE",
              "MARKETING",
              "FORMAL_COMMUNICATION"
            ]
          },
          "subType": {
            "type": "string",
            "enum": [
              "unsubscribe",
              "subscribe"
            ]
          }
        },
        "required": [
          "category",
          "type",
          "subType"
        ]
      },
      "ResponseUserDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Local ID of user",
            "default": "133e0473-44da-407a-b24f-12da343e808d"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Id from cognito, it is not required. We can have also only subscribed user, who are not city account users",
            "default": "e51754f2-3367-43f6-b9bc-b5c6131b041a"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email",
            "default": "test@bratislava.sk"
          },
          "birthNumber": {
            "type": "string",
            "nullable": true,
            "description": "Birth number",
            "default": "9909090000"
          },
          "officialCorrespondenceChannel": {
            "nullable": true,
            "description": "State, if we can communicate user with email, or user have active e-desk slovensko.sk mail or we need to communicate with him with post. First we are looking for edesk, if he has registered edesk communication in NASES use edesk. If not, check if there is subscription for communication through email, use email from city account. Else use Postal communication.",
            "default": "EMAIL",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserOfficialCorrespondenceChannelEnum"
              }
            ]
          },
          "wasVerifiedBeforeTaxDeadline": {
            "type": "boolean",
            "description": "True if user was registered and have verified birth number until 2024-04-22. This date can be varied every year. In this date, user are sent into Noris and taxes will be generated.",
            "default": true
          },
          "showEmailCommunicationBanner": {
            "type": "boolean",
            "description": "Can show banner for formal communication through email? If it was shown and clicked, it will not be shown.",
            "default": true
          },
          "gdprData": {
            "description": "Subscription Data in array",
            "default": [
              {
                "category": "CITY",
                "type": "ANALYTICS",
                "subType": "unsubscribe"
              },
              {
                "category": "CITY",
                "type": "DATAPROCESSING",
                "subType": "unsubscribe"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGdprUserDataDto"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "externalId",
          "email",
          "birthNumber",
          "officialCorrespondenceChannel",
          "wasVerifiedBeforeTaxDeadline",
          "showEmailCommunicationBanner",
          "gdprData"
        ]
      },
      "ResponseGdprLegalPersonDataDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "TAXES",
              "ESBS"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "LICENSE",
              "MARKETING",
              "FORMAL_COMMUNICATION"
            ]
          },
          "subType": {
            "type": "string",
            "enum": [
              "unsubscribe",
              "subscribe"
            ]
          }
        },
        "required": [
          "category",
          "type",
          "subType"
        ]
      },
      "ResponseLegalPersonDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Local ID of user",
            "default": "133e0473-44da-407a-b24f-12da343e808d"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Id from cognito, it is not required. We can have also only subscribed user, who are not city account users",
            "default": "e51754f2-3367-43f6-b9bc-b5c6131b041a"
          },
          "ico": {
            "type": "string",
            "nullable": true,
            "description": "Ico of company, which this user represents",
            "default": "000000"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email",
            "default": "test@bratislava.sk"
          },
          "birthNumber": {
            "type": "string",
            "nullable": true,
            "description": "Birth number",
            "default": "9909090000"
          },
          "gdprData": {
            "description": "Subscription Data in array",
            "default": [
              {
                "category": "CITY",
                "type": "ANALYTICS",
                "subType": "unsubscribe"
              },
              {
                "category": "CITY",
                "type": "DATAPROCESSING",
                "subType": "unsubscribe"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGdprLegalPersonDataDto"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "externalId",
          "ico",
          "email",
          "birthNumber",
          "gdprData"
        ]
      },
      "ResponseUserDataBasicDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Local ID of user",
            "default": "133e0473-44da-407a-b24f-12da343e808d"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Id from cognito, it is not required. We can have also only subscribed user, who are not city account users",
            "default": "e51754f2-3367-43f6-b9bc-b5c6131b041a"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email",
            "default": "test@bratislava.sk"
          },
          "birthNumber": {
            "type": "string",
            "nullable": true,
            "description": "Birth number",
            "default": "9909090000"
          },
          "officialCorrespondenceChannel": {
            "nullable": true,
            "description": "State, if we can communicate user with email, or user have active e-desk slovensko.sk mail or we need to communicate with him with post. First we are looking for edesk, if he has registered edesk communication in NASES use edesk. If not, check if there is subscription for communication through email, use email from city account. Else use Postal communication.",
            "default": "EMAIL",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserOfficialCorrespondenceChannelEnum"
              }
            ]
          },
          "wasVerifiedBeforeTaxDeadline": {
            "type": "boolean",
            "description": "True if user was registered and have verified birth number until 2024-04-22. This date can be varied every year. In this date, user are sent into Noris and taxes will be generated.",
            "default": true
          },
          "showEmailCommunicationBanner": {
            "type": "boolean",
            "description": "Can show banner for formal communication through email? If it was shown and clicked, it will not be shown.",
            "default": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "externalId",
          "email",
          "birthNumber",
          "officialCorrespondenceChannel",
          "wasVerifiedBeforeTaxDeadline",
          "showEmailCommunicationBanner"
        ]
      },
      "ResponseLegalPersonDataSimpleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Local ID of user",
            "default": "133e0473-44da-407a-b24f-12da343e808d"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          },
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Id from cognito, it is not required. We can have also only subscribed user, who are not city account users",
            "default": "e51754f2-3367-43f6-b9bc-b5c6131b041a"
          },
          "ico": {
            "type": "string",
            "nullable": true,
            "description": "Ico of company, which this user represents",
            "default": "000000"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email",
            "default": "test@bratislava.sk"
          },
          "birthNumber": {
            "type": "string",
            "nullable": true,
            "description": "Birth number",
            "default": "9909090000"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "externalId",
          "ico",
          "email",
          "birthNumber"
        ]
      },
      "ResponseInternalServerErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "statusCode",
            "default": 500
          },
          "message": {
            "type": "string",
            "description": "Message about error",
            "default": "Internal server error"
          }
        },
        "required": [
          "statusCode",
          "message"
        ]
      },
      "GdprDataDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "LICENSE",
              "MARKETING",
              "FORMAL_COMMUNICATION"
            ],
            "type": "string",
            "description": "Type of Gdpr subscription",
            "default": "marketing"
          },
          "category": {
            "enum": [
              "TAXES",
              "ESBS"
            ],
            "type": "string",
            "description": "Type of Gdpr category",
            "default": "library"
          }
        },
        "required": [
          "type",
          "category"
        ]
      },
      "RequestGdprDataDto": {
        "type": "object",
        "properties": {
          "gdprData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GdprDataDto"
            }
          }
        },
        "required": [
          "gdprData"
        ]
      },
      "ChangeEmailRequestDto": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "format": "email",
            "description": "New email for a user",
            "default": "new@email.com"
          }
        },
        "required": [
          "newEmail"
        ]
      },
      "RequestBodyVerifyIdentityCardDto": {
        "type": "object",
        "properties": {
          "birthNumber": {
            "type": "string",
            "description": "Birth number for check",
            "example": "8808080000"
          },
          "identityCard": {
            "type": "string",
            "description": "String of identitiy card",
            "example": "AB123456"
          },
          "turnstileToken": {
            "type": "string",
            "description": "Token returned by turnstile captcha",
            "example": ""
          }
        },
        "required": [
          "birthNumber",
          "identityCard",
          "turnstileToken"
        ]
      },
      "ResponseVerificationIdentityCardToQueueDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "number of status code",
            "default": 200
          },
          "status": {
            "type": "string",
            "description": "status",
            "default": "OK"
          },
          "message": {
            "enum": [
              "SendToQueue",
              "AlreadyVerified"
            ],
            "type": "string",
            "description": "Message about update",
            "default": "SendToQueue"
          },
          "errorName": {
            "enum": [
              "RFO_ACCESS_ERROR",
              "RFO_NOT_RESPONDING",
              "RPO_NOT_RESPONDING",
              "DEAD_PERSON",
              "BIRTH_NUMBER_AND_IDENTITY_CARD_INCONSISTENCY",
              "BIRTHNUMBER_IFO_DUPLICITY",
              "BIRTHNUMBER_ICO_DUPLICITY",
              "BIRTH_NUMBER_NOT_EXISTS",
              "BIRTH_NUMBER_WRONG_FORMAT",
              "DATABASE_ERROR",
              "INVALID_CAPTCHA",
              "VERIFY_EID_ERROR",
              "UNEXPECTED_UPVS_RESPONSE",
              "RPO_FIELD_NOT_EXISTS",
              "ICO_NOT_PROVIDED",
              "IFO_NOT_PROVIDED",
              "EMPTY_RFO_RESPONSE",
              "EMPTY_RPO_RESPONSE"
            ],
            "type": "string",
            "description": "Error if exists",
            "default": ""
          }
        },
        "required": [
          "statusCode",
          "status",
          "message"
        ]
      },
      "ResponseCustomErrorVerificationIdentityCardDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "status",
            "default": "custom_error"
          },
          "message": {
            "type": "string",
            "description": "Message about error",
            "default": "Some detail about error"
          },
          "errorName": {
            "enum": [
              "RFO_ACCESS_ERROR",
              "RFO_NOT_RESPONDING",
              "RPO_NOT_RESPONDING",
              "DEAD_PERSON",
              "BIRTH_NUMBER_AND_IDENTITY_CARD_INCONSISTENCY",
              "BIRTHNUMBER_IFO_DUPLICITY",
              "BIRTHNUMBER_ICO_DUPLICITY",
              "BIRTH_NUMBER_NOT_EXISTS",
              "BIRTH_NUMBER_WRONG_FORMAT",
              "DATABASE_ERROR",
              "INVALID_CAPTCHA",
              "VERIFY_EID_ERROR",
              "UNEXPECTED_UPVS_RESPONSE",
              "RPO_FIELD_NOT_EXISTS",
              "ICO_NOT_PROVIDED",
              "IFO_NOT_PROVIDED",
              "EMPTY_RFO_RESPONSE",
              "EMPTY_RPO_RESPONSE"
            ],
            "type": "string",
            "description": "Error name for decoding.",
            "default": "BIRTHNUMBER_IFO_DUPLICITY"
          }
        },
        "required": [
          "status",
          "message",
          "errorName"
        ]
      },
      "ResponseNotFoundErrorVerificationIdentityCardDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "status",
            "default": "NotFound"
          },
          "message": {
            "type": "string",
            "description": "Message about error",
            "default": "This identity card number is not matching identity card for birthNumber"
          },
          "errorName": {
            "type": "string",
            "description": "Error name for decoding.",
            "default": "BIRTH_NUMBER_NOT_EXISTS"
          }
        },
        "required": [
          "status",
          "message",
          "errorName"
        ]
      },
      "RequestBodyVerifyWithRpoDto": {
        "type": "object",
        "properties": {
          "ico": {
            "type": "string",
            "description": "ico",
            "example": "00000000"
          },
          "birthNumber": {
            "type": "string",
            "description": "Birth number of legal entity's executive",
            "example": "0000000011"
          },
          "identityCard": {
            "type": "string",
            "description": "Identity card of legal entity's executive",
            "example": "AB123456"
          },
          "turnstileToken": {
            "type": "string",
            "description": "Token returned by turnstile captcha",
            "example": ""
          }
        },
        "required": [
          "ico",
          "birthNumber",
          "identityCard",
          "turnstileToken"
        ]
      },
      "ResponseVerificationDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "number of status code",
            "default": 200
          },
          "status": {
            "type": "string",
            "description": "status",
            "default": "OK"
          },
          "message": {
            "type": "string",
            "description": "Message about update",
            "default": "Tier was updated"
          },
          "errorName": {
            "enum": [
              "RFO_ACCESS_ERROR",
              "RFO_NOT_RESPONDING",
              "RPO_NOT_RESPONDING",
              "DEAD_PERSON",
              "BIRTH_NUMBER_AND_IDENTITY_CARD_INCONSISTENCY",
              "BIRTHNUMBER_IFO_DUPLICITY",
              "BIRTHNUMBER_ICO_DUPLICITY",
              "BIRTH_NUMBER_NOT_EXISTS",
              "BIRTH_NUMBER_WRONG_FORMAT",
              "DATABASE_ERROR",
              "INVALID_CAPTCHA",
              "VERIFY_EID_ERROR",
              "UNEXPECTED_UPVS_RESPONSE",
              "RPO_FIELD_NOT_EXISTS",
              "ICO_NOT_PROVIDED",
              "IFO_NOT_PROVIDED",
              "EMPTY_RFO_RESPONSE",
              "EMPTY_RPO_RESPONSE"
            ],
            "type": "string",
            "description": "Error if exists",
            "default": ""
          }
        },
        "required": [
          "statusCode",
          "status",
          "message"
        ]
      },
      "HttpException": {
        "type": "object",
        "properties": {}
      },
      "RequestBodyVerifyWithEidDto": {
        "type": "object",
        "properties": {
          "oboToken": {
            "type": "string",
            "description": "Token returned by https://fix.slovensko-sk-api.bratislava.sk/login",
            "example": ""
          }
        },
        "required": [
          "oboToken"
        ]
      },
      "ResponseCustomErrorVerificationEidDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "status",
            "default": "custom_error"
          },
          "message": {
            "type": "string",
            "description": "Message about error",
            "default": "Some detail about error"
          },
          "errorName": {
            "enum": [
              "RFO_ACCESS_ERROR",
              "RFO_NOT_RESPONDING",
              "RPO_NOT_RESPONDING",
              "DEAD_PERSON",
              "BIRTH_NUMBER_AND_IDENTITY_CARD_INCONSISTENCY",
              "BIRTHNUMBER_IFO_DUPLICITY",
              "BIRTHNUMBER_ICO_DUPLICITY",
              "BIRTH_NUMBER_NOT_EXISTS",
              "BIRTH_NUMBER_WRONG_FORMAT",
              "DATABASE_ERROR",
              "INVALID_CAPTCHA",
              "VERIFY_EID_ERROR",
              "UNEXPECTED_UPVS_RESPONSE",
              "RPO_FIELD_NOT_EXISTS",
              "ICO_NOT_PROVIDED",
              "IFO_NOT_PROVIDED",
              "EMPTY_RFO_RESPONSE",
              "EMPTY_RPO_RESPONSE"
            ],
            "type": "string",
            "description": "Error name for decoding.",
            "default": "VERIFY_EID_ERROR"
          }
        },
        "required": [
          "status",
          "message",
          "errorName"
        ]
      },
      "ResponseUserByBirthNumberDto": {
        "type": "object",
        "properties": {
          "birthNumber": {
            "type": "string",
            "nullable": true,
            "description": "userBirthNumber",
            "default": "8808080000"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "email",
            "default": "brtaislavcan@bratislava.sk"
          },
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Cognito Id",
            "default": "d18cbd7c-daad-4d5d-a1d7-8e47f845baab"
          },
          "userAttribute": {
            "type": "object",
            "description": "Special user attribute for user segmentation",
            "default": "TAX2023"
          },
          "cognitoAttributes": {
            "type": "object",
            "description": "Tier from cognito",
            "default": "IDENTITY_CARD"
          }
        },
        "required": [
          "birthNumber",
          "email",
          "externalId",
          "userAttribute"
        ]
      },
      "RequestBatchQueryUsersByBirthNumbersDto": {
        "type": "object",
        "properties": {
          "birthNumbers": {
            "description": "Birth numbers without slash which should be retrieved from user database.",
            "default": [
              "0000000000",
              "0000001010"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "birthNumbers"
        ]
      },
      "GetUserDataByBirthNumbersBatchResponseDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "object",
            "description": "A record of users keyed by their birth number",
            "additionalProperties": {
              "type": "ResponseUserByBirthNumberDto"
            }
          }
        },
        "required": [
          "users"
        ]
      },
      "UserVerifyState": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Id of given user's email, if exists"
          },
          "type": {
            "enum": [
              "fo",
              "po",
              "fo-p"
            ],
            "type": "string",
            "description": "Type of user.",
            "example": "po"
          },
          "isInDatabase": {
            "type": "boolean",
            "description": "Marks if the user with given email is in database.",
            "example": true
          },
          "isInCognito": {
            "type": "boolean",
            "description": "Marks if the user with given email is in cognito.",
            "example": true
          },
          "cognitoTier": {
            "type": "string",
            "description": "Current cognito tier, marks the status of verifying.",
            "example": "NOT_VERIFIED_IDENTITY_CARD",
            "enum": [
              "NEW",
              "QUEUE_IDENTITY_CARD",
              "NOT_VERIFIED_IDENTITY_CARD",
              "IDENTITY_CARD",
              "EID"
            ]
          },
          "birthNumberAlreadyExists": {
            "type": "string",
            "description": "If set, then this number was used for verifiying, but is already in our database for other user.",
            "example": "7902301011"
          },
          "birthNumberIcoAlreadyExists": {
            "type": "string",
            "description": "If set, then this number was used for verifiying, but is already in our database for other user.",
            "example": "7902301011"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Marks if the user with given email is verified.",
            "example": false
          },
          "possibleCause": {
            "type": "string",
            "description": "Possible cause of the verify error.",
            "example": "TODO"
          }
        },
        "required": [
          "isInDatabase",
          "isInCognito",
          "isVerified"
        ]
      },
      "DeactivateAccountResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Marks if the operation has been successful",
            "example": true
          },
          "bloomreachRemoved": {
            "enum": [
              "NOT_FOUND",
              "NOT_ACTIVE",
              "ERROR",
              "SUCCESS"
            ],
            "type": "string",
            "description": "Status of the anonymization of user in bloomreach",
            "example": "SUCCESS"
          },
          "taxDeliveryMethodsRemoved": {
            "type": "boolean",
            "description": "Status of the removal of tax delivery methods in Noris. If false, there was an error. If true it was successful, or the user is not a tax payer in Noris.",
            "example": true
          }
        },
        "required": [
          "success",
          "bloomreachRemoved",
          "taxDeliveryMethodsRemoved"
        ]
      },
      "MarkDeceasedAccountRequestDto": {
        "type": "object",
        "properties": {
          "birthNumbers": {
            "description": "List of birthnumbers/external IDs to mark as deceased",
            "example": [
              "1234567890",
              "2345678901",
              "3456789012"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "birthNumbers"
        ]
      },
      "MarkDeceasedAccountResponseItemDto": {
        "type": "object",
        "properties": {
          "birthNumber": {
            "type": "string",
            "description": "Birth number of the deceased person",
            "example": "1234567890"
          },
          "databaseMarked": {
            "type": "boolean",
            "description": "Whether the user was successfully marked as deceased in the database",
            "example": true
          },
          "cognitoArchived": {
            "type": "boolean",
            "description": "Whether the user was successfully archived in Cognito / mail was changed.",
            "example": true
          },
          "bloomreachRemoved": {
            "enum": [
              "NOT_FOUND",
              "NOT_ACTIVE",
              "ERROR",
              "SUCCESS"
            ],
            "type": "string",
            "description": "Status of the anonymization of user in Bloomreach",
            "example": "SUCCESS"
          }
        },
        "required": [
          "birthNumber",
          "databaseMarked",
          "cognitoArchived"
        ]
      },
      "MarkDeceasedAccountResponseDto": {
        "type": "object",
        "properties": {
          "results": {
            "description": "List of birth numbers with success marked for each data storage.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkDeceasedAccountResponseItemDto"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "VerificationDataForUser": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user in cognito.",
            "example": "a86bdfb7-7134-4dc2-b49b-1bc051d3825b"
          },
          "birthNumber": {
            "type": "string",
            "description": "userBirthNumber",
            "default": "8808080000"
          },
          "idCard": {
            "type": "string",
            "description": "Id card used for verification.",
            "example": "AA123123"
          },
          "ico": {
            "type": "string",
            "description": "Ico used for verification.",
            "example": "65451354"
          },
          "verifyStart": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "default": "2023-02-10T10:31:49.247Z"
          }
        },
        "required": [
          "userId",
          "birthNumber",
          "idCard",
          "verifyStart"
        ]
      },
      "VerificationDataForUserResponseDto": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "description": "Id of the user in cognito.",
            "example": "a86bdfb7-7134-4dc2-b49b-1bc051d3825b"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "Email of the user.",
            "example": "test@bratislava.sk"
          },
          "verificationDataLastMonth": {
            "description": "Verification data for the user in the last month. Ordered by start date descending.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationDataForUser"
            }
          }
        },
        "required": [
          "externalId",
          "email",
          "verificationDataLastMonth"
        ]
      },
      "ManuallyVerifyUserRequestDto": {
        "type": "object",
        "properties": {
          "birthNumber": {
            "type": "string",
            "description": "userBirthNumber",
            "default": "8808080000"
          },
          "ifo": {
            "type": "string",
            "description": "Ifo of the user",
            "example": "123456987"
          },
          "ico": {
            "type": "string",
            "description": "ico",
            "example": "00000000"
          }
        },
        "required": [
          "birthNumber"
        ]
      },
      "OnlySuccessDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Marks if the operation has been successful",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "ValidatedUsersToPhysicalEntitiesResponseDto": {
        "type": "object",
        "properties": {
          "existingPhysicalEntitiesUpdated": {
            "type": "number"
          },
          "newPhysicalEntitiesCreated": {
            "type": "number"
          }
        },
        "required": [
          "existingPhysicalEntitiesUpdated",
          "newPhysicalEntitiesCreated"
        ]
      },
      "RequestBodyValidateEdeskForUserIdsDto": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "number",
            "description": "How many records to skip",
            "example": 0
          }
        }
      },
      "ValidateEdeskForUserIdsResponseDto": {
        "type": "object",
        "properties": {
          "validatedUsers": {
            "type": "number",
            "description": "Number of users that were validated",
            "example": 1
          },
          "enitites": {
            "type": "object",
            "description": "Temp debug data",
            "example": null
          }
        },
        "required": [
          "validatedUsers",
          "enitites"
        ]
      },
      "RequestValidatePhysicalEntityRfoDto": {
        "type": "object",
        "properties": {
          "physicalEntityId": {
            "type": "string",
            "format": "uuid",
            "description": "Id of the physical entity object in db",
            "example": "a86bdfb7-7134-4dc2-b49b-1bc051d3825b"
          }
        },
        "required": [
          "physicalEntityId"
        ]
      },
      "ResponseValidatePhysicalEntityRfoDto": {
        "type": "object",
        "properties": {
          "physicalEntity": {
            "type": "object",
            "description": "Entity data (updated if new info was found in state registry)",
            "example": {}
          },
          "rfoData": {
            "type": "object",
            "description": "Data received from RFO",
            "example": {}
          },
          "upvsResult": {
            "type": "object",
            "description": "Data received from UPVS",
            "example": {}
          }
        },
        "required": [
          "physicalEntity",
          "rfoData",
          "upvsResult"
        ]
      },
      "RequestDeleteTaxDto": {
        "type": "object",
        "properties": {
          "year": {
            "type": "number",
            "description": "Year of tax",
            "default": 2022
          },
          "birthNumber": {
            "type": "string",
            "description": "Birth number in format with slash",
            "example": "0000000000"
          }
        },
        "required": [
          "year",
          "birthNumber"
        ]
      }
    }
  }
}