// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "darwin-arm64", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TaxPayer {
  id                          Int               @id @default(autoincrement())
  uuid                        String            @default(uuid()) @db.Uuid
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @default(now()) @updatedAt
  birthNumber                 String // with slash
  taxAdministratorId          Int?
  taxAdministrator            TaxAdministrator? @relation(fields: [taxAdministratorId], references: [id])
  permanentResidenceAddress   String?
  externalId                  String?
  name                        String?
  nameTxt                     String?
  permanentResidenceStreetTxt String?
  permanentResidenceStreet    String?
  permanentResidenceZip       String?
  permanentResidenceCity      String?

  taxes Tax[]

  @@unique([birthNumber])
  @@unique([uuid])
}

model Tax {
  id                              Int                  @id @default(autoincrement())
  uuid                            String               @default(uuid()) @db.Uuid
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @default(now()) @updatedAt
  year                            Int
  taxPayerId                      Int
  taxPayer                        TaxPayer             @relation(fields: [taxPayerId], references: [id], onDelete: Cascade)
  amount                          Int
  variableSymbol                  String
  qrCodeWeb                       String?
  qrCodeEmail                     String?
  taxId                           String?
  dateCreateTax                   String?
  dateTaxRuling                   DateTime? // "dátum právoplatnosti rozhodnutia"
  taxLand                         Int?
  taxConstructions                Int?
  taxFlat                         Int?
  taxPayments                     TaxPayment[]
  taxInstallments                 TaxInstallment[]
  taxDetails                      TaxDetail[]
  lastCheckedPayments             DateTime             @default(now())
  lastCheckedUpdates              DateTime             @default(now())
  deliveryMethod                  DeliveryMethodNamed? // Delivery method for the given tax.
  bloomreachUnpaidTaxReminderSent Boolean              @default(false)

  @@unique([taxPayerId, year])
  @@unique([uuid])
  @@index([year, lastCheckedPayments])
}

model TaxPayment {
  id             Int               @id @default(autoincrement())
  orderId        String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  taxId          Int
  tax            Tax               @relation(fields: [taxId], references: [id], onDelete: Cascade)
  status         PaymentStatus     @default(NEW)
  amount         Int
  specificSymbol String?
  source         TaxPaymentSource?

  @@unique([orderId])
  @@index([status])
}

model TaxInstallment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  taxId     Int
  tax       Tax      @relation(fields: [taxId], references: [id], onDelete: Cascade)
  order     Int
  amount    Int
  text      String?
}

model TaxDetail {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  taxId     Int
  tax       Tax               @relation(fields: [taxId], references: [id], onDelete: Cascade)
  type      TaxDetailType
  areaType  TaxDetailareaType
  area      String?
  base      Int
  amount    Int
}

model TaxAdministrator {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  externalId  String
  name        String
  phoneNumber String
  email       String
  TaxPayer    TaxPayer[]
}

model CsvFile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String   @unique
}

model Config {
  id         Int      @id @default(autoincrement())
  key        String
  value      String
  validSince DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum TaxDetailType {
  APARTMENT
  CONSTRUCTION
  GROUND
}

enum TaxPaymentSource {
  CARD
  QRCODE
  BANK_ACCOUNT
  POST
  CASH
}

enum TaxDetailareaType {
  NONRESIDENTIAL
  RESIDENTIAL
  A
  B
  C
  D
  E
  F
  G
  H
  jH
  jI
  byt
  nebyt
}

enum PaymentStatus {
  NEW
  FAIL
  SUCCESS
}

enum DeliveryMethodNamed {
  EDESK
  POSTAL
  CITY_ACCOUNT
}
