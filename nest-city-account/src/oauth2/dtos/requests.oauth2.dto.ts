import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'
import {
  IsNotEmpty,
  IsOptional,
  IsString,
  IsIn,
  IsUrl,
  Matches,
  MaxLength,
  MinLength,
} from 'class-validator'

/**
 * Request DTO for OAuth2 Authorization Endpoint
 * Implements RFC 6749 (OAuth 2.0) + RFC 7636 (PKCE)
 */
export class AuthorizationRequestDto {
  @ApiProperty({
    description: 'Must be "code" for Authorization Code flow with PKCE',
    example: 'code',
    enum: ['code'],
  })
  @IsString()
  @IsIn(['code'], { message: 'response_type must be "code"' })
  response_type!: string

  @ApiProperty({
    description: 'The client identifier for your application',
    example: 'your-client-id',
  })
  @IsNotEmpty()
  @IsString()
  client_id!: string

  @ApiProperty({
    description: 'The redirect URI registered for your application',
    example: 'https://your-app.com/callback',
  })
  @IsNotEmpty()
  @IsUrl({ protocols: ['http', 'https'], require_protocol: true })
  redirect_uri!: string

  @ApiPropertyOptional({
    description: 'Space-delimited list of scopes',
    example: 'openid profile email',
    default: '',
  })
  @IsOptional()
  @IsString()
  scope?: string

  @ApiPropertyOptional({
    description: 'CSRF protection: random value generated by the app and returned unchanged (RECOMMENDED per RFC 6749)',
    example: 'xK8F2j9pL3mN7qR',
  })
  @IsOptional()
  @IsString()
  @MinLength(1)
  state?: string

  @ApiPropertyOptional({
    description: 'Code challenge for PKCE (RFC 7636). Optional - only required if using PKCE or if client requires it',
    example: 'E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM',
  })
  @IsOptional()
  @IsString()
  @Matches(/^[A-Za-z0-9\-._~]{43,128}$/, {
    message: 'code_challenge must be between 43 and 128 characters and contain only A-Z, a-z, 0-9, and -._~',
  })
  code_challenge?: string

  @ApiPropertyOptional({
    description: 'Code challenge method for PKCE. Optional - required if code_challenge is provided',
    example: 'S256',
    enum: ['S256', 'plain'],
    default: 'S256',
  })
  @IsOptional()
  @IsString()
  @IsIn(['S256', 'plain'], { message: 'code_challenge_method must be "S256" or "plain"' })
  code_challenge_method?: string

  @ApiPropertyOptional({
    description: 'End-user authentication hint',
    example: 'user@example.com',
  })
  @IsOptional()
  @IsString()
  login_hint?: string

  @ApiPropertyOptional({
    description: 'Hint about the login identifier the End-User might use',
  })
  @IsOptional()
  @IsString()
  @MaxLength(255)
  ui_locales?: string
}

/**
 * Request DTO for OAuth2 Token Endpoint with Authorization Code + PKCE
 * Implements RFC 6749 (OAuth 2.0) + RFC 7636 (PKCE)
 */
export class TokenRequestDto {
  @ApiProperty({
    description: 'Grant type, must be "authorization_code"',
    example: 'authorization_code',
    enum: ['authorization_code'],
  })
  @IsString()
  @IsIn(['authorization_code'], { message: 'grant_type must be "authorization_code"' })
  grant_type!: string

  @ApiProperty({
    description: 'Authorization code received from the authorization endpoint',
    example: 'SplxlOBeZQQYbYS6WxSbIA',
  })
  @IsNotEmpty()
  @IsString()
  code!: string

  @ApiProperty({
    description: 'Must be identical to the redirect_uri used in the authorization request',
    example: 'https://your-app.com/callback',
  })
  @IsNotEmpty()
  @IsUrl({ protocols: ['http', 'https'], require_protocol: true })
  redirect_uri!: string

  @ApiProperty({
    description: 'Code verifier for PKCE (RFC 7636). Must match the code_challenge from authorization request',
    example: 'dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk',
  })
  @IsNotEmpty()
  @IsString()
  @Matches(/^[A-Za-z0-9\-._~]{43,128}$/, {
    message: 'code_verifier must be between 43 and 128 characters and contain only A-Z, a-z, 0-9, and -._~',
  })
  code_verifier!: string

  @ApiPropertyOptional({
    description: 'The client identifier (optional if using client_secret)',
    example: 'your-client-id',
  })
  @IsOptional()
  @IsString()
  client_id?: string

  @ApiPropertyOptional({
    description: 'The client secret (if required by authorization server)',
    example: 'your-client-secret',
  })
  @IsOptional()
  @IsString()
  client_secret?: string

  @ApiPropertyOptional({
    description: 'The value of the state parameter sent in authorization request (for verification)',
    example: 'xK8F2j9pL3mN7qR',
  })
  @IsOptional()
  @IsString()
  state?: string
}

/**
 * Request DTO for OAuth2 Continue Endpoint
 * Called by frontend after user authentication to complete the authorization flow
 */
export class ContinueRequestDto {
  @ApiProperty({
    description: 'Access token from user authentication (e.g., from Cognito)',
    example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...',
  })
  @IsNotEmpty()
  @IsString()
  access_token!: string

  @ApiPropertyOptional({
    description: 'ID token from user authentication (if using OpenID Connect)',
    example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...',
  })
  @IsOptional()
  @IsString()
  id_token?: string

  @ApiPropertyOptional({
    description: 'Refresh token from user authentication',
    example: 'def50200f3b2a7b4e8b1c...',
  })
  @IsOptional()
  @IsString()
  refresh_token?: string

  @ApiProperty({
    description: 'Base64-encoded payload containing the original authorization request parameters',
    example: 'eyJjbGllbnRfaWQiOiJteS1jbGllbnQtaWQiLCJyZWRpcmVjdF91cmkiOiJodHRwczovL2V4YW1wbGUuY29tL2NhbGxiYWNrIn0=',
  })
  @IsNotEmpty()
  @IsString()
  payload!: string
}

/**
 * Request DTO for Token Refresh Endpoint
 * Implements RFC 6749 Section 6
 */
export class RefreshTokenRequestDto {
  @ApiProperty({
    description: 'Grant type, must be "refresh_token"',
    example: 'refresh_token',
    enum: ['refresh_token'],
  })
  @IsString()
  @IsIn(['refresh_token'], { message: 'grant_type must be "refresh_token"' })
  grant_type!: string

  @ApiProperty({
    description: 'The refresh token issued by the authorization server',
    example: 'def50200f3b2a7b4e8b1c...',
  })
  @IsNotEmpty()
  @IsString()
  refresh_token!: string

  @ApiPropertyOptional({
    description: 'Space-delimited list of scopes (optional - should not request new scopes)',
    example: 'openid profile email',
  })
  @IsOptional()
  @IsString()
  scope?: string

  @ApiPropertyOptional({
    description: 'The client identifier (optional if using client_secret)',
    example: 'your-client-id',
  })
  @IsOptional()
  @IsString()
  client_id?: string

  @ApiPropertyOptional({
    description: 'The client secret (if required by authorization server)',
    example: 'your-client-secret',
  })
  @IsOptional()
  @IsString()
  client_secret?: string
}

