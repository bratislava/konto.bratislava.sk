### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentBlocksFormLandingPage {
  formCta: ComponentBlocksFormLandingPageFormCta!
  id: ID!
  linkCtas(filters: ComponentBlocksFormLandingPageLinkCtaFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksFormLandingPageLinkCta]
  text: String
}

input ComponentBlocksFormLandingPageFiltersInput {
  and: [ComponentBlocksFormLandingPageFiltersInput]
  formCta: ComponentBlocksFormLandingPageFormCtaFiltersInput
  linkCtas: ComponentBlocksFormLandingPageLinkCtaFiltersInput
  not: ComponentBlocksFormLandingPageFiltersInput
  or: [ComponentBlocksFormLandingPageFiltersInput]
  text: StringFilterInput
}

type ComponentBlocksFormLandingPageFormCta {
  buttonLabel: String!
  id: ID!
  text: String
  title: String!
}

input ComponentBlocksFormLandingPageFormCtaFiltersInput {
  and: [ComponentBlocksFormLandingPageFormCtaFiltersInput]
  buttonLabel: StringFilterInput
  not: ComponentBlocksFormLandingPageFormCtaFiltersInput
  or: [ComponentBlocksFormLandingPageFormCtaFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentBlocksFormLandingPageFormCtaInput {
  buttonLabel: String
  id: ID
  text: String
  title: String
}

input ComponentBlocksFormLandingPageInput {
  formCta: ComponentBlocksFormLandingPageFormCtaInput
  id: ID
  linkCtas: [ComponentBlocksFormLandingPageLinkCtaInput]
  text: String
}

type ComponentBlocksFormLandingPageLinkCta {
  buttonLabel: String!
  id: ID!
  text: String
  title: String!
  url: String!
}

input ComponentBlocksFormLandingPageLinkCtaFiltersInput {
  and: [ComponentBlocksFormLandingPageLinkCtaFiltersInput]
  buttonLabel: StringFilterInput
  not: ComponentBlocksFormLandingPageLinkCtaFiltersInput
  or: [ComponentBlocksFormLandingPageLinkCtaFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentBlocksFormLandingPageLinkCtaInput {
  buttonLabel: String
  id: ID
  text: String
  title: String
  url: String
}

type ComponentBlocksHelpCategory {
  id: ID!
  items(filters: ComponentBlocksHelpItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksHelpItem]!
  title: String!
}

input ComponentBlocksHelpCategoryFiltersInput {
  and: [ComponentBlocksHelpCategoryFiltersInput]
  items: ComponentBlocksHelpItemFiltersInput
  not: ComponentBlocksHelpCategoryFiltersInput
  or: [ComponentBlocksHelpCategoryFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksHelpCategoryInput {
  id: ID
  items: [ComponentBlocksHelpItemInput]
  title: String
}

type ComponentBlocksHelpItem {
  content: String!
  id: ID!
  title: String!
}

input ComponentBlocksHelpItemFiltersInput {
  and: [ComponentBlocksHelpItemFiltersInput]
  content: StringFilterInput
  not: ComponentBlocksHelpItemFiltersInput
  or: [ComponentBlocksHelpItemFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksHelpItemInput {
  content: String
  id: ID
  title: String
}

type ComponentGeneralAlert {
  content: String!
  dateFrom: DateTime
  dateTo: DateTime
  id: ID!
}

input ComponentGeneralAlertFiltersInput {
  and: [ComponentGeneralAlertFiltersInput]
  content: StringFilterInput
  dateFrom: DateTimeFilterInput
  dateTo: DateTimeFilterInput
  not: ComponentGeneralAlertFiltersInput
  or: [ComponentGeneralAlertFiltersInput]
}

input ComponentGeneralAlertInput {
  content: String
  dateFrom: DateTime
  dateTo: DateTime
  id: ID
}

type ContentReleasesRelease {
  actions(filters: ContentReleasesReleaseActionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContentReleasesReleaseActionRelationResponseCollection
  createdAt: DateTime
  name: String!
  releasedAt: DateTime
  scheduledAt: DateTime
  timezone: String
  updatedAt: DateTime
}

type ContentReleasesReleaseAction {
  contentType: String!
  createdAt: DateTime
  entry: GenericMorph
  locale: String
  release: ContentReleasesReleaseEntityResponse
  type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE!
  updatedAt: DateTime
}

type ContentReleasesReleaseActionEntity {
  attributes: ContentReleasesReleaseAction
  id: ID
}

type ContentReleasesReleaseActionEntityResponse {
  data: ContentReleasesReleaseActionEntity
}

type ContentReleasesReleaseActionEntityResponseCollection {
  data: [ContentReleasesReleaseActionEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentReleasesReleaseActionFiltersInput {
  and: [ContentReleasesReleaseActionFiltersInput]
  contentType: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  not: ContentReleasesReleaseActionFiltersInput
  or: [ContentReleasesReleaseActionFiltersInput]
  release: ContentReleasesReleaseFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContentReleasesReleaseActionInput {
  contentType: String
  locale: String
  release: ID
  type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE
}

type ContentReleasesReleaseActionRelationResponseCollection {
  data: [ContentReleasesReleaseActionEntity!]!
}

type ContentReleasesReleaseEntity {
  attributes: ContentReleasesRelease
  id: ID
}

type ContentReleasesReleaseEntityResponse {
  data: ContentReleasesReleaseEntity
}

type ContentReleasesReleaseEntityResponseCollection {
  data: [ContentReleasesReleaseEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentReleasesReleaseFiltersInput {
  actions: ContentReleasesReleaseActionFiltersInput
  and: [ContentReleasesReleaseFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ContentReleasesReleaseFiltersInput
  or: [ContentReleasesReleaseFiltersInput]
  releasedAt: DateTimeFilterInput
  scheduledAt: DateTimeFilterInput
  timezone: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContentReleasesReleaseInput {
  actions: [ID]
  name: String
  releasedAt: DateTime
  scheduledAt: DateTime
  timezone: String
}

type ContentReleasesReleaseRelationResponseCollection {
  data: [ContentReleasesReleaseEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_CONTENTRELEASESRELEASEACTION_TYPE {
  publish
  unpublish
}

enum ENUM_MUNICIPALSERVICE_COLOR {
  culture
  education
  environment
  main
  marianum
  olo
  social
  transport
  tsb
}

enum ENUM_MUNICIPALSERVICE_ICON {
  administration
  christmas_tree
  community_gardens
  connector
  cultural_organizations
  events_support
  excavations
  front_gardens
  greenery
  housing
  kids_teenagers
  lamp
  library
  management_communications
  marianum
  mosquito
  parking
  public_space_occupation
  security
  spatial_planning
  swimming_pool
  taxes
  towing
  transport
  waste
  zoo
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type Form {
  createdAt: DateTime
  landingPage: ComponentBlocksFormLandingPage
  moreInformationUrl: String
  slug: String!
  updatedAt: DateTime
}

type FormEntity {
  attributes: Form
  id: ID
}

type FormEntityResponse {
  data: FormEntity
}

type FormEntityResponseCollection {
  data: [FormEntity!]!
  meta: ResponseCollectionMeta!
}

input FormFiltersInput {
  and: [FormFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  landingPage: ComponentBlocksFormLandingPageFiltersInput
  moreInformationUrl: StringFilterInput
  not: FormFiltersInput
  or: [FormFiltersInput]
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FormInput {
  landingPage: ComponentBlocksFormLandingPageInput
  moreInformationUrl: String
  slug: String
}

type FormRelationResponseCollection {
  data: [FormEntity!]!
}

type General {
  alerts(filters: ComponentGeneralAlertFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGeneralAlert]
  createdAt: DateTime
  updatedAt: DateTime
}

type GeneralEntity {
  attributes: General
  id: ID
}

type GeneralEntityResponse {
  data: GeneralEntity
}

type GeneralEntityResponseCollection {
  data: [GeneralEntity!]!
  meta: ResponseCollectionMeta!
}

input GeneralFiltersInput {
  alerts: ComponentGeneralAlertFiltersInput
  and: [GeneralFiltersInput]
  createdAt: DateTimeFilterInput
  not: GeneralFiltersInput
  or: [GeneralFiltersInput]
  updatedAt: DateTimeFilterInput
}

input GeneralInput {
  alerts: [ComponentGeneralAlertInput]
}

type GeneralRelationResponseCollection {
  data: [GeneralEntity!]!
}

union GenericMorph = ComponentBlocksFormLandingPage | ComponentBlocksFormLandingPageFormCta | ComponentBlocksFormLandingPageLinkCta | ComponentBlocksHelpCategory | ComponentBlocksHelpItem | ComponentGeneralAlert | ContentReleasesRelease | ContentReleasesReleaseAction | Form | General | HelpPage | Homepage | HomepageAnnouncement | I18NLocale | MunicipalService | MunicipalServiceCategory | MunicipalServiceTag | MunicipalServicesPage | Tax | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type HelpPage {
  categories(filters: ComponentBlocksHelpCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksHelpCategory]!
  createdAt: DateTime
  updatedAt: DateTime
}

type HelpPageEntity {
  attributes: HelpPage
  id: ID
}

type HelpPageEntityResponse {
  data: HelpPageEntity
}

type HelpPageEntityResponseCollection {
  data: [HelpPageEntity!]!
  meta: ResponseCollectionMeta!
}

input HelpPageFiltersInput {
  and: [HelpPageFiltersInput]
  categories: ComponentBlocksHelpCategoryFiltersInput
  createdAt: DateTimeFilterInput
  not: HelpPageFiltersInput
  or: [HelpPageFiltersInput]
  updatedAt: DateTimeFilterInput
}

input HelpPageInput {
  categories: [ComponentBlocksHelpCategoryInput]
}

type HelpPageRelationResponseCollection {
  data: [HelpPageEntity!]!
}

type Homepage {
  announcements(filters: HomepageAnnouncementFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HomepageAnnouncementRelationResponseCollection
  announcementsLegalPerson(filters: HomepageAnnouncementFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HomepageAnnouncementRelationResponseCollection
  createdAt: DateTime
  services(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceRelationResponseCollection
  servicesLegalPerson(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceRelationResponseCollection
  updatedAt: DateTime
}

type HomepageAnnouncement {
  buttonText: String!
  createdAt: DateTime
  dateFrom: DateTime
  dateTo: DateTime
  description: String!
  href: String!
  image: UploadFileEntityResponse!
  title: String!
  updatedAt: DateTime
}

type HomepageAnnouncementEntity {
  attributes: HomepageAnnouncement
  id: ID
}

type HomepageAnnouncementEntityResponse {
  data: HomepageAnnouncementEntity
}

type HomepageAnnouncementEntityResponseCollection {
  data: [HomepageAnnouncementEntity!]!
  meta: ResponseCollectionMeta!
}

input HomepageAnnouncementFiltersInput {
  and: [HomepageAnnouncementFiltersInput]
  buttonText: StringFilterInput
  createdAt: DateTimeFilterInput
  dateFrom: DateTimeFilterInput
  dateTo: DateTimeFilterInput
  description: StringFilterInput
  href: StringFilterInput
  id: IDFilterInput
  not: HomepageAnnouncementFiltersInput
  or: [HomepageAnnouncementFiltersInput]
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input HomepageAnnouncementInput {
  buttonText: String
  dateFrom: DateTime
  dateTo: DateTime
  description: String
  href: String
  image: ID
  title: String
}

type HomepageAnnouncementRelationResponseCollection {
  data: [HomepageAnnouncementEntity!]!
}

type HomepageEntity {
  attributes: Homepage
  id: ID
}

type HomepageEntityResponse {
  data: HomepageEntity
}

type HomepageEntityResponseCollection {
  data: [HomepageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomepageFiltersInput {
  and: [HomepageFiltersInput]
  announcements: HomepageAnnouncementFiltersInput
  announcementsLegalPerson: HomepageAnnouncementFiltersInput
  createdAt: DateTimeFilterInput
  not: HomepageFiltersInput
  or: [HomepageFiltersInput]
  services: MunicipalServiceFiltersInput
  servicesLegalPerson: MunicipalServiceFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomepageInput {
  announcements: [ID]
  announcementsLegalPerson: [ID]
  services: [ID]
  servicesLegalPerson: [ID]
}

type HomepageRelationResponseCollection {
  data: [HomepageEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type MunicipalService {
  buttonText: String!
  categories(filters: MunicipalServiceCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceCategoryRelationResponseCollection
  color: ENUM_MUNICIPALSERVICE_COLOR!
  createdAt: DateTime
  description: String!
  href: String!
  icon: ENUM_MUNICIPALSERVICE_ICON!
  tags(filters: MunicipalServiceTagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceTagRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type MunicipalServiceCategory {
  createdAt: DateTime
  municipalServices(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type MunicipalServiceCategoryEntity {
  attributes: MunicipalServiceCategory
  id: ID
}

type MunicipalServiceCategoryEntityResponse {
  data: MunicipalServiceCategoryEntity
}

type MunicipalServiceCategoryEntityResponseCollection {
  data: [MunicipalServiceCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input MunicipalServiceCategoryFiltersInput {
  and: [MunicipalServiceCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  municipalServices: MunicipalServiceFiltersInput
  not: MunicipalServiceCategoryFiltersInput
  or: [MunicipalServiceCategoryFiltersInput]
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MunicipalServiceCategoryInput {
  municipalServices: [ID]
  title: String
}

type MunicipalServiceCategoryRelationResponseCollection {
  data: [MunicipalServiceCategoryEntity!]!
}

type MunicipalServiceEntity {
  attributes: MunicipalService
  id: ID
}

type MunicipalServiceEntityResponse {
  data: MunicipalServiceEntity
}

type MunicipalServiceEntityResponseCollection {
  data: [MunicipalServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input MunicipalServiceFiltersInput {
  and: [MunicipalServiceFiltersInput]
  buttonText: StringFilterInput
  categories: MunicipalServiceCategoryFiltersInput
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  href: StringFilterInput
  icon: StringFilterInput
  id: IDFilterInput
  not: MunicipalServiceFiltersInput
  or: [MunicipalServiceFiltersInput]
  tags: MunicipalServiceTagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MunicipalServiceInput {
  buttonText: String
  categories: [ID]
  color: ENUM_MUNICIPALSERVICE_COLOR
  description: String
  href: String
  icon: ENUM_MUNICIPALSERVICE_ICON
  tags: [ID]
  title: String
}

type MunicipalServiceRelationResponseCollection {
  data: [MunicipalServiceEntity!]!
}

type MunicipalServiceTag {
  createdAt: DateTime
  municipalServices(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type MunicipalServiceTagEntity {
  attributes: MunicipalServiceTag
  id: ID
}

type MunicipalServiceTagEntityResponse {
  data: MunicipalServiceTagEntity
}

type MunicipalServiceTagEntityResponseCollection {
  data: [MunicipalServiceTagEntity!]!
  meta: ResponseCollectionMeta!
}

input MunicipalServiceTagFiltersInput {
  and: [MunicipalServiceTagFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  municipalServices: MunicipalServiceFiltersInput
  not: MunicipalServiceTagFiltersInput
  or: [MunicipalServiceTagFiltersInput]
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MunicipalServiceTagInput {
  municipalServices: [ID]
  title: String
}

type MunicipalServiceTagRelationResponseCollection {
  data: [MunicipalServiceTagEntity!]!
}

type MunicipalServicesPage {
  createdAt: DateTime
  services(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceRelationResponseCollection
  servicesLegalPerson(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceRelationResponseCollection
  updatedAt: DateTime
}

type MunicipalServicesPageEntity {
  attributes: MunicipalServicesPage
  id: ID
}

type MunicipalServicesPageEntityResponse {
  data: MunicipalServicesPageEntity
}

type MunicipalServicesPageEntityResponseCollection {
  data: [MunicipalServicesPageEntity!]!
  meta: ResponseCollectionMeta!
}

input MunicipalServicesPageFiltersInput {
  and: [MunicipalServicesPageFiltersInput]
  createdAt: DateTimeFilterInput
  not: MunicipalServicesPageFiltersInput
  or: [MunicipalServicesPageFiltersInput]
  services: MunicipalServiceFiltersInput
  servicesLegalPerson: MunicipalServiceFiltersInput
  updatedAt: DateTimeFilterInput
}

input MunicipalServicesPageInput {
  services: [ID]
  servicesLegalPerson: [ID]
}

type MunicipalServicesPageRelationResponseCollection {
  data: [MunicipalServicesPageEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createContentReleasesRelease(data: ContentReleasesReleaseInput!): ContentReleasesReleaseEntityResponse
  createContentReleasesReleaseAction(data: ContentReleasesReleaseActionInput!): ContentReleasesReleaseActionEntityResponse
  createForm(data: FormInput!): FormEntityResponse
  createHomepageAnnouncement(data: HomepageAnnouncementInput!): HomepageAnnouncementEntityResponse
  createMunicipalService(data: MunicipalServiceInput!): MunicipalServiceEntityResponse
  createMunicipalServiceCategory(data: MunicipalServiceCategoryInput!): MunicipalServiceCategoryEntityResponse
  createMunicipalServiceTag(data: MunicipalServiceTagInput!): MunicipalServiceTagEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteContentReleasesRelease(id: ID!): ContentReleasesReleaseEntityResponse
  deleteContentReleasesReleaseAction(id: ID!): ContentReleasesReleaseActionEntityResponse
  deleteForm(id: ID!): FormEntityResponse
  deleteGeneral: GeneralEntityResponse
  deleteHelpPage: HelpPageEntityResponse
  deleteHomepage: HomepageEntityResponse
  deleteHomepageAnnouncement(id: ID!): HomepageAnnouncementEntityResponse
  deleteMunicipalService(id: ID!): MunicipalServiceEntityResponse
  deleteMunicipalServiceCategory(id: ID!): MunicipalServiceCategoryEntityResponse
  deleteMunicipalServiceTag(id: ID!): MunicipalServiceTagEntityResponse
  deleteMunicipalServicesPage: MunicipalServicesPageEntityResponse
  deleteTax: TaxEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateContentReleasesRelease(data: ContentReleasesReleaseInput!, id: ID!): ContentReleasesReleaseEntityResponse
  updateContentReleasesReleaseAction(data: ContentReleasesReleaseActionInput!, id: ID!): ContentReleasesReleaseActionEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateForm(data: FormInput!, id: ID!): FormEntityResponse
  updateGeneral(data: GeneralInput!): GeneralEntityResponse
  updateHelpPage(data: HelpPageInput!): HelpPageEntityResponse
  updateHomepage(data: HomepageInput!): HomepageEntityResponse
  updateHomepageAnnouncement(data: HomepageAnnouncementInput!, id: ID!): HomepageAnnouncementEntityResponse
  updateMunicipalService(data: MunicipalServiceInput!, id: ID!): MunicipalServiceEntityResponse
  updateMunicipalServiceCategory(data: MunicipalServiceCategoryInput!, id: ID!): MunicipalServiceCategoryEntityResponse
  updateMunicipalServiceTag(data: MunicipalServiceTagInput!, id: ID!): MunicipalServiceTagEntityResponse
  updateMunicipalServicesPage(data: MunicipalServicesPageInput!): MunicipalServicesPageEntityResponse
  updateTax(data: TaxInput!): TaxEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  contentReleasesRelease(id: ID): ContentReleasesReleaseEntityResponse
  contentReleasesReleaseAction(id: ID): ContentReleasesReleaseActionEntityResponse
  contentReleasesReleaseActions(filters: ContentReleasesReleaseActionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContentReleasesReleaseActionEntityResponseCollection
  contentReleasesReleases(filters: ContentReleasesReleaseFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContentReleasesReleaseEntityResponseCollection
  form(id: ID): FormEntityResponse
  forms(filters: FormFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): FormEntityResponseCollection
  general: GeneralEntityResponse
  helpPage: HelpPageEntityResponse
  homepage: HomepageEntityResponse
  homepageAnnouncement(id: ID): HomepageAnnouncementEntityResponse
  homepageAnnouncements(filters: HomepageAnnouncementFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HomepageAnnouncementEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  municipalService(id: ID): MunicipalServiceEntityResponse
  municipalServiceCategories(filters: MunicipalServiceCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceCategoryEntityResponseCollection
  municipalServiceCategory(id: ID): MunicipalServiceCategoryEntityResponse
  municipalServiceTag(id: ID): MunicipalServiceTagEntityResponse
  municipalServiceTags(filters: MunicipalServiceTagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceTagEntityResponseCollection
  municipalServices(filters: MunicipalServiceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MunicipalServiceEntityResponseCollection
  municipalServicesPage: MunicipalServicesPageEntityResponse
  tax: TaxEntityResponse
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tax {
  accountCommunicationConsentText: String!
  channelChangeEffectiveNextYearText: String
  channelChangeEffectiveNextYearTitle: String
  createdAt: DateTime
  currentYearTaxInPreparationText: String
  currentYearTaxInPreparationTitle: String
  displayCurrentYearTaxInPreparation: Boolean!
  paymentSuccessFaqLink: String
  paymentSuccessFeedbackLink: String
  paymentSuccessPrivacyPolicyLink: String
  updatedAt: DateTime
}

type TaxEntity {
  attributes: Tax
  id: ID
}

type TaxEntityResponse {
  data: TaxEntity
}

type TaxEntityResponseCollection {
  data: [TaxEntity!]!
  meta: ResponseCollectionMeta!
}

input TaxFiltersInput {
  accountCommunicationConsentText: StringFilterInput
  and: [TaxFiltersInput]
  channelChangeEffectiveNextYearText: StringFilterInput
  channelChangeEffectiveNextYearTitle: StringFilterInput
  createdAt: DateTimeFilterInput
  currentYearTaxInPreparationText: StringFilterInput
  currentYearTaxInPreparationTitle: StringFilterInput
  displayCurrentYearTaxInPreparation: BooleanFilterInput
  not: TaxFiltersInput
  or: [TaxFiltersInput]
  paymentSuccessFaqLink: StringFilterInput
  paymentSuccessFeedbackLink: StringFilterInput
  paymentSuccessPrivacyPolicyLink: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TaxInput {
  accountCommunicationConsentText: String
  channelChangeEffectiveNextYearText: String
  channelChangeEffectiveNextYearTitle: String
  currentYearTaxInPreparationText: String
  currentYearTaxInPreparationTitle: String
  displayCurrentYearTaxInPreparation: Boolean
  paymentSuccessFaqLink: String
  paymentSuccessFeedbackLink: String
  paymentSuccessPrivacyPolicyLink: String
}

type TaxRelationResponseCollection {
  data: [TaxEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
