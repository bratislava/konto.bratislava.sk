import { join } from 'node:path'
import * as diff from 'diff'
import chalk from 'chalk'
import { rimrafSync } from 'rimraf'
import { existsSync, readdirSync, readFileSync, statSync } from 'fs-extra'
import { generateClient } from './generateClient'
import { ValidType, validTypes } from './types'

/**
 * This script checks if the OpenAPI clients need to be regenerated by:
 * 1. Creating a temporary directory
 * 2. Generating fresh clients in the temporary directory using the latest OpenAPI specs
 * 3. Comparing the newly generated clients with the existing ones
 * 4. Showing git-style diffs for any detected changes
 * 5. Exiting with code 1 if changes are detected (useful for CI)
 *
 * Usage:
 * - CLI: `npm run check-changes`
 *
 * It will show detailed diffs for any files that have changed, been added, or been deleted.
 */

const tempDir = join(__dirname, '.temp-clients')

function getAllFiles(dir: string): string[] {
  const files: string[] = []

  readdirSync(dir).forEach((file) => {
    const fullPath = join(dir, file)
    if (statSync(fullPath).isDirectory()) {
      files.push(...getAllFiles(fullPath))
    } else {
      files.push(fullPath)
    }
  })

  return files
}

function compareDirectories(dir1: string, dir2: string): { file: string; differences: string }[] {
  const changes: { file: string; differences: string }[] = []

  const files1 = getAllFiles(dir1)
  const files2 = getAllFiles(dir2)

  const allFiles = new Set([
    ...files1.map((f) => f.replace(dir1, '')),
    ...files2.map((f) => f.replace(dir2, '')),
  ])

  for (const relativePath of allFiles) {
    const file1 = join(dir1, relativePath)
    const file2 = join(dir2, relativePath)

    if (!existsSync(file1)) {
      changes.push({
        file: relativePath,
        differences: chalk.green(`New file: ${relativePath}`),
      })
      continue
    }

    if (!existsSync(file2)) {
      changes.push({
        file: relativePath,
        differences: chalk.red(`Deleted file: ${relativePath}`),
      })
      continue
    }

    // Normalize line endings to LF before comparing
    const content1 = readFileSync(file1, 'utf8').replace(/\r\n/g, '\n')
    const content2 = readFileSync(file2, 'utf8').replace(/\r\n/g, '\n')

    if (content1 !== content2) {
      const differences = diff.createTwoFilesPatch(
        file1,
        file2,
        content1,
        content2,
        'Original',
        'New',
      )

      if (differences.length > 0) {
        changes.push({ file: relativePath, differences })
      }
    }
  }

  return changes
}

async function generateAndCompare() {
  let hasChanges = false

  // Create temp directory for new generated clients
  rimrafSync(tempDir)

  // Generate all clients in temp directory
  for (const type of validTypes) {
    console.log(`Generating ${type} client...`)
    try {
      await generateClient(type as ValidType, { rootDir: tempDir })
    } catch (error) {
      console.error(`Failed to generate client for ${type}:`, error)
      process.exit(1)
    }
  }

  for (const type of validTypes) {
    const originalPath = join(__dirname, type)
    const newPath = join(tempDir, type)

    if (!existsSync(originalPath)) {
      console.log(chalk.yellow(`⚠️  No existing client found for ${type}`))
      hasChanges = true
      continue
    }

    const changes = compareDirectories(originalPath, newPath)

    if (changes.length > 0) {
      hasChanges = true
      console.log(chalk.yellow(`\n📝 Changes detected in ${type} client:`))

      for (const { file, differences } of changes) {
        console.log(chalk.cyan(`\nFile: ${file}`))
        console.log(
          differences
            .split('\n')
            .map((line) => {
              if (line.startsWith('+')) return chalk.green(line)
              if (line.startsWith('-')) return chalk.red(line)
              return line
            })
            .join('\n'),
        )
      }
    } else {
      console.log(chalk.green(`✓ No changes in ${type} client`))
    }
  }

  rimrafSync(tempDir)

  if (hasChanges) {
    console.log(chalk.yellow('\n⚠️ Changes detected in generated clients'))
    process.exit(1)
  } else {
    console.log(chalk.green('\n✓ All clients are up to date'))
    process.exit(0)
  }
}

if (require.main === module) {
  generateAndCompare().catch((error) => {
    console.error('Error:', error)
    process.exit(1)
  })
}
